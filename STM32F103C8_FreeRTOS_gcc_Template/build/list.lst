ARM GAS  C:\Users\nine\AppData\Local\Temp\ccOTNVae.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"list.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.vListInitialise,"ax",%progbits
  18              		.align	1
  19              		.global	vListInitialise
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	vListInitialise:
  25              	.LVL0:
  26              	.LFB34:
  27              		.file 1 "FreeRTOS/list.c"
   1:FreeRTOS/list.c **** /*
   2:FreeRTOS/list.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:FreeRTOS/list.c ****     All rights reserved
   4:FreeRTOS/list.c **** 
   5:FreeRTOS/list.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/list.c **** 
   7:FreeRTOS/list.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/list.c **** 
   9:FreeRTOS/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/list.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/list.c **** 
  13:FreeRTOS/list.c ****     ***************************************************************************
  14:FreeRTOS/list.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/list.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/list.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/list.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/list.c ****     ***************************************************************************
  19:FreeRTOS/list.c **** 
  20:FreeRTOS/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/list.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/list.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/list.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/list.c **** 
  25:FreeRTOS/list.c ****     ***************************************************************************
  26:FreeRTOS/list.c ****      *                                                                       *
  27:FreeRTOS/list.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/list.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/list.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/list.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/list.c ****      *                                                                       *
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccOTNVae.s 			page 2


  32:FreeRTOS/list.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/list.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/list.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/list.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/list.c ****      *                                                                       *
  37:FreeRTOS/list.c ****     ***************************************************************************
  38:FreeRTOS/list.c **** 
  39:FreeRTOS/list.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/list.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/list.c ****     defined configASSERT()?
  42:FreeRTOS/list.c **** 
  43:FreeRTOS/list.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/list.c ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/list.c ****     participating in the support forum.
  46:FreeRTOS/list.c **** 
  47:FreeRTOS/list.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/list.c ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/list.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/list.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/list.c **** 
  52:FreeRTOS/list.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/list.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/list.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/list.c **** 
  56:FreeRTOS/list.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/list.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/list.c **** 
  59:FreeRTOS/list.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/list.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/list.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/list.c **** 
  63:FreeRTOS/list.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/list.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/list.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/list.c **** 
  67:FreeRTOS/list.c ****     1 tab == 4 spaces!
  68:FreeRTOS/list.c **** */
  69:FreeRTOS/list.c **** 
  70:FreeRTOS/list.c **** 
  71:FreeRTOS/list.c **** #include <stdlib.h>
  72:FreeRTOS/list.c **** #include "FreeRTOS.h"
  73:FreeRTOS/list.c **** #include "list.h"
  74:FreeRTOS/list.c **** 
  75:FreeRTOS/list.c **** /*-----------------------------------------------------------
  76:FreeRTOS/list.c ****  * PUBLIC LIST API documented in list.h
  77:FreeRTOS/list.c ****  *----------------------------------------------------------*/
  78:FreeRTOS/list.c **** 
  79:FreeRTOS/list.c **** void vListInitialise( List_t * const pxList )
  80:FreeRTOS/list.c **** {
  28              		.loc 1 80 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  81:FreeRTOS/list.c **** 	/* The list structure contains a list item which is used to mark the
  82:FreeRTOS/list.c **** 	end of the list.  To initialise the list the list end is inserted
  83:FreeRTOS/list.c **** 	as the only list entry. */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccOTNVae.s 			page 3


  84:FreeRTOS/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list struc
  33              		.loc 1 84 2 view .LVU1
  34              		.loc 1 84 37 is_stmt 0 view .LVU2
  35 0000 00F10803 		add	r3, r0, #8
  36              		.loc 1 84 18 view .LVU3
  37 0004 4360     		str	r3, [r0, #4]
  85:FreeRTOS/list.c **** 
  86:FreeRTOS/list.c **** 	/* The list end value is the highest possible value in the list to
  87:FreeRTOS/list.c **** 	ensure it remains at the end of the list. */
  88:FreeRTOS/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  38              		.loc 1 88 2 is_stmt 1 view .LVU4
  39              		.loc 1 88 30 is_stmt 0 view .LVU5
  40 0006 4FF0FF32 		mov	r2, #-1
  41 000a 8260     		str	r2, [r0, #8]
  89:FreeRTOS/list.c **** 
  90:FreeRTOS/list.c **** 	/* The list end next and previous pointers point to itself so we know
  91:FreeRTOS/list.c **** 	when the list is empty. */
  92:FreeRTOS/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list
  42              		.loc 1 92 2 is_stmt 1 view .LVU6
  43              		.loc 1 92 26 is_stmt 0 view .LVU7
  44 000c C360     		str	r3, [r0, #12]
  93:FreeRTOS/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  45              		.loc 1 93 2 is_stmt 1 view .LVU8
  46              		.loc 1 93 30 is_stmt 0 view .LVU9
  47 000e 0361     		str	r3, [r0, #16]
  94:FreeRTOS/list.c **** 
  95:FreeRTOS/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  48              		.loc 1 95 2 is_stmt 1 view .LVU10
  49              		.loc 1 95 26 is_stmt 0 view .LVU11
  50 0010 0023     		movs	r3, #0
  51 0012 0360     		str	r3, [r0]
  96:FreeRTOS/list.c **** 
  97:FreeRTOS/list.c **** 	/* Write known values into the list if
  98:FreeRTOS/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  99:FreeRTOS/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  52              		.loc 1 99 48 is_stmt 1 view .LVU12
 100:FreeRTOS/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  53              		.loc 1 100 48 view .LVU13
 101:FreeRTOS/list.c **** }
  54              		.loc 1 101 1 is_stmt 0 view .LVU14
  55 0014 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE34:
  59              		.section	.text.vListInitialiseItem,"ax",%progbits
  60              		.align	1
  61              		.global	vListInitialiseItem
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  66              	vListInitialiseItem:
  67              	.LVL1:
  68              	.LFB35:
 102:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 103:FreeRTOS/list.c **** 
 104:FreeRTOS/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
 105:FreeRTOS/list.c **** {
  69              		.loc 1 105 1 is_stmt 1 view -0
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccOTNVae.s 			page 4


  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		@ link register save eliminated.
 106:FreeRTOS/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
 107:FreeRTOS/list.c **** 	pxItem->pvContainer = NULL;
  74              		.loc 1 107 2 view .LVU16
  75              		.loc 1 107 22 is_stmt 0 view .LVU17
  76 0000 0023     		movs	r3, #0
  77 0002 0361     		str	r3, [r0, #16]
 108:FreeRTOS/list.c **** 
 109:FreeRTOS/list.c **** 	/* Write known values into the list item if
 110:FreeRTOS/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
 111:FreeRTOS/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  78              		.loc 1 111 57 is_stmt 1 view .LVU18
 112:FreeRTOS/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  79              		.loc 1 112 58 view .LVU19
 113:FreeRTOS/list.c **** }
  80              		.loc 1 113 1 is_stmt 0 view .LVU20
  81 0004 7047     		bx	lr
  82              		.cfi_endproc
  83              	.LFE35:
  85              		.section	.text.vListInsertEnd,"ax",%progbits
  86              		.align	1
  87              		.global	vListInsertEnd
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  92              	vListInsertEnd:
  93              	.LVL2:
  94              	.LFB36:
 114:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 115:FreeRTOS/list.c **** 
 116:FreeRTOS/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
 117:FreeRTOS/list.c **** {
  95              		.loc 1 117 1 is_stmt 1 view -0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 118:FreeRTOS/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
 100              		.loc 1 118 1 view .LVU22
 101              		.loc 1 118 20 is_stmt 0 view .LVU23
 102 0000 4368     		ldr	r3, [r0, #4]
 103              	.LVL3:
 119:FreeRTOS/list.c **** 
 120:FreeRTOS/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 121:FreeRTOS/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 122:FreeRTOS/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 123:FreeRTOS/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 104              		.loc 1 123 35 is_stmt 1 view .LVU24
 124:FreeRTOS/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 105              		.loc 1 124 47 view .LVU25
 125:FreeRTOS/list.c **** 
 126:FreeRTOS/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
 127:FreeRTOS/list.c **** 	makes the new list item the last item to be removed by a call to
 128:FreeRTOS/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccOTNVae.s 			page 5


 129:FreeRTOS/list.c **** 	pxNewListItem->pxNext = pxIndex;
 106              		.loc 1 129 2 view .LVU26
 107              		.loc 1 129 24 is_stmt 0 view .LVU27
 108 0002 4B60     		str	r3, [r1, #4]
 130:FreeRTOS/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 109              		.loc 1 130 2 is_stmt 1 view .LVU28
 110              		.loc 1 130 37 is_stmt 0 view .LVU29
 111 0004 9A68     		ldr	r2, [r3, #8]
 112              		.loc 1 130 28 view .LVU30
 113 0006 8A60     		str	r2, [r1, #8]
 131:FreeRTOS/list.c **** 
 132:FreeRTOS/list.c **** 	/* Only used during decision coverage testing. */
 133:FreeRTOS/list.c **** 	mtCOVERAGE_TEST_DELAY();
 114              		.loc 1 133 25 is_stmt 1 view .LVU31
 134:FreeRTOS/list.c **** 
 135:FreeRTOS/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 115              		.loc 1 135 2 view .LVU32
 116              		.loc 1 135 30 is_stmt 0 view .LVU33
 117 0008 5160     		str	r1, [r2, #4]
 136:FreeRTOS/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 118              		.loc 1 136 2 is_stmt 1 view .LVU34
 119              		.loc 1 136 22 is_stmt 0 view .LVU35
 120 000a 9960     		str	r1, [r3, #8]
 137:FreeRTOS/list.c **** 
 138:FreeRTOS/list.c **** 	/* Remember which list the item is in. */
 139:FreeRTOS/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 121              		.loc 1 139 2 is_stmt 1 view .LVU36
 122              		.loc 1 139 29 is_stmt 0 view .LVU37
 123 000c 0861     		str	r0, [r1, #16]
 140:FreeRTOS/list.c **** 
 141:FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )++;
 124              		.loc 1 141 2 is_stmt 1 view .LVU38
 125              		.loc 1 141 10 is_stmt 0 view .LVU39
 126 000e 0368     		ldr	r3, [r0]
 127              	.LVL4:
 128              		.loc 1 141 29 view .LVU40
 129 0010 0133     		adds	r3, r3, #1
 130 0012 0360     		str	r3, [r0]
 142:FreeRTOS/list.c **** }
 131              		.loc 1 142 1 view .LVU41
 132 0014 7047     		bx	lr
 133              		.cfi_endproc
 134              	.LFE36:
 136              		.section	.text.vListInsert,"ax",%progbits
 137              		.align	1
 138              		.global	vListInsert
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 143              	vListInsert:
 144              	.LVL5:
 145              	.LFB37:
 143:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 144:FreeRTOS/list.c **** 
 145:FreeRTOS/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 146:FreeRTOS/list.c **** {
 146              		.loc 1 146 1 is_stmt 1 view -0
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccOTNVae.s 			page 6


 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151              		.loc 1 146 1 is_stmt 0 view .LVU43
 152 0000 30B4     		push	{r4, r5}
 153              	.LCFI0:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 4, -8
 156              		.cfi_offset 5, -4
 147:FreeRTOS/list.c **** ListItem_t *pxIterator;
 157              		.loc 1 147 1 is_stmt 1 view .LVU44
 148:FreeRTOS/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 158              		.loc 1 148 1 view .LVU45
 159              		.loc 1 148 18 is_stmt 0 view .LVU46
 160 0002 0D68     		ldr	r5, [r1]
 161              	.LVL6:
 149:FreeRTOS/list.c **** 
 150:FreeRTOS/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 151:FreeRTOS/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 152:FreeRTOS/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 153:FreeRTOS/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 162              		.loc 1 153 35 is_stmt 1 view .LVU47
 154:FreeRTOS/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 163              		.loc 1 154 47 view .LVU48
 155:FreeRTOS/list.c **** 
 156:FreeRTOS/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 157:FreeRTOS/list.c **** 
 158:FreeRTOS/list.c **** 	If the list already contains a list item with the same item value then the
 159:FreeRTOS/list.c **** 	new list item should be placed after it.  This ensures that TCB's which are
 160:FreeRTOS/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 161:FreeRTOS/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 162:FreeRTOS/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 163:FreeRTOS/list.c **** 	first, and the algorithm slightly modified if necessary. */
 164:FreeRTOS/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 164              		.loc 1 164 2 view .LVU49
 165              		.loc 1 164 4 is_stmt 0 view .LVU50
 166 0004 B5F1FF3F 		cmp	r5, #-1
 167 0008 11D0     		beq	.L9
 165:FreeRTOS/list.c **** 	{
 166:FreeRTOS/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 167:FreeRTOS/list.c **** 	}
 168:FreeRTOS/list.c **** 	else
 169:FreeRTOS/list.c **** 	{
 170:FreeRTOS/list.c **** 		/* *** NOTE ***********************************************************
 171:FreeRTOS/list.c **** 		If you find your application is crashing here then likely causes are
 172:FreeRTOS/list.c **** 		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
 173:FreeRTOS/list.c **** 		more tips, and ensure configASSERT() is defined!
 174:FreeRTOS/list.c **** 		http://www.freertos.org/a00110.html#configASSERT
 175:FreeRTOS/list.c **** 
 176:FreeRTOS/list.c **** 			1) Stack overflow -
 177:FreeRTOS/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 178:FreeRTOS/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 179:FreeRTOS/list.c **** 			   parts where numerically high priority values denote low actual
 180:FreeRTOS/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 181:FreeRTOS/list.c **** 			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 182:FreeRTOS/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccOTNVae.s 			page 7


 183:FreeRTOS/list.c **** 			   http://www.freertos.org/a00110.html
 184:FreeRTOS/list.c **** 			3) Calling an API function from within a critical section or when
 185:FreeRTOS/list.c **** 			   the scheduler is suspended, or calling an API function that does
 186:FreeRTOS/list.c **** 			   not end in "FromISR" from an interrupt.
 187:FreeRTOS/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 188:FreeRTOS/list.c **** 			   before the scheduler has been started (are interrupts firing
 189:FreeRTOS/list.c **** 			   before vTaskStartScheduler() has been called?).
 190:FreeRTOS/list.c **** 		**********************************************************************/
 191:FreeRTOS/list.c **** 
 192:FreeRTOS/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 168              		.loc 1 192 3 is_stmt 1 view .LVU51
 169              		.loc 1 192 19 is_stmt 0 view .LVU52
 170 000a 00F10803 		add	r3, r0, #8
 171              	.LVL7:
 172              	.L7:
 173              		.loc 1 192 61 is_stmt 1 discriminator 1 view .LVU53
 174 000e 1C46     		mov	r4, r3
 175              		.loc 1 192 71 is_stmt 0 discriminator 1 view .LVU54
 176 0010 5B68     		ldr	r3, [r3, #4]
 177              	.LVL8:
 178              		.loc 1 192 79 discriminator 1 view .LVU55
 179 0012 1A68     		ldr	r2, [r3]
 180              		.loc 1 192 3 discriminator 1 view .LVU56
 181 0014 AA42     		cmp	r2, r5
 182 0016 FAD9     		bls	.L7
 183              	.L6:
 193:FreeRTOS/list.c **** 		{
 194:FreeRTOS/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 195:FreeRTOS/list.c **** 			insertion position. */
 196:FreeRTOS/list.c **** 		}
 197:FreeRTOS/list.c **** 	}
 198:FreeRTOS/list.c **** 
 199:FreeRTOS/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 184              		.loc 1 199 2 is_stmt 1 view .LVU57
 185              		.loc 1 199 36 is_stmt 0 view .LVU58
 186 0018 6368     		ldr	r3, [r4, #4]
 187              		.loc 1 199 24 view .LVU59
 188 001a 4B60     		str	r3, [r1, #4]
 200:FreeRTOS/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 189              		.loc 1 200 2 is_stmt 1 view .LVU60
 190              		.loc 1 200 36 is_stmt 0 view .LVU61
 191 001c 9960     		str	r1, [r3, #8]
 201:FreeRTOS/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 192              		.loc 1 201 2 is_stmt 1 view .LVU62
 193              		.loc 1 201 28 is_stmt 0 view .LVU63
 194 001e 8C60     		str	r4, [r1, #8]
 202:FreeRTOS/list.c **** 	pxIterator->pxNext = pxNewListItem;
 195              		.loc 1 202 2 is_stmt 1 view .LVU64
 196              		.loc 1 202 21 is_stmt 0 view .LVU65
 197 0020 6160     		str	r1, [r4, #4]
 203:FreeRTOS/list.c **** 
 204:FreeRTOS/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 205:FreeRTOS/list.c **** 	item later. */
 206:FreeRTOS/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 198              		.loc 1 206 2 is_stmt 1 view .LVU66
 199              		.loc 1 206 29 is_stmt 0 view .LVU67
 200 0022 0861     		str	r0, [r1, #16]
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccOTNVae.s 			page 8


 207:FreeRTOS/list.c **** 
 208:FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )++;
 201              		.loc 1 208 2 is_stmt 1 view .LVU68
 202              		.loc 1 208 10 is_stmt 0 view .LVU69
 203 0024 0368     		ldr	r3, [r0]
 204              		.loc 1 208 29 view .LVU70
 205 0026 0133     		adds	r3, r3, #1
 206 0028 0360     		str	r3, [r0]
 209:FreeRTOS/list.c **** }
 207              		.loc 1 209 1 view .LVU71
 208 002a 30BC     		pop	{r4, r5}
 209              	.LCFI1:
 210              		.cfi_remember_state
 211              		.cfi_restore 5
 212              		.cfi_restore 4
 213              		.cfi_def_cfa_offset 0
 214              	.LVL9:
 215              		.loc 1 209 1 view .LVU72
 216 002c 7047     		bx	lr
 217              	.LVL10:
 218              	.L9:
 219              	.LCFI2:
 220              		.cfi_restore_state
 166:FreeRTOS/list.c **** 	}
 221              		.loc 1 166 3 is_stmt 1 view .LVU73
 166:FreeRTOS/list.c **** 	}
 222              		.loc 1 166 14 is_stmt 0 view .LVU74
 223 002e 0469     		ldr	r4, [r0, #16]
 224              	.LVL11:
 166:FreeRTOS/list.c **** 	}
 225              		.loc 1 166 14 view .LVU75
 226 0030 F2E7     		b	.L6
 227              		.cfi_endproc
 228              	.LFE37:
 230              		.section	.text.uxListRemove,"ax",%progbits
 231              		.align	1
 232              		.global	uxListRemove
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 237              	uxListRemove:
 238              	.LVL12:
 239              	.LFB38:
 210:FreeRTOS/list.c **** /*-----------------------------------------------------------*/
 211:FreeRTOS/list.c **** 
 212:FreeRTOS/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 213:FreeRTOS/list.c **** {
 240              		.loc 1 213 1 is_stmt 1 view -0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 214:FreeRTOS/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 215:FreeRTOS/list.c **** item. */
 216:FreeRTOS/list.c **** List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 245              		.loc 1 216 1 view .LVU77
 246              		.loc 1 216 16 is_stmt 0 view .LVU78
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccOTNVae.s 			page 9


 247 0000 0369     		ldr	r3, [r0, #16]
 248              	.LVL13:
 217:FreeRTOS/list.c **** 
 218:FreeRTOS/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 249              		.loc 1 218 2 is_stmt 1 view .LVU79
 250              		.loc 1 218 16 is_stmt 0 view .LVU80
 251 0002 4168     		ldr	r1, [r0, #4]
 252              		.loc 1 218 53 view .LVU81
 253 0004 8268     		ldr	r2, [r0, #8]
 254              		.loc 1 218 37 view .LVU82
 255 0006 8A60     		str	r2, [r1, #8]
 219:FreeRTOS/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 256              		.loc 1 219 2 is_stmt 1 view .LVU83
 257              		.loc 1 219 53 is_stmt 0 view .LVU84
 258 0008 4168     		ldr	r1, [r0, #4]
 259              		.loc 1 219 37 view .LVU85
 260 000a 5160     		str	r1, [r2, #4]
 220:FreeRTOS/list.c **** 
 221:FreeRTOS/list.c **** 	/* Only used during decision coverage testing. */
 222:FreeRTOS/list.c **** 	mtCOVERAGE_TEST_DELAY();
 261              		.loc 1 222 25 is_stmt 1 view .LVU86
 223:FreeRTOS/list.c **** 
 224:FreeRTOS/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 225:FreeRTOS/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 262              		.loc 1 225 2 view .LVU87
 263              		.loc 1 225 12 is_stmt 0 view .LVU88
 264 000c 5A68     		ldr	r2, [r3, #4]
 265              		.loc 1 225 4 view .LVU89
 266 000e 8242     		cmp	r2, r0
 267 0010 05D0     		beq	.L12
 268              	.L11:
 226:FreeRTOS/list.c **** 	{
 227:FreeRTOS/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:FreeRTOS/list.c **** 	}
 229:FreeRTOS/list.c **** 	else
 230:FreeRTOS/list.c **** 	{
 231:FreeRTOS/list.c **** 		mtCOVERAGE_TEST_MARKER();
 269              		.loc 1 231 27 is_stmt 1 view .LVU90
 232:FreeRTOS/list.c **** 	}
 233:FreeRTOS/list.c **** 
 234:FreeRTOS/list.c **** 	pxItemToRemove->pvContainer = NULL;
 270              		.loc 1 234 2 view .LVU91
 271              		.loc 1 234 30 is_stmt 0 view .LVU92
 272 0012 0022     		movs	r2, #0
 273 0014 0261     		str	r2, [r0, #16]
 235:FreeRTOS/list.c **** 	( pxList->uxNumberOfItems )--;
 274              		.loc 1 235 2 is_stmt 1 view .LVU93
 275              		.loc 1 235 10 is_stmt 0 view .LVU94
 276 0016 1868     		ldr	r0, [r3]
 277              	.LVL14:
 278              		.loc 1 235 29 view .LVU95
 279 0018 0138     		subs	r0, r0, #1
 280 001a 1860     		str	r0, [r3]
 236:FreeRTOS/list.c **** 
 237:FreeRTOS/list.c **** 	return pxList->uxNumberOfItems;
 281              		.loc 1 237 2 is_stmt 1 view .LVU96
 238:FreeRTOS/list.c **** }
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccOTNVae.s 			page 10


 282              		.loc 1 238 1 is_stmt 0 view .LVU97
 283 001c 7047     		bx	lr
 284              	.LVL15:
 285              	.L12:
 227:FreeRTOS/list.c **** 	}
 286              		.loc 1 227 3 is_stmt 1 view .LVU98
 227:FreeRTOS/list.c **** 	}
 287              		.loc 1 227 35 is_stmt 0 view .LVU99
 288 001e 8268     		ldr	r2, [r0, #8]
 227:FreeRTOS/list.c **** 	}
 289              		.loc 1 227 19 view .LVU100
 290 0020 5A60     		str	r2, [r3, #4]
 291 0022 F6E7     		b	.L11
 292              		.cfi_endproc
 293              	.LFE38:
 295              		.text
 296              	.Letext0:
 297              		.file 2 "e:\\programdata\\gnu arm embedded toolchain\\arm-none-eabi\\include\\machine\\_default_ty
 298              		.file 3 "e:\\programdata\\gnu arm embedded toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 299              		.file 4 "FreeRTOS/portable/ARM_CM3/portmacro.h"
 300              		.file 5 "FreeRTOS/include/list.h"
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccOTNVae.s 			page 11


DEFINED SYMBOLS
                            *ABS*:00000000 list.c
C:\Users\nine\AppData\Local\Temp\ccOTNVae.s:18     .text.vListInitialise:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccOTNVae.s:24     .text.vListInitialise:00000000 vListInitialise
C:\Users\nine\AppData\Local\Temp\ccOTNVae.s:60     .text.vListInitialiseItem:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccOTNVae.s:66     .text.vListInitialiseItem:00000000 vListInitialiseItem
C:\Users\nine\AppData\Local\Temp\ccOTNVae.s:86     .text.vListInsertEnd:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccOTNVae.s:92     .text.vListInsertEnd:00000000 vListInsertEnd
C:\Users\nine\AppData\Local\Temp\ccOTNVae.s:137    .text.vListInsert:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccOTNVae.s:143    .text.vListInsert:00000000 vListInsert
C:\Users\nine\AppData\Local\Temp\ccOTNVae.s:231    .text.uxListRemove:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccOTNVae.s:237    .text.uxListRemove:00000000 uxListRemove

NO UNDEFINED SYMBOLS
