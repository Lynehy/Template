ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"heap_4.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvHeapInit,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	prvHeapInit:
  24              	.LFB39:
  25              		.file 1 "FreeRTOS/portable/MemMang/heap_4.c"
   1:FreeRTOS/portable/MemMang/heap_4.c **** /*
   2:FreeRTOS/portable/MemMang/heap_4.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:FreeRTOS/portable/MemMang/heap_4.c ****     All rights reserved
   4:FreeRTOS/portable/MemMang/heap_4.c **** 
   5:FreeRTOS/portable/MemMang/heap_4.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portable/MemMang/heap_4.c **** 
   7:FreeRTOS/portable/MemMang/heap_4.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/portable/MemMang/heap_4.c **** 
   9:FreeRTOS/portable/MemMang/heap_4.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/portable/MemMang/heap_4.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/portable/MemMang/heap_4.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/portable/MemMang/heap_4.c **** 
  13:FreeRTOS/portable/MemMang/heap_4.c ****     ***************************************************************************
  14:FreeRTOS/portable/MemMang/heap_4.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/portable/MemMang/heap_4.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/portable/MemMang/heap_4.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/portable/MemMang/heap_4.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/portable/MemMang/heap_4.c ****     ***************************************************************************
  19:FreeRTOS/portable/MemMang/heap_4.c **** 
  20:FreeRTOS/portable/MemMang/heap_4.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/portable/MemMang/heap_4.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/portable/MemMang/heap_4.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/portable/MemMang/heap_4.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/portable/MemMang/heap_4.c **** 
  25:FreeRTOS/portable/MemMang/heap_4.c ****     ***************************************************************************
  26:FreeRTOS/portable/MemMang/heap_4.c ****      *                                                                       *
  27:FreeRTOS/portable/MemMang/heap_4.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/portable/MemMang/heap_4.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/portable/MemMang/heap_4.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/portable/MemMang/heap_4.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/portable/MemMang/heap_4.c ****      *                                                                       *
  32:FreeRTOS/portable/MemMang/heap_4.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/portable/MemMang/heap_4.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 2


  34:FreeRTOS/portable/MemMang/heap_4.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/portable/MemMang/heap_4.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/portable/MemMang/heap_4.c ****      *                                                                       *
  37:FreeRTOS/portable/MemMang/heap_4.c ****     ***************************************************************************
  38:FreeRTOS/portable/MemMang/heap_4.c **** 
  39:FreeRTOS/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/portable/MemMang/heap_4.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/portable/MemMang/heap_4.c ****     defined configASSERT()?
  42:FreeRTOS/portable/MemMang/heap_4.c **** 
  43:FreeRTOS/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/portable/MemMang/heap_4.c ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/portable/MemMang/heap_4.c ****     participating in the support forum.
  46:FreeRTOS/portable/MemMang/heap_4.c **** 
  47:FreeRTOS/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/portable/MemMang/heap_4.c ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/portable/MemMang/heap_4.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/portable/MemMang/heap_4.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/portable/MemMang/heap_4.c **** 
  52:FreeRTOS/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/portable/MemMang/heap_4.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/portable/MemMang/heap_4.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/portable/MemMang/heap_4.c **** 
  56:FreeRTOS/portable/MemMang/heap_4.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/portable/MemMang/heap_4.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/portable/MemMang/heap_4.c **** 
  59:FreeRTOS/portable/MemMang/heap_4.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/portable/MemMang/heap_4.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/portable/MemMang/heap_4.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/portable/MemMang/heap_4.c **** 
  63:FreeRTOS/portable/MemMang/heap_4.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/portable/MemMang/heap_4.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/portable/MemMang/heap_4.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/portable/MemMang/heap_4.c **** 
  67:FreeRTOS/portable/MemMang/heap_4.c ****     1 tab == 4 spaces!
  68:FreeRTOS/portable/MemMang/heap_4.c **** */
  69:FreeRTOS/portable/MemMang/heap_4.c **** 
  70:FreeRTOS/portable/MemMang/heap_4.c **** /*
  71:FreeRTOS/portable/MemMang/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  72:FreeRTOS/portable/MemMang/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
  73:FreeRTOS/portable/MemMang/heap_4.c ****  * limits memory fragmentation.
  74:FreeRTOS/portable/MemMang/heap_4.c ****  *
  75:FreeRTOS/portable/MemMang/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
  76:FreeRTOS/portable/MemMang/heap_4.c ****  * memory management pages of http://www.FreeRTOS.org for more information.
  77:FreeRTOS/portable/MemMang/heap_4.c ****  */
  78:FreeRTOS/portable/MemMang/heap_4.c **** #include <stdlib.h>
  79:FreeRTOS/portable/MemMang/heap_4.c **** 
  80:FreeRTOS/portable/MemMang/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  81:FreeRTOS/portable/MemMang/heap_4.c **** all the API functions to use the MPU wrappers.  That should only be done when
  82:FreeRTOS/portable/MemMang/heap_4.c **** task.h is included from an application file. */
  83:FreeRTOS/portable/MemMang/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  84:FreeRTOS/portable/MemMang/heap_4.c **** 
  85:FreeRTOS/portable/MemMang/heap_4.c **** #include "FreeRTOS.h"
  86:FreeRTOS/portable/MemMang/heap_4.c **** #include "task.h"
  87:FreeRTOS/portable/MemMang/heap_4.c **** 
  88:FreeRTOS/portable/MemMang/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  89:FreeRTOS/portable/MemMang/heap_4.c **** 
  90:FreeRTOS/portable/MemMang/heap_4.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 3


  91:FreeRTOS/portable/MemMang/heap_4.c **** 	#error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  92:FreeRTOS/portable/MemMang/heap_4.c **** #endif
  93:FreeRTOS/portable/MemMang/heap_4.c **** 
  94:FreeRTOS/portable/MemMang/heap_4.c **** /* Block sizes must not get too small. */
  95:FreeRTOS/portable/MemMang/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( xHeapStructSize << 1 ) )
  96:FreeRTOS/portable/MemMang/heap_4.c **** 
  97:FreeRTOS/portable/MemMang/heap_4.c **** /* Assumes 8bit bytes! */
  98:FreeRTOS/portable/MemMang/heap_4.c **** #define heapBITS_PER_BYTE		( ( size_t ) 8 )
  99:FreeRTOS/portable/MemMang/heap_4.c **** 
 100:FreeRTOS/portable/MemMang/heap_4.c **** /* Allocate the memory for the heap. */
 101:FreeRTOS/portable/MemMang/heap_4.c **** #if( configAPPLICATION_ALLOCATED_HEAP == 1 )
 102:FreeRTOS/portable/MemMang/heap_4.c **** 	/* The application writer has already defined the array used for the RTOS
 103:FreeRTOS/portable/MemMang/heap_4.c **** 	heap - probably so it can be placed in a special segment or address. */
 104:FreeRTOS/portable/MemMang/heap_4.c **** 	extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
 105:FreeRTOS/portable/MemMang/heap_4.c **** #else
 106:FreeRTOS/portable/MemMang/heap_4.c **** 	static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
 107:FreeRTOS/portable/MemMang/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
 108:FreeRTOS/portable/MemMang/heap_4.c **** 
 109:FreeRTOS/portable/MemMang/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
 110:FreeRTOS/portable/MemMang/heap_4.c **** of their memory address. */
 111:FreeRTOS/portable/MemMang/heap_4.c **** typedef struct A_BLOCK_LINK
 112:FreeRTOS/portable/MemMang/heap_4.c **** {
 113:FreeRTOS/portable/MemMang/heap_4.c **** 	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
 114:FreeRTOS/portable/MemMang/heap_4.c **** 	size_t xBlockSize;						/*<< The size of the free block. */
 115:FreeRTOS/portable/MemMang/heap_4.c **** } BlockLink_t;
 116:FreeRTOS/portable/MemMang/heap_4.c **** 
 117:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 118:FreeRTOS/portable/MemMang/heap_4.c **** 
 119:FreeRTOS/portable/MemMang/heap_4.c **** /*
 120:FreeRTOS/portable/MemMang/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
 121:FreeRTOS/portable/MemMang/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
 122:FreeRTOS/portable/MemMang/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
 123:FreeRTOS/portable/MemMang/heap_4.c ****  * adjacent to each other.
 124:FreeRTOS/portable/MemMang/heap_4.c ****  */
 125:FreeRTOS/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert );
 126:FreeRTOS/portable/MemMang/heap_4.c **** 
 127:FreeRTOS/portable/MemMang/heap_4.c **** /*
 128:FreeRTOS/portable/MemMang/heap_4.c ****  * Called automatically to setup the required heap structures the first time
 129:FreeRTOS/portable/MemMang/heap_4.c ****  * pvPortMalloc() is called.
 130:FreeRTOS/portable/MemMang/heap_4.c ****  */
 131:FreeRTOS/portable/MemMang/heap_4.c **** static void prvHeapInit( void );
 132:FreeRTOS/portable/MemMang/heap_4.c **** 
 133:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 134:FreeRTOS/portable/MemMang/heap_4.c **** 
 135:FreeRTOS/portable/MemMang/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
 136:FreeRTOS/portable/MemMang/heap_4.c **** block must by correctly byte aligned. */
 137:FreeRTOS/portable/MemMang/heap_4.c **** static const size_t xHeapStructSize	= ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
 138:FreeRTOS/portable/MemMang/heap_4.c **** 
 139:FreeRTOS/portable/MemMang/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
 140:FreeRTOS/portable/MemMang/heap_4.c **** static BlockLink_t xStart, *pxEnd = NULL;
 141:FreeRTOS/portable/MemMang/heap_4.c **** 
 142:FreeRTOS/portable/MemMang/heap_4.c **** /* Keeps track of the number of free bytes remaining, but says nothing about
 143:FreeRTOS/portable/MemMang/heap_4.c **** fragmentation. */
 144:FreeRTOS/portable/MemMang/heap_4.c **** static size_t xFreeBytesRemaining = 0U;
 145:FreeRTOS/portable/MemMang/heap_4.c **** static size_t xMinimumEverFreeBytesRemaining = 0U;
 146:FreeRTOS/portable/MemMang/heap_4.c **** 
 147:FreeRTOS/portable/MemMang/heap_4.c **** /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 4


 148:FreeRTOS/portable/MemMang/heap_4.c **** member of an BlockLink_t structure is set then the block belongs to the
 149:FreeRTOS/portable/MemMang/heap_4.c **** application.  When the bit is free the block is still part of the free heap
 150:FreeRTOS/portable/MemMang/heap_4.c **** space. */
 151:FreeRTOS/portable/MemMang/heap_4.c **** static size_t xBlockAllocatedBit = 0;
 152:FreeRTOS/portable/MemMang/heap_4.c **** 
 153:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 154:FreeRTOS/portable/MemMang/heap_4.c **** 
 155:FreeRTOS/portable/MemMang/heap_4.c **** void *pvPortMalloc( size_t xWantedSize )
 156:FreeRTOS/portable/MemMang/heap_4.c **** {
 157:FreeRTOS/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 158:FreeRTOS/portable/MemMang/heap_4.c **** void *pvReturn = NULL;
 159:FreeRTOS/portable/MemMang/heap_4.c **** 
 160:FreeRTOS/portable/MemMang/heap_4.c **** 	vTaskSuspendAll();
 161:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 162:FreeRTOS/portable/MemMang/heap_4.c **** 		/* If this is the first call to malloc then the heap will require
 163:FreeRTOS/portable/MemMang/heap_4.c **** 		initialisation to setup the list of free blocks. */
 164:FreeRTOS/portable/MemMang/heap_4.c **** 		if( pxEnd == NULL )
 165:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 166:FreeRTOS/portable/MemMang/heap_4.c **** 			prvHeapInit();
 167:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 168:FreeRTOS/portable/MemMang/heap_4.c **** 		else
 169:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 170:FreeRTOS/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 171:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 172:FreeRTOS/portable/MemMang/heap_4.c **** 
 173:FreeRTOS/portable/MemMang/heap_4.c **** 		/* Check the requested block size is not so large that the top bit is
 174:FreeRTOS/portable/MemMang/heap_4.c **** 		set.  The top bit of the block size member of the BlockLink_t structure
 175:FreeRTOS/portable/MemMang/heap_4.c **** 		is used to determine who owns the block - the application or the
 176:FreeRTOS/portable/MemMang/heap_4.c **** 		kernel, so it must be free. */
 177:FreeRTOS/portable/MemMang/heap_4.c **** 		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 178:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 179:FreeRTOS/portable/MemMang/heap_4.c **** 			/* The wanted size is increased so it can contain a BlockLink_t
 180:FreeRTOS/portable/MemMang/heap_4.c **** 			structure in addition to the requested amount of bytes. */
 181:FreeRTOS/portable/MemMang/heap_4.c **** 			if( xWantedSize > 0 )
 182:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 183:FreeRTOS/portable/MemMang/heap_4.c **** 				xWantedSize += xHeapStructSize;
 184:FreeRTOS/portable/MemMang/heap_4.c **** 
 185:FreeRTOS/portable/MemMang/heap_4.c **** 				/* Ensure that blocks are always aligned to the required number
 186:FreeRTOS/portable/MemMang/heap_4.c **** 				of bytes. */
 187:FreeRTOS/portable/MemMang/heap_4.c **** 				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 188:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 189:FreeRTOS/portable/MemMang/heap_4.c **** 					/* Byte alignment required. */
 190:FreeRTOS/portable/MemMang/heap_4.c **** 					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 191:FreeRTOS/portable/MemMang/heap_4.c **** 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 192:FreeRTOS/portable/MemMang/heap_4.c **** 				}
 193:FreeRTOS/portable/MemMang/heap_4.c **** 				else
 194:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 195:FreeRTOS/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 196:FreeRTOS/portable/MemMang/heap_4.c **** 				}
 197:FreeRTOS/portable/MemMang/heap_4.c **** 			}
 198:FreeRTOS/portable/MemMang/heap_4.c **** 			else
 199:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 200:FreeRTOS/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 201:FreeRTOS/portable/MemMang/heap_4.c **** 			}
 202:FreeRTOS/portable/MemMang/heap_4.c **** 
 203:FreeRTOS/portable/MemMang/heap_4.c **** 			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 204:FreeRTOS/portable/MemMang/heap_4.c **** 			{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 5


 205:FreeRTOS/portable/MemMang/heap_4.c **** 				/* Traverse the list from the start	(lowest address) block until
 206:FreeRTOS/portable/MemMang/heap_4.c **** 				one	of adequate size is found. */
 207:FreeRTOS/portable/MemMang/heap_4.c **** 				pxPreviousBlock = &xStart;
 208:FreeRTOS/portable/MemMang/heap_4.c **** 				pxBlock = xStart.pxNextFreeBlock;
 209:FreeRTOS/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 210:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 211:FreeRTOS/portable/MemMang/heap_4.c **** 					pxPreviousBlock = pxBlock;
 212:FreeRTOS/portable/MemMang/heap_4.c **** 					pxBlock = pxBlock->pxNextFreeBlock;
 213:FreeRTOS/portable/MemMang/heap_4.c **** 				}
 214:FreeRTOS/portable/MemMang/heap_4.c **** 
 215:FreeRTOS/portable/MemMang/heap_4.c **** 				/* If the end marker was reached then a block of adequate size
 216:FreeRTOS/portable/MemMang/heap_4.c **** 				was	not found. */
 217:FreeRTOS/portable/MemMang/heap_4.c **** 				if( pxBlock != pxEnd )
 218:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 219:FreeRTOS/portable/MemMang/heap_4.c **** 					/* Return the memory space pointed to - jumping over the
 220:FreeRTOS/portable/MemMang/heap_4.c **** 					BlockLink_t structure at its start. */
 221:FreeRTOS/portable/MemMang/heap_4.c **** 					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize )
 222:FreeRTOS/portable/MemMang/heap_4.c **** 
 223:FreeRTOS/portable/MemMang/heap_4.c **** 					/* This block is being returned for use so must be taken out
 224:FreeRTOS/portable/MemMang/heap_4.c **** 					of the list of free blocks. */
 225:FreeRTOS/portable/MemMang/heap_4.c **** 					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 226:FreeRTOS/portable/MemMang/heap_4.c **** 
 227:FreeRTOS/portable/MemMang/heap_4.c **** 					/* If the block is larger than required it can be split into
 228:FreeRTOS/portable/MemMang/heap_4.c **** 					two. */
 229:FreeRTOS/portable/MemMang/heap_4.c **** 					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 230:FreeRTOS/portable/MemMang/heap_4.c **** 					{
 231:FreeRTOS/portable/MemMang/heap_4.c **** 						/* This block is to be split into two.  Create a new
 232:FreeRTOS/portable/MemMang/heap_4.c **** 						block following the number of bytes requested. The void
 233:FreeRTOS/portable/MemMang/heap_4.c **** 						cast is used to prevent byte alignment warnings from the
 234:FreeRTOS/portable/MemMang/heap_4.c **** 						compiler. */
 235:FreeRTOS/portable/MemMang/heap_4.c **** 						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 236:FreeRTOS/portable/MemMang/heap_4.c **** 						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 237:FreeRTOS/portable/MemMang/heap_4.c **** 
 238:FreeRTOS/portable/MemMang/heap_4.c **** 						/* Calculate the sizes of two blocks split from the
 239:FreeRTOS/portable/MemMang/heap_4.c **** 						single block. */
 240:FreeRTOS/portable/MemMang/heap_4.c **** 						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 241:FreeRTOS/portable/MemMang/heap_4.c **** 						pxBlock->xBlockSize = xWantedSize;
 242:FreeRTOS/portable/MemMang/heap_4.c **** 
 243:FreeRTOS/portable/MemMang/heap_4.c **** 						/* Insert the new block into the list of free blocks. */
 244:FreeRTOS/portable/MemMang/heap_4.c **** 						prvInsertBlockIntoFreeList( pxNewBlockLink );
 245:FreeRTOS/portable/MemMang/heap_4.c **** 					}
 246:FreeRTOS/portable/MemMang/heap_4.c **** 					else
 247:FreeRTOS/portable/MemMang/heap_4.c **** 					{
 248:FreeRTOS/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 249:FreeRTOS/portable/MemMang/heap_4.c **** 					}
 250:FreeRTOS/portable/MemMang/heap_4.c **** 
 251:FreeRTOS/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining -= pxBlock->xBlockSize;
 252:FreeRTOS/portable/MemMang/heap_4.c **** 
 253:FreeRTOS/portable/MemMang/heap_4.c **** 					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 254:FreeRTOS/portable/MemMang/heap_4.c **** 					{
 255:FreeRTOS/portable/MemMang/heap_4.c **** 						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 256:FreeRTOS/portable/MemMang/heap_4.c **** 					}
 257:FreeRTOS/portable/MemMang/heap_4.c **** 					else
 258:FreeRTOS/portable/MemMang/heap_4.c **** 					{
 259:FreeRTOS/portable/MemMang/heap_4.c **** 						mtCOVERAGE_TEST_MARKER();
 260:FreeRTOS/portable/MemMang/heap_4.c **** 					}
 261:FreeRTOS/portable/MemMang/heap_4.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 6


 262:FreeRTOS/portable/MemMang/heap_4.c **** 					/* The block is being returned - it is allocated and owned
 263:FreeRTOS/portable/MemMang/heap_4.c **** 					by the application and has no "next" block. */
 264:FreeRTOS/portable/MemMang/heap_4.c **** 					pxBlock->xBlockSize |= xBlockAllocatedBit;
 265:FreeRTOS/portable/MemMang/heap_4.c **** 					pxBlock->pxNextFreeBlock = NULL;
 266:FreeRTOS/portable/MemMang/heap_4.c **** 				}
 267:FreeRTOS/portable/MemMang/heap_4.c **** 				else
 268:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 269:FreeRTOS/portable/MemMang/heap_4.c **** 					mtCOVERAGE_TEST_MARKER();
 270:FreeRTOS/portable/MemMang/heap_4.c **** 				}
 271:FreeRTOS/portable/MemMang/heap_4.c **** 			}
 272:FreeRTOS/portable/MemMang/heap_4.c **** 			else
 273:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 274:FreeRTOS/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 275:FreeRTOS/portable/MemMang/heap_4.c **** 			}
 276:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 277:FreeRTOS/portable/MemMang/heap_4.c **** 		else
 278:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 279:FreeRTOS/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 280:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 281:FreeRTOS/portable/MemMang/heap_4.c **** 
 282:FreeRTOS/portable/MemMang/heap_4.c **** 		traceMALLOC( pvReturn, xWantedSize );
 283:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 284:FreeRTOS/portable/MemMang/heap_4.c **** 	( void ) xTaskResumeAll();
 285:FreeRTOS/portable/MemMang/heap_4.c **** 
 286:FreeRTOS/portable/MemMang/heap_4.c **** 	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
 287:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 288:FreeRTOS/portable/MemMang/heap_4.c **** 		if( pvReturn == NULL )
 289:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 290:FreeRTOS/portable/MemMang/heap_4.c **** 			extern void vApplicationMallocFailedHook( void );
 291:FreeRTOS/portable/MemMang/heap_4.c **** 			vApplicationMallocFailedHook();
 292:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 293:FreeRTOS/portable/MemMang/heap_4.c **** 		else
 294:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 295:FreeRTOS/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 296:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 297:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 298:FreeRTOS/portable/MemMang/heap_4.c **** 	#endif
 299:FreeRTOS/portable/MemMang/heap_4.c **** 
 300:FreeRTOS/portable/MemMang/heap_4.c **** 	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 301:FreeRTOS/portable/MemMang/heap_4.c **** 	return pvReturn;
 302:FreeRTOS/portable/MemMang/heap_4.c **** }
 303:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 304:FreeRTOS/portable/MemMang/heap_4.c **** 
 305:FreeRTOS/portable/MemMang/heap_4.c **** void vPortFree( void *pv )
 306:FreeRTOS/portable/MemMang/heap_4.c **** {
 307:FreeRTOS/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 308:FreeRTOS/portable/MemMang/heap_4.c **** BlockLink_t *pxLink;
 309:FreeRTOS/portable/MemMang/heap_4.c **** 
 310:FreeRTOS/portable/MemMang/heap_4.c **** 	if( pv != NULL )
 311:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 312:FreeRTOS/portable/MemMang/heap_4.c **** 		/* The memory being freed will have an BlockLink_t structure immediately
 313:FreeRTOS/portable/MemMang/heap_4.c **** 		before it. */
 314:FreeRTOS/portable/MemMang/heap_4.c **** 		puc -= xHeapStructSize;
 315:FreeRTOS/portable/MemMang/heap_4.c **** 
 316:FreeRTOS/portable/MemMang/heap_4.c **** 		/* This casting is to keep the compiler from issuing warnings. */
 317:FreeRTOS/portable/MemMang/heap_4.c **** 		pxLink = ( void * ) puc;
 318:FreeRTOS/portable/MemMang/heap_4.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 7


 319:FreeRTOS/portable/MemMang/heap_4.c **** 		/* Check the block is actually allocated. */
 320:FreeRTOS/portable/MemMang/heap_4.c **** 		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 321:FreeRTOS/portable/MemMang/heap_4.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 322:FreeRTOS/portable/MemMang/heap_4.c **** 
 323:FreeRTOS/portable/MemMang/heap_4.c **** 		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 324:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 325:FreeRTOS/portable/MemMang/heap_4.c **** 			if( pxLink->pxNextFreeBlock == NULL )
 326:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 327:FreeRTOS/portable/MemMang/heap_4.c **** 				/* The block is being returned to the heap - it is no longer
 328:FreeRTOS/portable/MemMang/heap_4.c **** 				allocated. */
 329:FreeRTOS/portable/MemMang/heap_4.c **** 				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 330:FreeRTOS/portable/MemMang/heap_4.c **** 
 331:FreeRTOS/portable/MemMang/heap_4.c **** 				vTaskSuspendAll();
 332:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 333:FreeRTOS/portable/MemMang/heap_4.c **** 					/* Add this block to the list of free blocks. */
 334:FreeRTOS/portable/MemMang/heap_4.c **** 					xFreeBytesRemaining += pxLink->xBlockSize;
 335:FreeRTOS/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 336:FreeRTOS/portable/MemMang/heap_4.c **** 					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 337:FreeRTOS/portable/MemMang/heap_4.c **** 				}
 338:FreeRTOS/portable/MemMang/heap_4.c **** 				( void ) xTaskResumeAll();
 339:FreeRTOS/portable/MemMang/heap_4.c **** 			}
 340:FreeRTOS/portable/MemMang/heap_4.c **** 			else
 341:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 342:FreeRTOS/portable/MemMang/heap_4.c **** 				mtCOVERAGE_TEST_MARKER();
 343:FreeRTOS/portable/MemMang/heap_4.c **** 			}
 344:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 345:FreeRTOS/portable/MemMang/heap_4.c **** 		else
 346:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 347:FreeRTOS/portable/MemMang/heap_4.c **** 			mtCOVERAGE_TEST_MARKER();
 348:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 349:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 350:FreeRTOS/portable/MemMang/heap_4.c **** }
 351:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 352:FreeRTOS/portable/MemMang/heap_4.c **** 
 353:FreeRTOS/portable/MemMang/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 354:FreeRTOS/portable/MemMang/heap_4.c **** {
 355:FreeRTOS/portable/MemMang/heap_4.c **** 	return xFreeBytesRemaining;
 356:FreeRTOS/portable/MemMang/heap_4.c **** }
 357:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 358:FreeRTOS/portable/MemMang/heap_4.c **** 
 359:FreeRTOS/portable/MemMang/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 360:FreeRTOS/portable/MemMang/heap_4.c **** {
 361:FreeRTOS/portable/MemMang/heap_4.c **** 	return xMinimumEverFreeBytesRemaining;
 362:FreeRTOS/portable/MemMang/heap_4.c **** }
 363:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 364:FreeRTOS/portable/MemMang/heap_4.c **** 
 365:FreeRTOS/portable/MemMang/heap_4.c **** void vPortInitialiseBlocks( void )
 366:FreeRTOS/portable/MemMang/heap_4.c **** {
 367:FreeRTOS/portable/MemMang/heap_4.c **** 	/* This just exists to keep the linker quiet. */
 368:FreeRTOS/portable/MemMang/heap_4.c **** }
 369:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 370:FreeRTOS/portable/MemMang/heap_4.c **** 
 371:FreeRTOS/portable/MemMang/heap_4.c **** static void prvHeapInit( void )
 372:FreeRTOS/portable/MemMang/heap_4.c **** {
  26              		.loc 1 372 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 8


  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 373:FreeRTOS/portable/MemMang/heap_4.c **** BlockLink_t *pxFirstFreeBlock;
  31              		.loc 1 373 1 view .LVU1
 374:FreeRTOS/portable/MemMang/heap_4.c **** uint8_t *pucAlignedHeap;
  32              		.loc 1 374 1 view .LVU2
 375:FreeRTOS/portable/MemMang/heap_4.c **** size_t uxAddress;
  33              		.loc 1 375 1 view .LVU3
 376:FreeRTOS/portable/MemMang/heap_4.c **** size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
  34              		.loc 1 376 1 view .LVU4
  35              	.LVL0:
 377:FreeRTOS/portable/MemMang/heap_4.c **** 
 378:FreeRTOS/portable/MemMang/heap_4.c **** 	/* Ensure the heap starts on a correctly aligned boundary. */
 379:FreeRTOS/portable/MemMang/heap_4.c **** 	uxAddress = ( size_t ) ucHeap;
  36              		.loc 1 379 2 view .LVU5
  37              		.loc 1 379 12 is_stmt 0 view .LVU6
  38 0000 124A     		ldr	r2, .L4
  39              	.LVL1:
 380:FreeRTOS/portable/MemMang/heap_4.c **** 
 381:FreeRTOS/portable/MemMang/heap_4.c **** 	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  40              		.loc 1 381 2 is_stmt 1 view .LVU7
  41              		.loc 1 381 4 is_stmt 0 view .LVU8
  42 0002 12F0070F 		tst	r2, #7
  43 0006 1ED0     		beq	.L3
 382:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 383:FreeRTOS/portable/MemMang/heap_4.c **** 		uxAddress += ( portBYTE_ALIGNMENT - 1 );
  44              		.loc 1 383 3 is_stmt 1 view .LVU9
  45              		.loc 1 383 13 is_stmt 0 view .LVU10
  46 0008 D11D     		adds	r1, r2, #7
  47              	.LVL2:
 384:FreeRTOS/portable/MemMang/heap_4.c **** 		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  48              		.loc 1 384 3 is_stmt 1 view .LVU11
  49              		.loc 1 384 13 is_stmt 0 view .LVU12
  50 000a 21F00701 		bic	r1, r1, #7
  51              	.LVL3:
 385:FreeRTOS/portable/MemMang/heap_4.c **** 		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
  52              		.loc 1 385 3 is_stmt 1 view .LVU13
  53              		.loc 1 385 18 is_stmt 0 view .LVU14
  54 000e C1F52053 		rsb	r3, r1, #10240
  55 0012 1344     		add	r3, r3, r2
  56              	.LVL4:
 384:FreeRTOS/portable/MemMang/heap_4.c **** 		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  57              		.loc 1 384 13 view .LVU15
  58 0014 0A46     		mov	r2, r1
  59              	.LVL5:
  60              	.L2:
 386:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 387:FreeRTOS/portable/MemMang/heap_4.c **** 
 388:FreeRTOS/portable/MemMang/heap_4.c **** 	pucAlignedHeap = ( uint8_t * ) uxAddress;
  61              		.loc 1 388 2 is_stmt 1 view .LVU16
 389:FreeRTOS/portable/MemMang/heap_4.c **** 
 390:FreeRTOS/portable/MemMang/heap_4.c **** 	/* xStart is used to hold a pointer to the first item in the list of free
 391:FreeRTOS/portable/MemMang/heap_4.c **** 	blocks.  The void cast is used to prevent compiler warnings. */
 392:FreeRTOS/portable/MemMang/heap_4.c **** 	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  62              		.loc 1 392 2 view .LVU17
  63              		.loc 1 392 25 is_stmt 0 view .LVU18
  64 0016 0E48     		ldr	r0, .L4+4
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 9


  65 0018 0260     		str	r2, [r0]
 393:FreeRTOS/portable/MemMang/heap_4.c **** 	xStart.xBlockSize = ( size_t ) 0;
  66              		.loc 1 393 2 is_stmt 1 view .LVU19
  67              		.loc 1 393 20 is_stmt 0 view .LVU20
  68 001a 0021     		movs	r1, #0
  69 001c 4160     		str	r1, [r0, #4]
 394:FreeRTOS/portable/MemMang/heap_4.c **** 
 395:FreeRTOS/portable/MemMang/heap_4.c **** 	/* pxEnd is used to mark the end of the list of free blocks and is inserted
 396:FreeRTOS/portable/MemMang/heap_4.c **** 	at the end of the heap space. */
 397:FreeRTOS/portable/MemMang/heap_4.c **** 	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
  70              		.loc 1 397 2 is_stmt 1 view .LVU21
  71              		.loc 1 397 12 is_stmt 0 view .LVU22
  72 001e 1344     		add	r3, r3, r2
  73              	.LVL6:
 398:FreeRTOS/portable/MemMang/heap_4.c **** 	uxAddress -= xHeapStructSize;
  74              		.loc 1 398 2 is_stmt 1 view .LVU23
  75              		.loc 1 398 12 is_stmt 0 view .LVU24
  76 0020 083B     		subs	r3, r3, #8
  77              	.LVL7:
 399:FreeRTOS/portable/MemMang/heap_4.c **** 	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  78              		.loc 1 399 2 is_stmt 1 view .LVU25
  79              		.loc 1 399 12 is_stmt 0 view .LVU26
  80 0022 23F00703 		bic	r3, r3, #7
  81              	.LVL8:
 400:FreeRTOS/portable/MemMang/heap_4.c **** 	pxEnd = ( void * ) uxAddress;
  82              		.loc 1 400 2 is_stmt 1 view .LVU27
  83              		.loc 1 400 8 is_stmt 0 view .LVU28
  84 0026 0B48     		ldr	r0, .L4+8
  85 0028 0360     		str	r3, [r0]
 401:FreeRTOS/portable/MemMang/heap_4.c **** 	pxEnd->xBlockSize = 0;
  86              		.loc 1 401 2 is_stmt 1 view .LVU29
  87              		.loc 1 401 20 is_stmt 0 view .LVU30
  88 002a 5960     		str	r1, [r3, #4]
 402:FreeRTOS/portable/MemMang/heap_4.c **** 	pxEnd->pxNextFreeBlock = NULL;
  89              		.loc 1 402 2 is_stmt 1 view .LVU31
  90              		.loc 1 402 25 is_stmt 0 view .LVU32
  91 002c 1960     		str	r1, [r3]
 403:FreeRTOS/portable/MemMang/heap_4.c **** 
 404:FreeRTOS/portable/MemMang/heap_4.c **** 	/* To start with there is a single free block that is sized to take up the
 405:FreeRTOS/portable/MemMang/heap_4.c **** 	entire heap space, minus the space taken by pxEnd. */
 406:FreeRTOS/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
  92              		.loc 1 406 2 is_stmt 1 view .LVU33
  93              	.LVL9:
 407:FreeRTOS/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  94              		.loc 1 407 2 view .LVU34
  95              		.loc 1 407 43 is_stmt 0 view .LVU35
  96 002e 991A     		subs	r1, r3, r2
  97              		.loc 1 407 31 view .LVU36
  98 0030 5160     		str	r1, [r2, #4]
 408:FreeRTOS/portable/MemMang/heap_4.c **** 	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  99              		.loc 1 408 2 is_stmt 1 view .LVU37
 100              		.loc 1 408 36 is_stmt 0 view .LVU38
 101 0032 1360     		str	r3, [r2]
 409:FreeRTOS/portable/MemMang/heap_4.c **** 
 410:FreeRTOS/portable/MemMang/heap_4.c **** 	/* Only one block exists - and it covers the entire usable heap space. */
 411:FreeRTOS/portable/MemMang/heap_4.c **** 	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 102              		.loc 1 411 2 is_stmt 1 view .LVU39
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 10


 103              		.loc 1 411 33 is_stmt 0 view .LVU40
 104 0034 084B     		ldr	r3, .L4+12
 105              	.LVL10:
 106              		.loc 1 411 33 view .LVU41
 107 0036 1960     		str	r1, [r3]
 412:FreeRTOS/portable/MemMang/heap_4.c **** 	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 108              		.loc 1 412 2 is_stmt 1 view .LVU42
 109              		.loc 1 412 22 is_stmt 0 view .LVU43
 110 0038 084B     		ldr	r3, .L4+16
 111 003a 1960     		str	r1, [r3]
 413:FreeRTOS/portable/MemMang/heap_4.c **** 
 414:FreeRTOS/portable/MemMang/heap_4.c **** 	/* Work out the position of the top bit in a size_t variable. */
 415:FreeRTOS/portable/MemMang/heap_4.c **** 	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 112              		.loc 1 415 2 is_stmt 1 view .LVU44
 113              		.loc 1 415 21 is_stmt 0 view .LVU45
 114 003c 084B     		ldr	r3, .L4+20
 115 003e 4FF00042 		mov	r2, #-2147483648
 116              	.LVL11:
 117              		.loc 1 415 21 view .LVU46
 118 0042 1A60     		str	r2, [r3]
 416:FreeRTOS/portable/MemMang/heap_4.c **** }
 119              		.loc 1 416 1 view .LVU47
 120 0044 7047     		bx	lr
 121              	.LVL12:
 122              	.L3:
 376:FreeRTOS/portable/MemMang/heap_4.c **** 
 123              		.loc 1 376 8 view .LVU48
 124 0046 4FF42053 		mov	r3, #10240
 125 004a E4E7     		b	.L2
 126              	.L5:
 127              		.align	2
 128              	.L4:
 129 004c 00000000 		.word	ucHeap
 130 0050 00000000 		.word	.LANCHOR0
 131 0054 00000000 		.word	.LANCHOR1
 132 0058 00000000 		.word	.LANCHOR2
 133 005c 00000000 		.word	.LANCHOR3
 134 0060 00000000 		.word	.LANCHOR4
 135              		.cfi_endproc
 136              	.LFE39:
 138              		.section	.text.prvInsertBlockIntoFreeList,"ax",%progbits
 139              		.align	1
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 144              	prvInsertBlockIntoFreeList:
 145              	.LVL13:
 146              	.LFB40:
 417:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 418:FreeRTOS/portable/MemMang/heap_4.c **** 
 419:FreeRTOS/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
 420:FreeRTOS/portable/MemMang/heap_4.c **** {
 147              		.loc 1 420 1 is_stmt 1 view -0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 11


 421:FreeRTOS/portable/MemMang/heap_4.c **** BlockLink_t *pxIterator;
 152              		.loc 1 421 1 view .LVU50
 422:FreeRTOS/portable/MemMang/heap_4.c **** uint8_t *puc;
 153              		.loc 1 422 1 view .LVU51
 423:FreeRTOS/portable/MemMang/heap_4.c **** 
 424:FreeRTOS/portable/MemMang/heap_4.c **** 	/* Iterate through the list until a block is found that has a higher address
 425:FreeRTOS/portable/MemMang/heap_4.c **** 	than the block being inserted. */
 426:FreeRTOS/portable/MemMang/heap_4.c **** 	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator-
 154              		.loc 1 426 2 view .LVU52
 155              		.loc 1 426 18 is_stmt 0 view .LVU53
 156 0000 154B     		ldr	r3, .L21
 157              	.LVL14:
 158              	.L7:
 159              		.loc 1 426 29 is_stmt 1 discriminator 1 view .LVU54
 160 0002 1A46     		mov	r2, r3
 161              		.loc 1 426 39 is_stmt 0 discriminator 1 view .LVU55
 162 0004 1B68     		ldr	r3, [r3]
 163              	.LVL15:
 164              		.loc 1 426 2 discriminator 1 view .LVU56
 165 0006 8342     		cmp	r3, r0
 166 0008 FBD3     		bcc	.L7
 427:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 428:FreeRTOS/portable/MemMang/heap_4.c **** 		/* Nothing to do here, just iterate to the right position. */
 429:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 430:FreeRTOS/portable/MemMang/heap_4.c **** 
 431:FreeRTOS/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted after
 432:FreeRTOS/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
 433:FreeRTOS/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxIterator;
 167              		.loc 1 433 2 is_stmt 1 view .LVU57
 168              	.LVL16:
 434:FreeRTOS/portable/MemMang/heap_4.c **** 	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 169              		.loc 1 434 2 view .LVU58
 170              		.loc 1 434 24 is_stmt 0 view .LVU59
 171 000a 5168     		ldr	r1, [r2, #4]
 172              		.loc 1 434 12 view .LVU60
 173 000c 02EB010C 		add	ip, r2, r1
 174              		.loc 1 434 4 view .LVU61
 175 0010 8445     		cmp	ip, r0
 176 0012 09D0     		beq	.L19
 177              	.L8:
 435:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 436:FreeRTOS/portable/MemMang/heap_4.c **** 		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 437:FreeRTOS/portable/MemMang/heap_4.c **** 		pxBlockToInsert = pxIterator;
 438:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 439:FreeRTOS/portable/MemMang/heap_4.c **** 	else
 440:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 441:FreeRTOS/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 178              		.loc 1 441 27 is_stmt 1 view .LVU62
 442:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 443:FreeRTOS/portable/MemMang/heap_4.c **** 
 444:FreeRTOS/portable/MemMang/heap_4.c **** 	/* Do the block being inserted, and the block it is being inserted before
 445:FreeRTOS/portable/MemMang/heap_4.c **** 	make a contiguous block of memory? */
 446:FreeRTOS/portable/MemMang/heap_4.c **** 	puc = ( uint8_t * ) pxBlockToInsert;
 179              		.loc 1 446 2 view .LVU63
 180              	.LVL17:
 447:FreeRTOS/portable/MemMang/heap_4.c **** 	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 181              		.loc 1 447 2 view .LVU64
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 12


 182              		.loc 1 447 29 is_stmt 0 view .LVU65
 183 0014 4168     		ldr	r1, [r0, #4]
 184              		.loc 1 447 12 view .LVU66
 185 0016 00EB010C 		add	ip, r0, r1
 186              		.loc 1 447 4 view .LVU67
 187 001a 6345     		cmp	r3, ip
 188 001c 09D0     		beq	.L20
 448:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 449:FreeRTOS/portable/MemMang/heap_4.c **** 		if( pxIterator->pxNextFreeBlock != pxEnd )
 450:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 451:FreeRTOS/portable/MemMang/heap_4.c **** 			/* Form one big block from the two blocks. */
 452:FreeRTOS/portable/MemMang/heap_4.c **** 			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 453:FreeRTOS/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 454:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 455:FreeRTOS/portable/MemMang/heap_4.c **** 		else
 456:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 457:FreeRTOS/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 458:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 459:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 460:FreeRTOS/portable/MemMang/heap_4.c **** 	else
 461:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 462:FreeRTOS/portable/MemMang/heap_4.c **** 		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 189              		.loc 1 462 3 is_stmt 1 view .LVU68
 190              		.loc 1 462 36 is_stmt 0 view .LVU69
 191 001e 0360     		str	r3, [r0]
 463:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 464:FreeRTOS/portable/MemMang/heap_4.c **** 
 465:FreeRTOS/portable/MemMang/heap_4.c **** 	/* If the block being inserted plugged a gab, so was merged with the block
 466:FreeRTOS/portable/MemMang/heap_4.c **** 	before and the block after, then it's pxNextFreeBlock pointer will have
 467:FreeRTOS/portable/MemMang/heap_4.c **** 	already been set, and should not be set here as that would make it point
 468:FreeRTOS/portable/MemMang/heap_4.c **** 	to itself. */
 469:FreeRTOS/portable/MemMang/heap_4.c **** 	if( pxIterator != pxBlockToInsert )
 192              		.loc 1 469 2 is_stmt 1 view .LVU70
 193              		.loc 1 469 4 is_stmt 0 view .LVU71
 194 0020 9042     		cmp	r0, r2
 195 0022 18D0     		beq	.L16
 470:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 471:FreeRTOS/portable/MemMang/heap_4.c **** 		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 196              		.loc 1 471 3 is_stmt 1 view .LVU72
 197              		.loc 1 471 31 is_stmt 0 view .LVU73
 198 0024 1060     		str	r0, [r2]
 472:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 473:FreeRTOS/portable/MemMang/heap_4.c **** 	else
 474:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 475:FreeRTOS/portable/MemMang/heap_4.c **** 		mtCOVERAGE_TEST_MARKER();
 199              		.loc 1 475 27 is_stmt 1 view .LVU74
 200 0026 7047     		bx	lr
 201              	.LVL18:
 202              	.L19:
 436:FreeRTOS/portable/MemMang/heap_4.c **** 		pxBlockToInsert = pxIterator;
 203              		.loc 1 436 3 view .LVU75
 436:FreeRTOS/portable/MemMang/heap_4.c **** 		pxBlockToInsert = pxIterator;
 204              		.loc 1 436 44 is_stmt 0 view .LVU76
 205 0028 4068     		ldr	r0, [r0, #4]
 206              	.LVL19:
 436:FreeRTOS/portable/MemMang/heap_4.c **** 		pxBlockToInsert = pxIterator;
 207              		.loc 1 436 26 view .LVU77
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 13


 208 002a 0144     		add	r1, r1, r0
 209 002c 5160     		str	r1, [r2, #4]
 437:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 210              		.loc 1 437 3 is_stmt 1 view .LVU78
 211              	.LVL20:
 437:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 212              		.loc 1 437 19 is_stmt 0 view .LVU79
 213 002e 1046     		mov	r0, r2
 214 0030 F0E7     		b	.L8
 215              	.LVL21:
 216              	.L20:
 420:FreeRTOS/portable/MemMang/heap_4.c **** BlockLink_t *pxIterator;
 217              		.loc 1 420 1 view .LVU80
 218 0032 10B4     		push	{r4}
 219              	.LCFI0:
 220              		.cfi_def_cfa_offset 4
 221              		.cfi_offset 4, -4
 449:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 222              		.loc 1 449 3 is_stmt 1 view .LVU81
 449:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 223              		.loc 1 449 35 is_stmt 0 view .LVU82
 224 0034 094C     		ldr	r4, .L21+4
 225 0036 2468     		ldr	r4, [r4]
 449:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 226              		.loc 1 449 5 view .LVU83
 227 0038 A342     		cmp	r3, r4
 228 003a 0AD0     		beq	.L10
 452:FreeRTOS/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 229              		.loc 1 452 4 is_stmt 1 view .LVU84
 452:FreeRTOS/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 230              		.loc 1 452 62 is_stmt 0 view .LVU85
 231 003c 5B68     		ldr	r3, [r3, #4]
 452:FreeRTOS/portable/MemMang/heap_4.c **** 			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 232              		.loc 1 452 32 view .LVU86
 233 003e 1944     		add	r1, r1, r3
 234 0040 4160     		str	r1, [r0, #4]
 453:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 235              		.loc 1 453 4 is_stmt 1 view .LVU87
 453:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 236              		.loc 1 453 49 is_stmt 0 view .LVU88
 237 0042 1368     		ldr	r3, [r2]
 453:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 238              		.loc 1 453 66 view .LVU89
 239 0044 1B68     		ldr	r3, [r3]
 453:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 240              		.loc 1 453 37 view .LVU90
 241 0046 0360     		str	r3, [r0]
 242              	.L11:
 469:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 243              		.loc 1 469 2 is_stmt 1 view .LVU91
 469:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 244              		.loc 1 469 4 is_stmt 0 view .LVU92
 245 0048 9042     		cmp	r0, r2
 246 004a 00D0     		beq	.L6
 471:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 247              		.loc 1 471 3 is_stmt 1 view .LVU93
 471:FreeRTOS/portable/MemMang/heap_4.c **** 	}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 14


 248              		.loc 1 471 31 is_stmt 0 view .LVU94
 249 004c 1060     		str	r0, [r2]
 250              		.loc 1 475 27 is_stmt 1 view .LVU95
 251              	.L6:
 476:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 477:FreeRTOS/portable/MemMang/heap_4.c **** }
 252              		.loc 1 477 1 is_stmt 0 view .LVU96
 253 004e 10BC     		pop	{r4}
 254              	.LCFI1:
 255              		.cfi_remember_state
 256              		.cfi_restore 4
 257              		.cfi_def_cfa_offset 0
 258 0050 7047     		bx	lr
 259              	.L10:
 260              	.LCFI2:
 261              		.cfi_restore_state
 457:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 262              		.loc 1 457 4 is_stmt 1 view .LVU97
 457:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 263              		.loc 1 457 37 is_stmt 0 view .LVU98
 264 0052 0460     		str	r4, [r0]
 265 0054 F8E7     		b	.L11
 266              	.L16:
 267              	.LCFI3:
 268              		.cfi_def_cfa_offset 0
 269              		.cfi_restore 4
 457:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 270              		.loc 1 457 37 view .LVU99
 271 0056 7047     		bx	lr
 272              	.L22:
 273              		.align	2
 274              	.L21:
 275 0058 00000000 		.word	.LANCHOR0
 276 005c 00000000 		.word	.LANCHOR1
 277              		.cfi_endproc
 278              	.LFE40:
 280              		.section	.text.pvPortMalloc,"ax",%progbits
 281              		.align	1
 282              		.global	pvPortMalloc
 283              		.syntax unified
 284              		.thumb
 285              		.thumb_func
 287              	pvPortMalloc:
 288              	.LVL22:
 289              	.LFB34:
 156:FreeRTOS/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 290              		.loc 1 156 1 is_stmt 1 view -0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 156:FreeRTOS/portable/MemMang/heap_4.c **** BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
 294              		.loc 1 156 1 is_stmt 0 view .LVU101
 295 0000 70B5     		push	{r4, r5, r6, lr}
 296              	.LCFI4:
 297              		.cfi_def_cfa_offset 16
 298              		.cfi_offset 4, -16
 299              		.cfi_offset 5, -12
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 15


 300              		.cfi_offset 6, -8
 301              		.cfi_offset 14, -4
 302 0002 0546     		mov	r5, r0
 157:FreeRTOS/portable/MemMang/heap_4.c **** void *pvReturn = NULL;
 303              		.loc 1 157 1 is_stmt 1 view .LVU102
 158:FreeRTOS/portable/MemMang/heap_4.c **** 
 304              		.loc 1 158 1 view .LVU103
 305              	.LVL23:
 160:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 306              		.loc 1 160 2 view .LVU104
 307 0004 FFF7FEFF 		bl	vTaskSuspendAll
 308              	.LVL24:
 164:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 309              		.loc 1 164 3 view .LVU105
 164:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 310              		.loc 1 164 13 is_stmt 0 view .LVU106
 311 0008 284B     		ldr	r3, .L39
 312 000a 1B68     		ldr	r3, [r3]
 164:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 313              		.loc 1 164 5 view .LVU107
 314 000c A3B1     		cbz	r3, .L37
 315              	.L24:
 170:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 316              		.loc 1 170 28 is_stmt 1 view .LVU108
 177:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 317              		.loc 1 177 3 view .LVU109
 177:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 318              		.loc 1 177 21 is_stmt 0 view .LVU110
 319 000e 284B     		ldr	r3, .L39+4
 320 0010 1B68     		ldr	r3, [r3]
 177:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 321              		.loc 1 177 5 view .LVU111
 322 0012 1D42     		tst	r5, r3
 323 0014 42D1     		bne	.L31
 181:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 324              		.loc 1 181 4 is_stmt 1 view .LVU112
 181:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 325              		.loc 1 181 6 is_stmt 0 view .LVU113
 326 0016 35B1     		cbz	r5, .L26
 183:FreeRTOS/portable/MemMang/heap_4.c **** 
 327              		.loc 1 183 5 is_stmt 1 view .LVU114
 183:FreeRTOS/portable/MemMang/heap_4.c **** 
 328              		.loc 1 183 17 is_stmt 0 view .LVU115
 329 0018 0835     		adds	r5, r5, #8
 330              	.LVL25:
 187:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 331              		.loc 1 187 5 is_stmt 1 view .LVU116
 187:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 332              		.loc 1 187 7 is_stmt 0 view .LVU117
 333 001a 15F0070F 		tst	r5, #7
 334 001e 02D0     		beq	.L26
 190:FreeRTOS/portable/MemMang/heap_4.c **** 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 335              		.loc 1 190 6 is_stmt 1 view .LVU118
 190:FreeRTOS/portable/MemMang/heap_4.c **** 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 336              		.loc 1 190 18 is_stmt 0 view .LVU119
 337 0020 25F00705 		bic	r5, r5, #7
 338              	.LVL26:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 16


 190:FreeRTOS/portable/MemMang/heap_4.c **** 					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 339              		.loc 1 190 18 view .LVU120
 340 0024 0835     		adds	r5, r5, #8
 341              	.LVL27:
 191:FreeRTOS/portable/MemMang/heap_4.c **** 				}
 342              		.loc 1 191 68 is_stmt 1 view .LVU121
 343              	.L26:
 200:FreeRTOS/portable/MemMang/heap_4.c **** 			}
 344              		.loc 1 200 29 view .LVU122
 203:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 345              		.loc 1 203 4 view .LVU123
 203:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 346              		.loc 1 203 6 is_stmt 0 view .LVU124
 347 0026 002D     		cmp	r5, #0
 348 0028 3AD0     		beq	.L32
 203:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 349              		.loc 1 203 45 discriminator 1 view .LVU125
 350 002a 224B     		ldr	r3, .L39+8
 351 002c 1B68     		ldr	r3, [r3]
 203:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 352              		.loc 1 203 28 discriminator 1 view .LVU126
 353 002e AB42     		cmp	r3, r5
 354 0030 38D3     		bcc	.L33
 207:FreeRTOS/portable/MemMang/heap_4.c **** 				pxBlock = xStart.pxNextFreeBlock;
 355              		.loc 1 207 5 is_stmt 1 view .LVU127
 356              	.LVL28:
 208:FreeRTOS/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 357              		.loc 1 208 5 view .LVU128
 208:FreeRTOS/portable/MemMang/heap_4.c **** 				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 358              		.loc 1 208 13 is_stmt 0 view .LVU129
 359 0032 214A     		ldr	r2, .L39+12
 360 0034 1468     		ldr	r4, [r2]
 361              	.LVL29:
 209:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 362              		.loc 1 209 5 is_stmt 1 view .LVU130
 209:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 363              		.loc 1 209 10 is_stmt 0 view .LVU131
 364 0036 04E0     		b	.L28
 365              	.LVL30:
 366              	.L37:
 166:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 367              		.loc 1 166 4 is_stmt 1 view .LVU132
 368 0038 FFF7FEFF 		bl	prvHeapInit
 369              	.LVL31:
 370 003c E7E7     		b	.L24
 371              	.LVL32:
 372              	.L34:
 211:FreeRTOS/portable/MemMang/heap_4.c **** 					pxBlock = pxBlock->pxNextFreeBlock;
 373              		.loc 1 211 22 is_stmt 0 view .LVU133
 374 003e 2246     		mov	r2, r4
 375              	.LVL33:
 212:FreeRTOS/portable/MemMang/heap_4.c **** 				}
 376              		.loc 1 212 14 view .LVU134
 377 0040 1C46     		mov	r4, r3
 378              	.LVL34:
 379              	.L28:
 209:FreeRTOS/portable/MemMang/heap_4.c **** 				{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 17


 380              		.loc 1 209 10 is_stmt 1 view .LVU135
 209:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 381              		.loc 1 209 21 is_stmt 0 view .LVU136
 382 0042 6368     		ldr	r3, [r4, #4]
 209:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 383              		.loc 1 209 10 view .LVU137
 384 0044 AB42     		cmp	r3, r5
 385 0046 02D2     		bcs	.L27
 209:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 386              		.loc 1 209 62 discriminator 1 view .LVU138
 387 0048 2368     		ldr	r3, [r4]
 209:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 388              		.loc 1 209 50 discriminator 1 view .LVU139
 389 004a 002B     		cmp	r3, #0
 390 004c F7D1     		bne	.L34
 391              	.L27:
 217:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 392              		.loc 1 217 5 is_stmt 1 view .LVU140
 217:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 393              		.loc 1 217 17 is_stmt 0 view .LVU141
 394 004e 174B     		ldr	r3, .L39
 395 0050 1B68     		ldr	r3, [r3]
 217:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 396              		.loc 1 217 7 view .LVU142
 397 0052 A342     		cmp	r3, r4
 398 0054 28D0     		beq	.L35
 221:FreeRTOS/portable/MemMang/heap_4.c **** 
 399              		.loc 1 221 6 is_stmt 1 view .LVU143
 221:FreeRTOS/portable/MemMang/heap_4.c **** 
 400              		.loc 1 221 61 is_stmt 0 view .LVU144
 401 0056 1668     		ldr	r6, [r2]
 221:FreeRTOS/portable/MemMang/heap_4.c **** 
 402              		.loc 1 221 15 view .LVU145
 403 0058 0836     		adds	r6, r6, #8
 404              	.LVL35:
 225:FreeRTOS/portable/MemMang/heap_4.c **** 
 405              		.loc 1 225 6 is_stmt 1 view .LVU146
 225:FreeRTOS/portable/MemMang/heap_4.c **** 
 406              		.loc 1 225 48 is_stmt 0 view .LVU147
 407 005a 2368     		ldr	r3, [r4]
 225:FreeRTOS/portable/MemMang/heap_4.c **** 
 408              		.loc 1 225 39 view .LVU148
 409 005c 1360     		str	r3, [r2]
 229:FreeRTOS/portable/MemMang/heap_4.c **** 					{
 410              		.loc 1 229 6 is_stmt 1 view .LVU149
 229:FreeRTOS/portable/MemMang/heap_4.c **** 					{
 411              		.loc 1 229 19 is_stmt 0 view .LVU150
 412 005e 6368     		ldr	r3, [r4, #4]
 229:FreeRTOS/portable/MemMang/heap_4.c **** 					{
 413              		.loc 1 229 32 view .LVU151
 414 0060 5B1B     		subs	r3, r3, r5
 229:FreeRTOS/portable/MemMang/heap_4.c **** 					{
 415              		.loc 1 229 8 view .LVU152
 416 0062 102B     		cmp	r3, #16
 417 0064 14D8     		bhi	.L38
 418              	.LVL36:
 419              	.L29:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 18


 248:FreeRTOS/portable/MemMang/heap_4.c **** 					}
 420              		.loc 1 248 31 is_stmt 1 view .LVU153
 251:FreeRTOS/portable/MemMang/heap_4.c **** 
 421              		.loc 1 251 6 view .LVU154
 251:FreeRTOS/portable/MemMang/heap_4.c **** 
 422              		.loc 1 251 36 is_stmt 0 view .LVU155
 423 0066 6268     		ldr	r2, [r4, #4]
 251:FreeRTOS/portable/MemMang/heap_4.c **** 
 424              		.loc 1 251 26 view .LVU156
 425 0068 1249     		ldr	r1, .L39+8
 426 006a 0B68     		ldr	r3, [r1]
 427 006c 9B1A     		subs	r3, r3, r2
 428 006e 0B60     		str	r3, [r1]
 253:FreeRTOS/portable/MemMang/heap_4.c **** 					{
 429              		.loc 1 253 6 is_stmt 1 view .LVU157
 253:FreeRTOS/portable/MemMang/heap_4.c **** 					{
 430              		.loc 1 253 30 is_stmt 0 view .LVU158
 431 0070 1249     		ldr	r1, .L39+16
 432 0072 0968     		ldr	r1, [r1]
 253:FreeRTOS/portable/MemMang/heap_4.c **** 					{
 433              		.loc 1 253 8 view .LVU159
 434 0074 8B42     		cmp	r3, r1
 435 0076 01D2     		bcs	.L30
 255:FreeRTOS/portable/MemMang/heap_4.c **** 					}
 436              		.loc 1 255 7 is_stmt 1 view .LVU160
 255:FreeRTOS/portable/MemMang/heap_4.c **** 					}
 437              		.loc 1 255 38 is_stmt 0 view .LVU161
 438 0078 1049     		ldr	r1, .L39+16
 439 007a 0B60     		str	r3, [r1]
 440              	.L30:
 259:FreeRTOS/portable/MemMang/heap_4.c **** 					}
 441              		.loc 1 259 31 is_stmt 1 view .LVU162
 264:FreeRTOS/portable/MemMang/heap_4.c **** 					pxBlock->pxNextFreeBlock = NULL;
 442              		.loc 1 264 6 view .LVU163
 264:FreeRTOS/portable/MemMang/heap_4.c **** 					pxBlock->pxNextFreeBlock = NULL;
 443              		.loc 1 264 26 is_stmt 0 view .LVU164
 444 007c 0C4B     		ldr	r3, .L39+4
 445 007e 1B68     		ldr	r3, [r3]
 446 0080 1343     		orrs	r3, r3, r2
 447 0082 6360     		str	r3, [r4, #4]
 265:FreeRTOS/portable/MemMang/heap_4.c **** 				}
 448              		.loc 1 265 6 is_stmt 1 view .LVU165
 265:FreeRTOS/portable/MemMang/heap_4.c **** 				}
 449              		.loc 1 265 31 is_stmt 0 view .LVU166
 450 0084 0023     		movs	r3, #0
 451 0086 2360     		str	r3, [r4]
 452              	.LVL37:
 453              	.L25:
 279:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 454              		.loc 1 279 28 is_stmt 1 view .LVU167
 282:FreeRTOS/portable/MemMang/heap_4.c **** 	}
 455              		.loc 1 282 39 view .LVU168
 284:FreeRTOS/portable/MemMang/heap_4.c **** 
 456              		.loc 1 284 2 view .LVU169
 284:FreeRTOS/portable/MemMang/heap_4.c **** 
 457              		.loc 1 284 11 is_stmt 0 view .LVU170
 458 0088 FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 19


 459              	.LVL38:
 300:FreeRTOS/portable/MemMang/heap_4.c **** 	return pvReturn;
 460              		.loc 1 300 87 is_stmt 1 view .LVU171
 301:FreeRTOS/portable/MemMang/heap_4.c **** }
 461              		.loc 1 301 2 view .LVU172
 302:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 462              		.loc 1 302 1 is_stmt 0 view .LVU173
 463 008c 3046     		mov	r0, r6
 464 008e 70BD     		pop	{r4, r5, r6, pc}
 465              	.LVL39:
 466              	.L38:
 235:FreeRTOS/portable/MemMang/heap_4.c **** 						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 467              		.loc 1 235 7 is_stmt 1 view .LVU174
 235:FreeRTOS/portable/MemMang/heap_4.c **** 						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 468              		.loc 1 235 22 is_stmt 0 view .LVU175
 469 0090 6019     		adds	r0, r4, r5
 470              	.LVL40:
 236:FreeRTOS/portable/MemMang/heap_4.c **** 
 471              		.loc 1 236 87 is_stmt 1 view .LVU176
 240:FreeRTOS/portable/MemMang/heap_4.c **** 						pxBlock->xBlockSize = xWantedSize;
 472              		.loc 1 240 7 view .LVU177
 240:FreeRTOS/portable/MemMang/heap_4.c **** 						pxBlock->xBlockSize = xWantedSize;
 473              		.loc 1 240 34 is_stmt 0 view .LVU178
 474 0092 4360     		str	r3, [r0, #4]
 241:FreeRTOS/portable/MemMang/heap_4.c **** 
 475              		.loc 1 241 7 is_stmt 1 view .LVU179
 241:FreeRTOS/portable/MemMang/heap_4.c **** 
 476              		.loc 1 241 27 is_stmt 0 view .LVU180
 477 0094 6560     		str	r5, [r4, #4]
 244:FreeRTOS/portable/MemMang/heap_4.c **** 					}
 478              		.loc 1 244 7 is_stmt 1 view .LVU181
 479 0096 FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 480              	.LVL41:
 244:FreeRTOS/portable/MemMang/heap_4.c **** 					}
 481              		.loc 1 244 7 is_stmt 0 view .LVU182
 482 009a E4E7     		b	.L29
 483              	.LVL42:
 484              	.L31:
 158:FreeRTOS/portable/MemMang/heap_4.c **** 
 485              		.loc 1 158 7 view .LVU183
 486 009c 0026     		movs	r6, #0
 487 009e F3E7     		b	.L25
 488              	.L32:
 158:FreeRTOS/portable/MemMang/heap_4.c **** 
 489              		.loc 1 158 7 view .LVU184
 490 00a0 0026     		movs	r6, #0
 491 00a2 F1E7     		b	.L25
 492              	.L33:
 493 00a4 0026     		movs	r6, #0
 494 00a6 EFE7     		b	.L25
 495              	.LVL43:
 496              	.L35:
 158:FreeRTOS/portable/MemMang/heap_4.c **** 
 497              		.loc 1 158 7 view .LVU185
 498 00a8 0026     		movs	r6, #0
 499 00aa EDE7     		b	.L25
 500              	.L40:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 20


 501              		.align	2
 502              	.L39:
 503 00ac 00000000 		.word	.LANCHOR1
 504 00b0 00000000 		.word	.LANCHOR4
 505 00b4 00000000 		.word	.LANCHOR3
 506 00b8 00000000 		.word	.LANCHOR0
 507 00bc 00000000 		.word	.LANCHOR2
 508              		.cfi_endproc
 509              	.LFE34:
 511              		.section	.text.vPortFree,"ax",%progbits
 512              		.align	1
 513              		.global	vPortFree
 514              		.syntax unified
 515              		.thumb
 516              		.thumb_func
 518              	vPortFree:
 519              	.LVL44:
 520              	.LFB35:
 306:FreeRTOS/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 521              		.loc 1 306 1 is_stmt 1 view -0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 307:FreeRTOS/portable/MemMang/heap_4.c **** BlockLink_t *pxLink;
 525              		.loc 1 307 1 view .LVU187
 308:FreeRTOS/portable/MemMang/heap_4.c **** 
 526              		.loc 1 308 1 view .LVU188
 310:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 527              		.loc 1 310 2 view .LVU189
 310:FreeRTOS/portable/MemMang/heap_4.c **** 	{
 528              		.loc 1 310 4 is_stmt 0 view .LVU190
 529 0000 F8B1     		cbz	r0, .L44
 306:FreeRTOS/portable/MemMang/heap_4.c **** uint8_t *puc = ( uint8_t * ) pv;
 530              		.loc 1 306 1 view .LVU191
 531 0002 38B5     		push	{r3, r4, r5, lr}
 532              	.LCFI5:
 533              		.cfi_def_cfa_offset 16
 534              		.cfi_offset 3, -16
 535              		.cfi_offset 4, -12
 536              		.cfi_offset 5, -8
 537              		.cfi_offset 14, -4
 538 0004 0446     		mov	r4, r0
 314:FreeRTOS/portable/MemMang/heap_4.c **** 
 539              		.loc 1 314 3 is_stmt 1 view .LVU192
 314:FreeRTOS/portable/MemMang/heap_4.c **** 
 540              		.loc 1 314 7 is_stmt 0 view .LVU193
 541 0006 A0F10805 		sub	r5, r0, #8
 542              	.LVL45:
 317:FreeRTOS/portable/MemMang/heap_4.c **** 
 543              		.loc 1 317 3 is_stmt 1 view .LVU194
 320:FreeRTOS/portable/MemMang/heap_4.c **** 		configASSERT( pxLink->pxNextFreeBlock == NULL );
 544              		.loc 1 320 67 view .LVU195
 321:FreeRTOS/portable/MemMang/heap_4.c **** 
 545              		.loc 1 321 50 view .LVU196
 323:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 546              		.loc 1 323 3 view .LVU197
 323:FreeRTOS/portable/MemMang/heap_4.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 21


 547              		.loc 1 323 15 is_stmt 0 view .LVU198
 548 000a 50F8043C 		ldr	r3, [r0, #-4]
 323:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 549              		.loc 1 323 28 view .LVU199
 550 000e 0D4A     		ldr	r2, .L48
 551 0010 1268     		ldr	r2, [r2]
 323:FreeRTOS/portable/MemMang/heap_4.c **** 		{
 552              		.loc 1 323 5 view .LVU200
 553 0012 1342     		tst	r3, r2
 554 0014 02D0     		beq	.L41
 325:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 555              		.loc 1 325 4 is_stmt 1 view .LVU201
 325:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 556              		.loc 1 325 14 is_stmt 0 view .LVU202
 557 0016 50F8081C 		ldr	r1, [r0, #-8]
 325:FreeRTOS/portable/MemMang/heap_4.c **** 			{
 558              		.loc 1 325 6 view .LVU203
 559 001a 01B1     		cbz	r1, .L47
 560              	.LVL46:
 561              	.L41:
 350:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 562              		.loc 1 350 1 view .LVU204
 563 001c 38BD     		pop	{r3, r4, r5, pc}
 564              	.LVL47:
 565              	.L47:
 329:FreeRTOS/portable/MemMang/heap_4.c **** 
 566              		.loc 1 329 5 is_stmt 1 view .LVU205
 329:FreeRTOS/portable/MemMang/heap_4.c **** 
 567              		.loc 1 329 24 is_stmt 0 view .LVU206
 568 001e 23EA0203 		bic	r3, r3, r2
 569 0022 40F8043C 		str	r3, [r0, #-4]
 331:FreeRTOS/portable/MemMang/heap_4.c **** 				{
 570              		.loc 1 331 5 is_stmt 1 view .LVU207
 571 0026 FFF7FEFF 		bl	vTaskSuspendAll
 572              	.LVL48:
 334:FreeRTOS/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 573              		.loc 1 334 6 view .LVU208
 334:FreeRTOS/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 574              		.loc 1 334 35 is_stmt 0 view .LVU209
 575 002a 54F8041C 		ldr	r1, [r4, #-4]
 334:FreeRTOS/portable/MemMang/heap_4.c **** 					traceFREE( pv, pxLink->xBlockSize );
 576              		.loc 1 334 26 view .LVU210
 577 002e 064A     		ldr	r2, .L48+4
 578 0030 1368     		ldr	r3, [r2]
 579 0032 0B44     		add	r3, r3, r1
 580 0034 1360     		str	r3, [r2]
 335:FreeRTOS/portable/MemMang/heap_4.c **** 					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 581              		.loc 1 335 41 is_stmt 1 view .LVU211
 336:FreeRTOS/portable/MemMang/heap_4.c **** 				}
 582              		.loc 1 336 6 view .LVU212
 583 0036 2846     		mov	r0, r5
 584 0038 FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 585              	.LVL49:
 338:FreeRTOS/portable/MemMang/heap_4.c **** 			}
 586              		.loc 1 338 5 view .LVU213
 338:FreeRTOS/portable/MemMang/heap_4.c **** 			}
 587              		.loc 1 338 14 is_stmt 0 view .LVU214
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 22


 588 003c FFF7FEFF 		bl	xTaskResumeAll
 589              	.LVL50:
 347:FreeRTOS/portable/MemMang/heap_4.c **** 		}
 590              		.loc 1 347 28 is_stmt 1 view .LVU215
 350:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 591              		.loc 1 350 1 is_stmt 0 view .LVU216
 592 0040 ECE7     		b	.L41
 593              	.LVL51:
 594              	.L44:
 595              	.LCFI6:
 596              		.cfi_def_cfa_offset 0
 597              		.cfi_restore 3
 598              		.cfi_restore 4
 599              		.cfi_restore 5
 600              		.cfi_restore 14
 350:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 601              		.loc 1 350 1 view .LVU217
 602 0042 7047     		bx	lr
 603              	.L49:
 604              		.align	2
 605              	.L48:
 606 0044 00000000 		.word	.LANCHOR4
 607 0048 00000000 		.word	.LANCHOR3
 608              		.cfi_endproc
 609              	.LFE35:
 611              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 612              		.align	1
 613              		.global	xPortGetFreeHeapSize
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 618              	xPortGetFreeHeapSize:
 619              	.LFB36:
 354:FreeRTOS/portable/MemMang/heap_4.c **** 	return xFreeBytesRemaining;
 620              		.loc 1 354 1 is_stmt 1 view -0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              		@ link register save eliminated.
 355:FreeRTOS/portable/MemMang/heap_4.c **** }
 625              		.loc 1 355 2 view .LVU219
 356:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 626              		.loc 1 356 1 is_stmt 0 view .LVU220
 627 0000 014B     		ldr	r3, .L51
 628 0002 1868     		ldr	r0, [r3]
 629 0004 7047     		bx	lr
 630              	.L52:
 631 0006 00BF     		.align	2
 632              	.L51:
 633 0008 00000000 		.word	.LANCHOR3
 634              		.cfi_endproc
 635              	.LFE36:
 637              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 638              		.align	1
 639              		.global	xPortGetMinimumEverFreeHeapSize
 640              		.syntax unified
 641              		.thumb
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 23


 642              		.thumb_func
 644              	xPortGetMinimumEverFreeHeapSize:
 645              	.LFB37:
 360:FreeRTOS/portable/MemMang/heap_4.c **** 	return xMinimumEverFreeBytesRemaining;
 646              		.loc 1 360 1 is_stmt 1 view -0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 0
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650              		@ link register save eliminated.
 361:FreeRTOS/portable/MemMang/heap_4.c **** }
 651              		.loc 1 361 2 view .LVU222
 362:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 652              		.loc 1 362 1 is_stmt 0 view .LVU223
 653 0000 014B     		ldr	r3, .L54
 654 0002 1868     		ldr	r0, [r3]
 655 0004 7047     		bx	lr
 656              	.L55:
 657 0006 00BF     		.align	2
 658              	.L54:
 659 0008 00000000 		.word	.LANCHOR2
 660              		.cfi_endproc
 661              	.LFE37:
 663              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
 664              		.align	1
 665              		.global	vPortInitialiseBlocks
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 670              	vPortInitialiseBlocks:
 671              	.LFB38:
 366:FreeRTOS/portable/MemMang/heap_4.c **** 	/* This just exists to keep the linker quiet. */
 672              		.loc 1 366 1 is_stmt 1 view -0
 673              		.cfi_startproc
 674              		@ args = 0, pretend = 0, frame = 0
 675              		@ frame_needed = 0, uses_anonymous_args = 0
 676              		@ link register save eliminated.
 368:FreeRTOS/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 677              		.loc 1 368 1 view .LVU225
 678 0000 7047     		bx	lr
 679              		.cfi_endproc
 680              	.LFE38:
 682              		.section	.bss.pxEnd,"aw",%nobits
 683              		.align	2
 684              		.set	.LANCHOR1,. + 0
 687              	pxEnd:
 688 0000 00000000 		.space	4
 689              		.section	.bss.ucHeap,"aw",%nobits
 690              		.align	2
 693              	ucHeap:
 694 0000 00000000 		.space	10240
 694      00000000 
 694      00000000 
 694      00000000 
 694      00000000 
 695              		.section	.bss.xBlockAllocatedBit,"aw",%nobits
 696              		.align	2
 697              		.set	.LANCHOR4,. + 0
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 24


 700              	xBlockAllocatedBit:
 701 0000 00000000 		.space	4
 702              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
 703              		.align	2
 704              		.set	.LANCHOR3,. + 0
 707              	xFreeBytesRemaining:
 708 0000 00000000 		.space	4
 709              		.section	.bss.xMinimumEverFreeBytesRemaining,"aw",%nobits
 710              		.align	2
 711              		.set	.LANCHOR2,. + 0
 714              	xMinimumEverFreeBytesRemaining:
 715 0000 00000000 		.space	4
 716              		.section	.bss.xStart,"aw",%nobits
 717              		.align	2
 718              		.set	.LANCHOR0,. + 0
 721              	xStart:
 722 0000 00000000 		.space	8
 722      00000000 
 723              		.text
 724              	.Letext0:
 725              		.file 2 "e:\\programdata\\gnu arm embedded toolchain\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\st
 726              		.file 3 "e:\\programdata\\gnu arm embedded toolchain\\arm-none-eabi\\include\\machine\\_default_ty
 727              		.file 4 "e:\\programdata\\gnu arm embedded toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 728              		.file 5 "FreeRTOS/include/task.h"
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s 			page 25


DEFINED SYMBOLS
                            *ABS*:00000000 heap_4.c
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:18     .text.prvHeapInit:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:23     .text.prvHeapInit:00000000 prvHeapInit
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:129    .text.prvHeapInit:0000004c $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:693    .bss.ucHeap:00000000 ucHeap
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:139    .text.prvInsertBlockIntoFreeList:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:144    .text.prvInsertBlockIntoFreeList:00000000 prvInsertBlockIntoFreeList
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:275    .text.prvInsertBlockIntoFreeList:00000058 $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:281    .text.pvPortMalloc:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:287    .text.pvPortMalloc:00000000 pvPortMalloc
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:503    .text.pvPortMalloc:000000ac $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:512    .text.vPortFree:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:518    .text.vPortFree:00000000 vPortFree
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:606    .text.vPortFree:00000044 $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:612    .text.xPortGetFreeHeapSize:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:618    .text.xPortGetFreeHeapSize:00000000 xPortGetFreeHeapSize
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:633    .text.xPortGetFreeHeapSize:00000008 $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:638    .text.xPortGetMinimumEverFreeHeapSize:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:644    .text.xPortGetMinimumEverFreeHeapSize:00000000 xPortGetMinimumEverFreeHeapSize
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:659    .text.xPortGetMinimumEverFreeHeapSize:00000008 $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:664    .text.vPortInitialiseBlocks:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:670    .text.vPortInitialiseBlocks:00000000 vPortInitialiseBlocks
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:683    .bss.pxEnd:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:687    .bss.pxEnd:00000000 pxEnd
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:690    .bss.ucHeap:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:696    .bss.xBlockAllocatedBit:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:700    .bss.xBlockAllocatedBit:00000000 xBlockAllocatedBit
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:703    .bss.xFreeBytesRemaining:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:707    .bss.xFreeBytesRemaining:00000000 xFreeBytesRemaining
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:710    .bss.xMinimumEverFreeBytesRemaining:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:714    .bss.xMinimumEverFreeBytesRemaining:00000000 xMinimumEverFreeBytesRemaining
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:717    .bss.xStart:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccVmFk7F.s:721    .bss.xStart:00000000 xStart

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
