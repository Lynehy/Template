ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	prvTaskIsTaskSuspended:
  24              	.LVL0:
  25              	.LFB44:
  26              		.file 1 "FreeRTOS/tasks.c"
   1:FreeRTOS/tasks.c **** /*
   2:FreeRTOS/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:FreeRTOS/tasks.c ****     All rights reserved
   4:FreeRTOS/tasks.c **** 
   5:FreeRTOS/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/tasks.c **** 
   7:FreeRTOS/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/tasks.c **** 
   9:FreeRTOS/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/tasks.c **** 
  13:FreeRTOS/tasks.c ****     ***************************************************************************
  14:FreeRTOS/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/tasks.c ****     ***************************************************************************
  19:FreeRTOS/tasks.c **** 
  20:FreeRTOS/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/tasks.c **** 
  25:FreeRTOS/tasks.c ****     ***************************************************************************
  26:FreeRTOS/tasks.c ****      *                                                                       *
  27:FreeRTOS/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/tasks.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/tasks.c ****      *                                                                       *
  32:FreeRTOS/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 2


  33:FreeRTOS/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/tasks.c ****      *                                                                       *
  37:FreeRTOS/tasks.c ****     ***************************************************************************
  38:FreeRTOS/tasks.c **** 
  39:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/tasks.c ****     defined configASSERT()?
  42:FreeRTOS/tasks.c **** 
  43:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/tasks.c ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/tasks.c ****     participating in the support forum.
  46:FreeRTOS/tasks.c **** 
  47:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/tasks.c **** 
  52:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/tasks.c **** 
  56:FreeRTOS/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/tasks.c **** 
  59:FreeRTOS/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/tasks.c **** 
  63:FreeRTOS/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/tasks.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/tasks.c **** 
  67:FreeRTOS/tasks.c ****     1 tab == 4 spaces!
  68:FreeRTOS/tasks.c **** */
  69:FreeRTOS/tasks.c **** 
  70:FreeRTOS/tasks.c **** /* Standard includes. */
  71:FreeRTOS/tasks.c **** #include <stdlib.h>
  72:FreeRTOS/tasks.c **** #include <string.h>
  73:FreeRTOS/tasks.c **** 
  74:FreeRTOS/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:FreeRTOS/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:FreeRTOS/tasks.c **** task.h is included from an application file. */
  77:FreeRTOS/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:FreeRTOS/tasks.c **** 
  79:FreeRTOS/tasks.c **** /* FreeRTOS includes. */
  80:FreeRTOS/tasks.c **** #include "FreeRTOS.h"
  81:FreeRTOS/tasks.c **** #include "task.h"
  82:FreeRTOS/tasks.c **** #include "timers.h"
  83:FreeRTOS/tasks.c **** #include "StackMacros.h"
  84:FreeRTOS/tasks.c **** 
  85:FreeRTOS/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:FreeRTOS/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:FreeRTOS/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:FreeRTOS/tasks.c **** privileged Vs unprivileged linkage and placement. */
  89:FreeRTOS/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 3


  90:FreeRTOS/tasks.c **** 
  91:FreeRTOS/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:FreeRTOS/tasks.c **** functions but without including stdio.h here. */
  93:FreeRTOS/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:FreeRTOS/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:FreeRTOS/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:FreeRTOS/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:FreeRTOS/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:FreeRTOS/tasks.c **** 	#include <stdio.h>
  99:FreeRTOS/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:FreeRTOS/tasks.c **** 
 101:FreeRTOS/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:FreeRTOS/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:FreeRTOS/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:FreeRTOS/tasks.c **** #else
 106:FreeRTOS/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:FreeRTOS/tasks.c **** #endif
 108:FreeRTOS/tasks.c **** 
 109:FreeRTOS/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:FreeRTOS/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:FreeRTOS/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:FreeRTOS/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:FreeRTOS/tasks.c **** 
 114:FreeRTOS/tasks.c **** /*
 115:FreeRTOS/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:FreeRTOS/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:FreeRTOS/tasks.c ****  */
 118:FreeRTOS/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:FreeRTOS/tasks.c **** 
 120:FreeRTOS/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:FreeRTOS/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:FreeRTOS/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:FreeRTOS/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:FreeRTOS/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:FreeRTOS/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:FreeRTOS/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:FreeRTOS/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:FreeRTOS/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:FreeRTOS/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:FreeRTOS/tasks.c **** made to free the RAM that was allocated statically.
 131:FreeRTOS/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:FreeRTOS/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:FreeRTOS/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:FreeRTOS/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:FreeRTOS/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:FreeRTOS/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:FreeRTOS/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:FreeRTOS/tasks.c **** 
 140:FreeRTOS/tasks.c **** /*
 141:FreeRTOS/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:FreeRTOS/tasks.c ****  */
 143:FreeRTOS/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:FreeRTOS/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:FreeRTOS/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 146:FreeRTOS/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 4


 147:FreeRTOS/tasks.c **** 
 148:FreeRTOS/tasks.c **** /*
 149:FreeRTOS/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:FreeRTOS/tasks.c ****  * global, rather than file scope.
 151:FreeRTOS/tasks.c ****  */
 152:FreeRTOS/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:FreeRTOS/tasks.c **** 	#define static
 154:FreeRTOS/tasks.c **** #endif
 155:FreeRTOS/tasks.c **** 
 156:FreeRTOS/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:FreeRTOS/tasks.c **** 
 158:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:FreeRTOS/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:FreeRTOS/tasks.c **** 	microcontroller architecture. */
 161:FreeRTOS/tasks.c **** 
 162:FreeRTOS/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:FreeRTOS/tasks.c **** 	state task. */
 164:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:FreeRTOS/tasks.c **** 	{																									\
 166:FreeRTOS/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:FreeRTOS/tasks.c **** 		{																								\
 168:FreeRTOS/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:FreeRTOS/tasks.c **** 		}																								\
 170:FreeRTOS/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:FreeRTOS/tasks.c **** 
 172:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 173:FreeRTOS/tasks.c **** 
 174:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:FreeRTOS/tasks.c **** 	{																									\
 176:FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:FreeRTOS/tasks.c **** 																										\
 178:FreeRTOS/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:FreeRTOS/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:FreeRTOS/tasks.c **** 		{																								\
 181:FreeRTOS/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:FreeRTOS/tasks.c **** 			--uxTopPriority;																			\
 183:FreeRTOS/tasks.c **** 		}																								\
 184:FreeRTOS/tasks.c **** 																										\
 185:FreeRTOS/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:FreeRTOS/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:FreeRTOS/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:FreeRTOS/tasks.c **** 
 191:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 192:FreeRTOS/tasks.c **** 
 193:FreeRTOS/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:FreeRTOS/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:FreeRTOS/tasks.c **** 	being used. */
 196:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:FreeRTOS/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:FreeRTOS/tasks.c **** 
 199:FreeRTOS/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:FreeRTOS/tasks.c **** 
 201:FreeRTOS/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:FreeRTOS/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 203:FreeRTOS/tasks.c **** 	architecture being used. */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 5


 204:FreeRTOS/tasks.c **** 
 205:FreeRTOS/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:FreeRTOS/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:FreeRTOS/tasks.c **** 
 208:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 209:FreeRTOS/tasks.c **** 
 210:FreeRTOS/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:FreeRTOS/tasks.c **** 	{																								\
 212:FreeRTOS/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:FreeRTOS/tasks.c **** 																									\
 214:FreeRTOS/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:FreeRTOS/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:FreeRTOS/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:FreeRTOS/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:FreeRTOS/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:FreeRTOS/tasks.c **** 
 220:FreeRTOS/tasks.c **** 	/*-----------------------------------------------------------*/
 221:FreeRTOS/tasks.c **** 
 222:FreeRTOS/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:FreeRTOS/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:FreeRTOS/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:FreeRTOS/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:FreeRTOS/tasks.c **** 	{																									\
 227:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:FreeRTOS/tasks.c **** 		{																								\
 229:FreeRTOS/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:FreeRTOS/tasks.c **** 		}																								\
 231:FreeRTOS/tasks.c **** 	}
 232:FreeRTOS/tasks.c **** 
 233:FreeRTOS/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:FreeRTOS/tasks.c **** 
 235:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 236:FreeRTOS/tasks.c **** 
 237:FreeRTOS/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:FreeRTOS/tasks.c **** count overflows. */
 239:FreeRTOS/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:FreeRTOS/tasks.c **** {																									\
 241:FreeRTOS/tasks.c **** 	List_t *pxTemp;																					\
 242:FreeRTOS/tasks.c **** 																									\
 243:FreeRTOS/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:FreeRTOS/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:FreeRTOS/tasks.c **** 																									\
 246:FreeRTOS/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:FreeRTOS/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:FreeRTOS/tasks.c **** 	xNumOfOverflows++;																				\
 250:FreeRTOS/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:FreeRTOS/tasks.c **** }
 252:FreeRTOS/tasks.c **** 
 253:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 254:FreeRTOS/tasks.c **** 
 255:FreeRTOS/tasks.c **** /*
 256:FreeRTOS/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:FreeRTOS/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:FreeRTOS/tasks.c ****  */
 259:FreeRTOS/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 260:FreeRTOS/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 6


 261:FreeRTOS/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:FreeRTOS/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:FreeRTOS/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 265:FreeRTOS/tasks.c **** 
 266:FreeRTOS/tasks.c **** /*
 267:FreeRTOS/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:FreeRTOS/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:FreeRTOS/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:FreeRTOS/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:FreeRTOS/tasks.c ****  */
 272:FreeRTOS/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:FreeRTOS/tasks.c **** 
 274:FreeRTOS/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:FreeRTOS/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:FreeRTOS/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:FreeRTOS/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:FreeRTOS/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:FreeRTOS/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:FreeRTOS/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:FreeRTOS/tasks.c **** to its original value when it is released. */
 282:FreeRTOS/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:FreeRTOS/tasks.c **** #else
 285:FreeRTOS/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:FreeRTOS/tasks.c **** #endif
 287:FreeRTOS/tasks.c **** 
 288:FreeRTOS/tasks.c **** /*
 289:FreeRTOS/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:FreeRTOS/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:FreeRTOS/tasks.c ****  * (the task's run time environment, including register values)
 292:FreeRTOS/tasks.c ****  */
 293:FreeRTOS/tasks.c **** typedef struct tskTaskControlBlock
 294:FreeRTOS/tasks.c **** {
 295:FreeRTOS/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:FreeRTOS/tasks.c **** 
 297:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:FreeRTOS/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:FreeRTOS/tasks.c **** 	#endif
 300:FreeRTOS/tasks.c **** 
 301:FreeRTOS/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:FreeRTOS/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:FreeRTOS/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:FreeRTOS/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:FreeRTOS/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:FreeRTOS/tasks.c **** 
 307:FreeRTOS/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:FreeRTOS/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:FreeRTOS/tasks.c **** 	#endif
 310:FreeRTOS/tasks.c **** 
 311:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:FreeRTOS/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:FreeRTOS/tasks.c **** 	#endif
 314:FreeRTOS/tasks.c **** 
 315:FreeRTOS/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:FreeRTOS/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 317:FreeRTOS/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 7


 318:FreeRTOS/tasks.c **** 	#endif
 319:FreeRTOS/tasks.c **** 
 320:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:FreeRTOS/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:FreeRTOS/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:FreeRTOS/tasks.c **** 	#endif
 324:FreeRTOS/tasks.c **** 
 325:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:FreeRTOS/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:FreeRTOS/tasks.c **** 	#endif
 328:FreeRTOS/tasks.c **** 
 329:FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:FreeRTOS/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:FreeRTOS/tasks.c **** 	#endif
 332:FreeRTOS/tasks.c **** 
 333:FreeRTOS/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:FreeRTOS/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:FreeRTOS/tasks.c **** 	#endif
 336:FreeRTOS/tasks.c **** 
 337:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:FreeRTOS/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:FreeRTOS/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:FreeRTOS/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:FreeRTOS/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:FreeRTOS/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:FreeRTOS/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:FreeRTOS/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:FreeRTOS/tasks.c **** 		struct	_reent xNewLib_reent;
 346:FreeRTOS/tasks.c **** 	#endif
 347:FreeRTOS/tasks.c **** 
 348:FreeRTOS/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:FreeRTOS/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:FreeRTOS/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:FreeRTOS/tasks.c **** 	#endif
 352:FreeRTOS/tasks.c **** 
 353:FreeRTOS/tasks.c **** 	/* See the comments above the definition of
 354:FreeRTOS/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:FreeRTOS/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:FreeRTOS/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:FreeRTOS/tasks.c **** 	#endif
 358:FreeRTOS/tasks.c **** 
 359:FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:FreeRTOS/tasks.c **** 		uint8_t ucDelayAborted;
 361:FreeRTOS/tasks.c **** 	#endif
 362:FreeRTOS/tasks.c **** 
 363:FreeRTOS/tasks.c **** } tskTCB;
 364:FreeRTOS/tasks.c **** 
 365:FreeRTOS/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:FreeRTOS/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:FreeRTOS/tasks.c **** typedef tskTCB TCB_t;
 368:FreeRTOS/tasks.c **** 
 369:FreeRTOS/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:FreeRTOS/tasks.c **** static variables must be declared volatile. */
 371:FreeRTOS/tasks.c **** 
 372:FreeRTOS/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:FreeRTOS/tasks.c **** 
 374:FreeRTOS/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 8


 375:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:FreeRTOS/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:FreeRTOS/tasks.c **** 
 382:FreeRTOS/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:FreeRTOS/tasks.c **** 
 384:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:FreeRTOS/tasks.c **** 
 387:FreeRTOS/tasks.c **** #endif
 388:FreeRTOS/tasks.c **** 
 389:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:FreeRTOS/tasks.c **** 
 391:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:FreeRTOS/tasks.c **** 
 393:FreeRTOS/tasks.c **** #endif
 394:FreeRTOS/tasks.c **** 
 395:FreeRTOS/tasks.c **** /* Other file private variables. --------------------------------*/
 396:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:FreeRTOS/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:FreeRTOS/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:FreeRTOS/tasks.c **** 
 407:FreeRTOS/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:FreeRTOS/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:FreeRTOS/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:FreeRTOS/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:FreeRTOS/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:FreeRTOS/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:FreeRTOS/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:FreeRTOS/tasks.c **** accessed from a critical section. */
 415:FreeRTOS/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:FreeRTOS/tasks.c **** 
 417:FreeRTOS/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:FreeRTOS/tasks.c **** 
 419:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:FreeRTOS/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:FreeRTOS/tasks.c **** 
 422:FreeRTOS/tasks.c **** #endif
 423:FreeRTOS/tasks.c **** 
 424:FreeRTOS/tasks.c **** /*lint +e956 */
 425:FreeRTOS/tasks.c **** 
 426:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 427:FreeRTOS/tasks.c **** 
 428:FreeRTOS/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:FreeRTOS/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:FreeRTOS/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 431:FreeRTOS/tasks.c **** #endif
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 9


 432:FreeRTOS/tasks.c **** 
 433:FreeRTOS/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:FreeRTOS/tasks.c **** 	extern void vApplicationTickHook( void );
 435:FreeRTOS/tasks.c **** #endif
 436:FreeRTOS/tasks.c **** 
 437:FreeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:FreeRTOS/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:FreeRTOS/tasks.c **** #endif
 440:FreeRTOS/tasks.c **** 
 441:FreeRTOS/tasks.c **** /* File private functions. --------------------------------*/
 442:FreeRTOS/tasks.c **** 
 443:FreeRTOS/tasks.c **** /**
 444:FreeRTOS/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:FreeRTOS/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:FreeRTOS/tasks.c ****  * is in any other state.
 447:FreeRTOS/tasks.c ****  */
 448:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:FreeRTOS/tasks.c **** 
 452:FreeRTOS/tasks.c **** /*
 453:FreeRTOS/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:FreeRTOS/tasks.c ****  * automatically upon the creation of the first task.
 455:FreeRTOS/tasks.c ****  */
 456:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:FreeRTOS/tasks.c **** 
 458:FreeRTOS/tasks.c **** /*
 459:FreeRTOS/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:FreeRTOS/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:FreeRTOS/tasks.c ****  * creation of the first user task.
 462:FreeRTOS/tasks.c ****  *
 463:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:FreeRTOS/tasks.c ****  *
 466:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:FreeRTOS/tasks.c ****  *
 468:FreeRTOS/tasks.c ****  */
 469:FreeRTOS/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:FreeRTOS/tasks.c **** 
 471:FreeRTOS/tasks.c **** /*
 472:FreeRTOS/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:FreeRTOS/tasks.c ****  * including the stack pointed to by the TCB.
 474:FreeRTOS/tasks.c ****  *
 475:FreeRTOS/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:FreeRTOS/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:FreeRTOS/tasks.c ****  */
 478:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:FreeRTOS/tasks.c **** 
 480:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:FreeRTOS/tasks.c **** 
 482:FreeRTOS/tasks.c **** #endif
 483:FreeRTOS/tasks.c **** 
 484:FreeRTOS/tasks.c **** /*
 485:FreeRTOS/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:FreeRTOS/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:FreeRTOS/tasks.c ****  * and its TCB deleted.
 488:FreeRTOS/tasks.c ****  */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 10


 489:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:FreeRTOS/tasks.c **** 
 491:FreeRTOS/tasks.c **** /*
 492:FreeRTOS/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:FreeRTOS/tasks.c ****  * either the current or the overflow delayed task list.
 494:FreeRTOS/tasks.c ****  */
 495:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:FreeRTOS/tasks.c **** 
 497:FreeRTOS/tasks.c **** /*
 498:FreeRTOS/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:FreeRTOS/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:FreeRTOS/tasks.c ****  * a suspended list, etc.).
 501:FreeRTOS/tasks.c ****  *
 502:FreeRTOS/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:FreeRTOS/tasks.c ****  * NORMAL APPLICATION CODE.
 504:FreeRTOS/tasks.c ****  */
 505:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:FreeRTOS/tasks.c **** 
 507:FreeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:FreeRTOS/tasks.c **** 
 509:FreeRTOS/tasks.c **** #endif
 510:FreeRTOS/tasks.c **** 
 511:FreeRTOS/tasks.c **** /*
 512:FreeRTOS/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:FreeRTOS/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:FreeRTOS/tasks.c ****  */
 515:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:FreeRTOS/tasks.c **** 
 517:FreeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:FreeRTOS/tasks.c **** 
 519:FreeRTOS/tasks.c **** #endif
 520:FreeRTOS/tasks.c **** 
 521:FreeRTOS/tasks.c **** /*
 522:FreeRTOS/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:FreeRTOS/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:FreeRTOS/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:FreeRTOS/tasks.c ****  */
 526:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:FreeRTOS/tasks.c **** 
 528:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:FreeRTOS/tasks.c **** 
 530:FreeRTOS/tasks.c **** #endif
 531:FreeRTOS/tasks.c **** 
 532:FreeRTOS/tasks.c **** /*
 533:FreeRTOS/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:FreeRTOS/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:FreeRTOS/tasks.c ****  *
 536:FreeRTOS/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:FreeRTOS/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:FreeRTOS/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:FreeRTOS/tasks.c ****  * set to a value other than 1.
 540:FreeRTOS/tasks.c ****  */
 541:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:FreeRTOS/tasks.c **** 
 543:FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:FreeRTOS/tasks.c **** 
 545:FreeRTOS/tasks.c **** #endif
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 11


 546:FreeRTOS/tasks.c **** 
 547:FreeRTOS/tasks.c **** /*
 548:FreeRTOS/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:FreeRTOS/tasks.c ****  * will exit the Blocked state.
 550:FreeRTOS/tasks.c ****  */
 551:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:FreeRTOS/tasks.c **** 
 553:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:FreeRTOS/tasks.c **** 
 555:FreeRTOS/tasks.c **** 	/*
 556:FreeRTOS/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:FreeRTOS/tasks.c **** 	 * human readable tables of task information.
 558:FreeRTOS/tasks.c **** 	 */
 559:FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:FreeRTOS/tasks.c **** 
 561:FreeRTOS/tasks.c **** #endif
 562:FreeRTOS/tasks.c **** 
 563:FreeRTOS/tasks.c **** /*
 564:FreeRTOS/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:FreeRTOS/tasks.c ****  * dynamically to fill in the structure's members.
 566:FreeRTOS/tasks.c ****  */
 567:FreeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:FreeRTOS/tasks.c **** 									const char * const pcName,
 569:FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 570:FreeRTOS/tasks.c **** 									void * const pvParameters,
 571:FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 572:FreeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:FreeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
 574:FreeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:FreeRTOS/tasks.c **** 
 576:FreeRTOS/tasks.c **** /*
 577:FreeRTOS/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:FreeRTOS/tasks.c ****  * under the control of the scheduler.
 579:FreeRTOS/tasks.c ****  */
 580:FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:FreeRTOS/tasks.c **** 
 582:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 583:FreeRTOS/tasks.c **** 
 584:FreeRTOS/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:FreeRTOS/tasks.c **** 
 586:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:FreeRTOS/tasks.c **** 									const char * const pcName,
 588:FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 589:FreeRTOS/tasks.c **** 									void * const pvParameters,
 590:FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 591:FreeRTOS/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:FreeRTOS/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:FreeRTOS/tasks.c **** 	{
 594:FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 595:FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 596:FreeRTOS/tasks.c **** 
 597:FreeRTOS/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:FreeRTOS/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:FreeRTOS/tasks.c **** 
 600:FreeRTOS/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:FreeRTOS/tasks.c **** 		{
 602:FreeRTOS/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 12


 603:FreeRTOS/tasks.c **** 			function - use them. */
 604:FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:FreeRTOS/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:FreeRTOS/tasks.c **** 
 607:FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:FreeRTOS/tasks.c **** 			{
 609:FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:FreeRTOS/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:FreeRTOS/tasks.c **** 			}
 613:FreeRTOS/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:FreeRTOS/tasks.c **** 
 615:FreeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:FreeRTOS/tasks.c **** 		}
 618:FreeRTOS/tasks.c **** 		else
 619:FreeRTOS/tasks.c **** 		{
 620:FreeRTOS/tasks.c **** 			xReturn = NULL;
 621:FreeRTOS/tasks.c **** 		}
 622:FreeRTOS/tasks.c **** 
 623:FreeRTOS/tasks.c **** 		return xReturn;
 624:FreeRTOS/tasks.c **** 	}
 625:FreeRTOS/tasks.c **** 
 626:FreeRTOS/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 628:FreeRTOS/tasks.c **** 
 629:FreeRTOS/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:FreeRTOS/tasks.c **** 
 631:FreeRTOS/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:FreeRTOS/tasks.c **** 	{
 633:FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 634:FreeRTOS/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:FreeRTOS/tasks.c **** 
 636:FreeRTOS/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:FreeRTOS/tasks.c **** 
 638:FreeRTOS/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:FreeRTOS/tasks.c **** 		{
 640:FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:FreeRTOS/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:FreeRTOS/tasks.c **** 			not static allocation is being used. */
 643:FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:FreeRTOS/tasks.c **** 
 645:FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 646:FreeRTOS/tasks.c **** 			{
 647:FreeRTOS/tasks.c **** 				/* Store the stack location in the TCB. */
 648:FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:FreeRTOS/tasks.c **** 
 650:FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:FreeRTOS/tasks.c **** 				this task had a statically allocated stack in case it is
 652:FreeRTOS/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:FreeRTOS/tasks.c **** 
 655:FreeRTOS/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:FreeRTOS/tasks.c **** 										pxTaskDefinition->pcName,
 657:FreeRTOS/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:FreeRTOS/tasks.c **** 										pxTaskDefinition->pvParameters,
 659:FreeRTOS/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 13


 660:FreeRTOS/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:FreeRTOS/tasks.c **** 										pxTaskDefinition->xRegions );
 662:FreeRTOS/tasks.c **** 
 663:FreeRTOS/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 665:FreeRTOS/tasks.c **** 			}
 666:FreeRTOS/tasks.c **** 		}
 667:FreeRTOS/tasks.c **** 
 668:FreeRTOS/tasks.c **** 		return xReturn;
 669:FreeRTOS/tasks.c **** 	}
 670:FreeRTOS/tasks.c **** 
 671:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 673:FreeRTOS/tasks.c **** 
 674:FreeRTOS/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:FreeRTOS/tasks.c **** 
 676:FreeRTOS/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:FreeRTOS/tasks.c **** 							const char * const pcName,
 678:FreeRTOS/tasks.c **** 							const uint16_t usStackDepth,
 679:FreeRTOS/tasks.c **** 							void * const pvParameters,
 680:FreeRTOS/tasks.c **** 							UBaseType_t uxPriority,
 681:FreeRTOS/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:FreeRTOS/tasks.c **** 	{
 683:FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 684:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 685:FreeRTOS/tasks.c **** 
 686:FreeRTOS/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:FreeRTOS/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:FreeRTOS/tasks.c **** 		the TCB then the stack. */
 689:FreeRTOS/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:FreeRTOS/tasks.c **** 		{
 691:FreeRTOS/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:FreeRTOS/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:FreeRTOS/tasks.c **** 			allocation is being used. */
 694:FreeRTOS/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:FreeRTOS/tasks.c **** 
 696:FreeRTOS/tasks.c **** 			if( pxNewTCB != NULL )
 697:FreeRTOS/tasks.c **** 			{
 698:FreeRTOS/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:FreeRTOS/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:FreeRTOS/tasks.c **** 				be deleted later if required. */
 701:FreeRTOS/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:FreeRTOS/tasks.c **** 
 703:FreeRTOS/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:FreeRTOS/tasks.c **** 				{
 705:FreeRTOS/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:FreeRTOS/tasks.c **** 					vPortFree( pxNewTCB );
 707:FreeRTOS/tasks.c **** 					pxNewTCB = NULL;
 708:FreeRTOS/tasks.c **** 				}
 709:FreeRTOS/tasks.c **** 			}
 710:FreeRTOS/tasks.c **** 		}
 711:FreeRTOS/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:FreeRTOS/tasks.c **** 		{
 713:FreeRTOS/tasks.c **** 		StackType_t *pxStack;
 714:FreeRTOS/tasks.c **** 
 715:FreeRTOS/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 716:FreeRTOS/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 14


 717:FreeRTOS/tasks.c **** 
 718:FreeRTOS/tasks.c **** 			if( pxStack != NULL )
 719:FreeRTOS/tasks.c **** 			{
 720:FreeRTOS/tasks.c **** 				/* Allocate space for the TCB. */
 721:FreeRTOS/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:FreeRTOS/tasks.c **** 
 723:FreeRTOS/tasks.c **** 				if( pxNewTCB != NULL )
 724:FreeRTOS/tasks.c **** 				{
 725:FreeRTOS/tasks.c **** 					/* Store the stack location in the TCB. */
 726:FreeRTOS/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:FreeRTOS/tasks.c **** 				}
 728:FreeRTOS/tasks.c **** 				else
 729:FreeRTOS/tasks.c **** 				{
 730:FreeRTOS/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:FreeRTOS/tasks.c **** 					it again. */
 732:FreeRTOS/tasks.c **** 					vPortFree( pxStack );
 733:FreeRTOS/tasks.c **** 				}
 734:FreeRTOS/tasks.c **** 			}
 735:FreeRTOS/tasks.c **** 			else
 736:FreeRTOS/tasks.c **** 			{
 737:FreeRTOS/tasks.c **** 				pxNewTCB = NULL;
 738:FreeRTOS/tasks.c **** 			}
 739:FreeRTOS/tasks.c **** 		}
 740:FreeRTOS/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:FreeRTOS/tasks.c **** 
 742:FreeRTOS/tasks.c **** 		if( pxNewTCB != NULL )
 743:FreeRTOS/tasks.c **** 		{
 744:FreeRTOS/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:FreeRTOS/tasks.c **** 			{
 746:FreeRTOS/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:FreeRTOS/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:FreeRTOS/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:FreeRTOS/tasks.c **** 			}
 750:FreeRTOS/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:FreeRTOS/tasks.c **** 
 752:FreeRTOS/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 755:FreeRTOS/tasks.c **** 		}
 756:FreeRTOS/tasks.c **** 		else
 757:FreeRTOS/tasks.c **** 		{
 758:FreeRTOS/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:FreeRTOS/tasks.c **** 		}
 760:FreeRTOS/tasks.c **** 
 761:FreeRTOS/tasks.c **** 		return xReturn;
 762:FreeRTOS/tasks.c **** 	}
 763:FreeRTOS/tasks.c **** 
 764:FreeRTOS/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 766:FreeRTOS/tasks.c **** 
 767:FreeRTOS/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:FreeRTOS/tasks.c **** 									const char * const pcName,
 769:FreeRTOS/tasks.c **** 									const uint32_t ulStackDepth,
 770:FreeRTOS/tasks.c **** 									void * const pvParameters,
 771:FreeRTOS/tasks.c **** 									UBaseType_t uxPriority,
 772:FreeRTOS/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 773:FreeRTOS/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 15


 774:FreeRTOS/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:FreeRTOS/tasks.c **** {
 776:FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 777:FreeRTOS/tasks.c **** UBaseType_t x;
 778:FreeRTOS/tasks.c **** 
 779:FreeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:FreeRTOS/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:FreeRTOS/tasks.c **** 		BaseType_t xRunPrivileged;
 782:FreeRTOS/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:FreeRTOS/tasks.c **** 		{
 784:FreeRTOS/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:FreeRTOS/tasks.c **** 		}
 786:FreeRTOS/tasks.c **** 		else
 787:FreeRTOS/tasks.c **** 		{
 788:FreeRTOS/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:FreeRTOS/tasks.c **** 		}
 790:FreeRTOS/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:FreeRTOS/tasks.c **** 
 793:FreeRTOS/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:FreeRTOS/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:FreeRTOS/tasks.c **** 	{
 796:FreeRTOS/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:FreeRTOS/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:FreeRTOS/tasks.c **** 	}
 799:FreeRTOS/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:FreeRTOS/tasks.c **** 
 801:FreeRTOS/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:FreeRTOS/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:FreeRTOS/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:FreeRTOS/tasks.c **** 	by the port. */
 805:FreeRTOS/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:FreeRTOS/tasks.c **** 	{
 807:FreeRTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:FreeRTOS/tasks.c **** 
 810:FreeRTOS/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:FreeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:FreeRTOS/tasks.c **** 	}
 813:FreeRTOS/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:FreeRTOS/tasks.c **** 	{
 815:FreeRTOS/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:FreeRTOS/tasks.c **** 
 817:FreeRTOS/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:FreeRTOS/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:FreeRTOS/tasks.c **** 
 820:FreeRTOS/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:FreeRTOS/tasks.c **** 		performed. */
 822:FreeRTOS/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:FreeRTOS/tasks.c **** 	}
 824:FreeRTOS/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:FreeRTOS/tasks.c **** 
 826:FreeRTOS/tasks.c **** 	/* Store the task name in the TCB. */
 827:FreeRTOS/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:FreeRTOS/tasks.c **** 	{
 829:FreeRTOS/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 830:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 16


 831:FreeRTOS/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:FreeRTOS/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:FreeRTOS/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:FreeRTOS/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:FreeRTOS/tasks.c **** 		{
 836:FreeRTOS/tasks.c **** 			break;
 837:FreeRTOS/tasks.c **** 		}
 838:FreeRTOS/tasks.c **** 		else
 839:FreeRTOS/tasks.c **** 		{
 840:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:FreeRTOS/tasks.c **** 		}
 842:FreeRTOS/tasks.c **** 	}
 843:FreeRTOS/tasks.c **** 
 844:FreeRTOS/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:FreeRTOS/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:FreeRTOS/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:FreeRTOS/tasks.c **** 
 848:FreeRTOS/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:FreeRTOS/tasks.c **** 	remove the privilege bit if one is present. */
 850:FreeRTOS/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:FreeRTOS/tasks.c **** 	{
 852:FreeRTOS/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:FreeRTOS/tasks.c **** 	}
 854:FreeRTOS/tasks.c **** 	else
 855:FreeRTOS/tasks.c **** 	{
 856:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:FreeRTOS/tasks.c **** 	}
 858:FreeRTOS/tasks.c **** 
 859:FreeRTOS/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:FreeRTOS/tasks.c **** 	{
 862:FreeRTOS/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:FreeRTOS/tasks.c **** 	}
 865:FreeRTOS/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:FreeRTOS/tasks.c **** 
 867:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:FreeRTOS/tasks.c **** 
 870:FreeRTOS/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:FreeRTOS/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:FreeRTOS/tasks.c **** 
 874:FreeRTOS/tasks.c **** 	/* Event lists are always in priority order. */
 875:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:FreeRTOS/tasks.c **** 
 878:FreeRTOS/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:FreeRTOS/tasks.c **** 	{
 880:FreeRTOS/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:FreeRTOS/tasks.c **** 	}
 882:FreeRTOS/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:FreeRTOS/tasks.c **** 
 884:FreeRTOS/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:FreeRTOS/tasks.c **** 	{
 886:FreeRTOS/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 887:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 17


 888:FreeRTOS/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:FreeRTOS/tasks.c **** 
 890:FreeRTOS/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:FreeRTOS/tasks.c **** 	{
 892:FreeRTOS/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:FreeRTOS/tasks.c **** 	}
 894:FreeRTOS/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:FreeRTOS/tasks.c **** 
 896:FreeRTOS/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:FreeRTOS/tasks.c **** 	{
 898:FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:FreeRTOS/tasks.c **** 	}
 900:FreeRTOS/tasks.c **** 	#else
 901:FreeRTOS/tasks.c **** 	{
 902:FreeRTOS/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:FreeRTOS/tasks.c **** 		( void ) xRegions;
 904:FreeRTOS/tasks.c **** 	}
 905:FreeRTOS/tasks.c **** 	#endif
 906:FreeRTOS/tasks.c **** 
 907:FreeRTOS/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:FreeRTOS/tasks.c **** 	{
 909:FreeRTOS/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:FreeRTOS/tasks.c **** 		{
 911:FreeRTOS/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:FreeRTOS/tasks.c **** 		}
 913:FreeRTOS/tasks.c **** 	}
 914:FreeRTOS/tasks.c **** 	#endif
 915:FreeRTOS/tasks.c **** 
 916:FreeRTOS/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:FreeRTOS/tasks.c **** 	{
 918:FreeRTOS/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:FreeRTOS/tasks.c **** 	}
 921:FreeRTOS/tasks.c **** 	#endif
 922:FreeRTOS/tasks.c **** 
 923:FreeRTOS/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:FreeRTOS/tasks.c **** 	{
 925:FreeRTOS/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:FreeRTOS/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:FreeRTOS/tasks.c **** 	}
 928:FreeRTOS/tasks.c **** 	#endif
 929:FreeRTOS/tasks.c **** 
 930:FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:FreeRTOS/tasks.c **** 	{
 932:FreeRTOS/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:FreeRTOS/tasks.c **** 	}
 934:FreeRTOS/tasks.c **** 	#endif
 935:FreeRTOS/tasks.c **** 
 936:FreeRTOS/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:FreeRTOS/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:FreeRTOS/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:FreeRTOS/tasks.c **** 	the	top of stack variable is updated. */
 940:FreeRTOS/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:FreeRTOS/tasks.c **** 	{
 942:FreeRTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:FreeRTOS/tasks.c **** 	}
 944:FreeRTOS/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 18


 945:FreeRTOS/tasks.c **** 	{
 946:FreeRTOS/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:FreeRTOS/tasks.c **** 	}
 948:FreeRTOS/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:FreeRTOS/tasks.c **** 
 950:FreeRTOS/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:FreeRTOS/tasks.c **** 	{
 952:FreeRTOS/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:FreeRTOS/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:FreeRTOS/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:FreeRTOS/tasks.c **** 	}
 956:FreeRTOS/tasks.c **** 	else
 957:FreeRTOS/tasks.c **** 	{
 958:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:FreeRTOS/tasks.c **** 	}
 960:FreeRTOS/tasks.c **** }
 961:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 962:FreeRTOS/tasks.c **** 
 963:FreeRTOS/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:FreeRTOS/tasks.c **** {
 965:FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:FreeRTOS/tasks.c **** 	updated. */
 967:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
 968:FreeRTOS/tasks.c **** 	{
 969:FreeRTOS/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:FreeRTOS/tasks.c **** 		{
 972:FreeRTOS/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:FreeRTOS/tasks.c **** 			the suspended state - make this the current task. */
 974:FreeRTOS/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:FreeRTOS/tasks.c **** 
 976:FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:FreeRTOS/tasks.c **** 			{
 978:FreeRTOS/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:FreeRTOS/tasks.c **** 				initialisation required.  We will not recover if this call
 980:FreeRTOS/tasks.c **** 				fails, but we will report the failure. */
 981:FreeRTOS/tasks.c **** 				prvInitialiseTaskLists();
 982:FreeRTOS/tasks.c **** 			}
 983:FreeRTOS/tasks.c **** 			else
 984:FreeRTOS/tasks.c **** 			{
 985:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:FreeRTOS/tasks.c **** 			}
 987:FreeRTOS/tasks.c **** 		}
 988:FreeRTOS/tasks.c **** 		else
 989:FreeRTOS/tasks.c **** 		{
 990:FreeRTOS/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:FreeRTOS/tasks.c **** 			current task if it is the highest priority task to be created
 992:FreeRTOS/tasks.c **** 			so far. */
 993:FreeRTOS/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:FreeRTOS/tasks.c **** 			{
 995:FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:FreeRTOS/tasks.c **** 				{
 997:FreeRTOS/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:FreeRTOS/tasks.c **** 				}
 999:FreeRTOS/tasks.c **** 				else
1000:FreeRTOS/tasks.c **** 				{
1001:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 19


1002:FreeRTOS/tasks.c **** 				}
1003:FreeRTOS/tasks.c **** 			}
1004:FreeRTOS/tasks.c **** 			else
1005:FreeRTOS/tasks.c **** 			{
1006:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:FreeRTOS/tasks.c **** 			}
1008:FreeRTOS/tasks.c **** 		}
1009:FreeRTOS/tasks.c **** 
1010:FreeRTOS/tasks.c **** 		uxTaskNumber++;
1011:FreeRTOS/tasks.c **** 
1012:FreeRTOS/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:FreeRTOS/tasks.c **** 		{
1014:FreeRTOS/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:FreeRTOS/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:FreeRTOS/tasks.c **** 		}
1017:FreeRTOS/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:FreeRTOS/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:FreeRTOS/tasks.c **** 
1020:FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:FreeRTOS/tasks.c **** 
1022:FreeRTOS/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:FreeRTOS/tasks.c **** 	}
1024:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
1025:FreeRTOS/tasks.c **** 
1026:FreeRTOS/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:FreeRTOS/tasks.c **** 	{
1028:FreeRTOS/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:FreeRTOS/tasks.c **** 		then it should run now. */
1030:FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:FreeRTOS/tasks.c **** 		{
1032:FreeRTOS/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:FreeRTOS/tasks.c **** 		}
1034:FreeRTOS/tasks.c **** 		else
1035:FreeRTOS/tasks.c **** 		{
1036:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:FreeRTOS/tasks.c **** 		}
1038:FreeRTOS/tasks.c **** 	}
1039:FreeRTOS/tasks.c **** 	else
1040:FreeRTOS/tasks.c **** 	{
1041:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:FreeRTOS/tasks.c **** 	}
1043:FreeRTOS/tasks.c **** }
1044:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1045:FreeRTOS/tasks.c **** 
1046:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:FreeRTOS/tasks.c **** 
1048:FreeRTOS/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:FreeRTOS/tasks.c **** 	{
1050:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1051:FreeRTOS/tasks.c **** 
1052:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1053:FreeRTOS/tasks.c **** 		{
1054:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:FreeRTOS/tasks.c **** 			being deleted. */
1056:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:FreeRTOS/tasks.c **** 
1058:FreeRTOS/tasks.c **** 			/* Remove task from the ready list. */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 20


1059:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:FreeRTOS/tasks.c **** 			{
1061:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:FreeRTOS/tasks.c **** 			}
1063:FreeRTOS/tasks.c **** 			else
1064:FreeRTOS/tasks.c **** 			{
1065:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:FreeRTOS/tasks.c **** 			}
1067:FreeRTOS/tasks.c **** 
1068:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1069:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:FreeRTOS/tasks.c **** 			{
1071:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:FreeRTOS/tasks.c **** 			}
1073:FreeRTOS/tasks.c **** 			else
1074:FreeRTOS/tasks.c **** 			{
1075:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:FreeRTOS/tasks.c **** 			}
1077:FreeRTOS/tasks.c **** 
1078:FreeRTOS/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:FreeRTOS/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:FreeRTOS/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:FreeRTOS/tasks.c **** 			not return. */
1082:FreeRTOS/tasks.c **** 			uxTaskNumber++;
1083:FreeRTOS/tasks.c **** 
1084:FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:FreeRTOS/tasks.c **** 			{
1086:FreeRTOS/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:FreeRTOS/tasks.c **** 				task itself, as a context switch to another task is required.
1088:FreeRTOS/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:FreeRTOS/tasks.c **** 				check the termination list and free up any memory allocated by
1090:FreeRTOS/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:FreeRTOS/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:FreeRTOS/tasks.c **** 
1093:FreeRTOS/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:FreeRTOS/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:FreeRTOS/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:FreeRTOS/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:FreeRTOS/tasks.c **** 
1098:FreeRTOS/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:FreeRTOS/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:FreeRTOS/tasks.c **** 				after which it is not possible to yield away from this task -
1101:FreeRTOS/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:FreeRTOS/tasks.c **** 				required. */
1103:FreeRTOS/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:FreeRTOS/tasks.c **** 			}
1105:FreeRTOS/tasks.c **** 			else
1106:FreeRTOS/tasks.c **** 			{
1107:FreeRTOS/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:FreeRTOS/tasks.c **** 
1110:FreeRTOS/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:FreeRTOS/tasks.c **** 				the task that has just been deleted. */
1112:FreeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:FreeRTOS/tasks.c **** 			}
1114:FreeRTOS/tasks.c **** 
1115:FreeRTOS/tasks.c **** 			traceTASK_DELETE( pxTCB );
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 21


1116:FreeRTOS/tasks.c **** 		}
1117:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1118:FreeRTOS/tasks.c **** 
1119:FreeRTOS/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:FreeRTOS/tasks.c **** 		been deleted. */
1121:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:FreeRTOS/tasks.c **** 		{
1123:FreeRTOS/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:FreeRTOS/tasks.c **** 			{
1125:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1127:FreeRTOS/tasks.c **** 			}
1128:FreeRTOS/tasks.c **** 			else
1129:FreeRTOS/tasks.c **** 			{
1130:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:FreeRTOS/tasks.c **** 			}
1132:FreeRTOS/tasks.c **** 		}
1133:FreeRTOS/tasks.c **** 	}
1134:FreeRTOS/tasks.c **** 
1135:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1137:FreeRTOS/tasks.c **** 
1138:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:FreeRTOS/tasks.c **** 
1140:FreeRTOS/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:FreeRTOS/tasks.c **** 	{
1142:FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
1143:FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:FreeRTOS/tasks.c **** 
1145:FreeRTOS/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:FreeRTOS/tasks.c **** 
1149:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
1150:FreeRTOS/tasks.c **** 		{
1151:FreeRTOS/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:FreeRTOS/tasks.c **** 			block. */
1153:FreeRTOS/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:FreeRTOS/tasks.c **** 
1155:FreeRTOS/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:FreeRTOS/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:FreeRTOS/tasks.c **** 
1158:FreeRTOS/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:FreeRTOS/tasks.c **** 			{
1160:FreeRTOS/tasks.c **** 				/* The tick count has overflowed since this function was
1161:FreeRTOS/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:FreeRTOS/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:FreeRTOS/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:FreeRTOS/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:FreeRTOS/tasks.c **** 				{
1167:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1168:FreeRTOS/tasks.c **** 				}
1169:FreeRTOS/tasks.c **** 				else
1170:FreeRTOS/tasks.c **** 				{
1171:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1172:FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 22


1173:FreeRTOS/tasks.c **** 			}
1174:FreeRTOS/tasks.c **** 			else
1175:FreeRTOS/tasks.c **** 			{
1176:FreeRTOS/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:FreeRTOS/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:FreeRTOS/tasks.c **** 				tick time is less than the wake time. */
1179:FreeRTOS/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:FreeRTOS/tasks.c **** 				{
1181:FreeRTOS/tasks.c **** 					xShouldDelay = pdTRUE;
1182:FreeRTOS/tasks.c **** 				}
1183:FreeRTOS/tasks.c **** 				else
1184:FreeRTOS/tasks.c **** 				{
1185:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:FreeRTOS/tasks.c **** 				}
1187:FreeRTOS/tasks.c **** 			}
1188:FreeRTOS/tasks.c **** 
1189:FreeRTOS/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:FreeRTOS/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:FreeRTOS/tasks.c **** 
1192:FreeRTOS/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:FreeRTOS/tasks.c **** 			{
1194:FreeRTOS/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:FreeRTOS/tasks.c **** 
1196:FreeRTOS/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:FreeRTOS/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:FreeRTOS/tasks.c **** 			}
1200:FreeRTOS/tasks.c **** 			else
1201:FreeRTOS/tasks.c **** 			{
1202:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:FreeRTOS/tasks.c **** 			}
1204:FreeRTOS/tasks.c **** 		}
1205:FreeRTOS/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:FreeRTOS/tasks.c **** 
1207:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
1209:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:FreeRTOS/tasks.c **** 		{
1211:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1212:FreeRTOS/tasks.c **** 		}
1213:FreeRTOS/tasks.c **** 		else
1214:FreeRTOS/tasks.c **** 		{
1215:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:FreeRTOS/tasks.c **** 		}
1217:FreeRTOS/tasks.c **** 	}
1218:FreeRTOS/tasks.c **** 
1219:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1221:FreeRTOS/tasks.c **** 
1222:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:FreeRTOS/tasks.c **** 
1224:FreeRTOS/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:FreeRTOS/tasks.c **** 	{
1226:FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:FreeRTOS/tasks.c **** 
1228:FreeRTOS/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1229:FreeRTOS/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 23


1230:FreeRTOS/tasks.c **** 		{
1231:FreeRTOS/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
1233:FreeRTOS/tasks.c **** 			{
1234:FreeRTOS/tasks.c **** 				traceTASK_DELAY();
1235:FreeRTOS/tasks.c **** 
1236:FreeRTOS/tasks.c **** 				/* A task that is removed from the event list while the
1237:FreeRTOS/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:FreeRTOS/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:FreeRTOS/tasks.c **** 				is resumed.
1240:FreeRTOS/tasks.c **** 
1241:FreeRTOS/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:FreeRTOS/tasks.c **** 				executing task. */
1243:FreeRTOS/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:FreeRTOS/tasks.c **** 			}
1245:FreeRTOS/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:FreeRTOS/tasks.c **** 		}
1247:FreeRTOS/tasks.c **** 		else
1248:FreeRTOS/tasks.c **** 		{
1249:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:FreeRTOS/tasks.c **** 		}
1251:FreeRTOS/tasks.c **** 
1252:FreeRTOS/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:FreeRTOS/tasks.c **** 		have put ourselves to sleep. */
1254:FreeRTOS/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:FreeRTOS/tasks.c **** 		{
1256:FreeRTOS/tasks.c **** 			portYIELD_WITHIN_API();
1257:FreeRTOS/tasks.c **** 		}
1258:FreeRTOS/tasks.c **** 		else
1259:FreeRTOS/tasks.c **** 		{
1260:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:FreeRTOS/tasks.c **** 		}
1262:FreeRTOS/tasks.c **** 	}
1263:FreeRTOS/tasks.c **** 
1264:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1266:FreeRTOS/tasks.c **** 
1267:FreeRTOS/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:FreeRTOS/tasks.c **** 
1269:FreeRTOS/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:FreeRTOS/tasks.c **** 	{
1271:FreeRTOS/tasks.c **** 	eTaskState eReturn;
1272:FreeRTOS/tasks.c **** 	List_t *pxStateList;
1273:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:FreeRTOS/tasks.c **** 
1275:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
1276:FreeRTOS/tasks.c **** 
1277:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:FreeRTOS/tasks.c **** 		{
1279:FreeRTOS/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:FreeRTOS/tasks.c **** 			eReturn = eRunning;
1281:FreeRTOS/tasks.c **** 		}
1282:FreeRTOS/tasks.c **** 		else
1283:FreeRTOS/tasks.c **** 		{
1284:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1285:FreeRTOS/tasks.c **** 			{
1286:FreeRTOS/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 24


1287:FreeRTOS/tasks.c **** 			}
1288:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1289:FreeRTOS/tasks.c **** 
1290:FreeRTOS/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:FreeRTOS/tasks.c **** 			{
1292:FreeRTOS/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:FreeRTOS/tasks.c **** 				lists. */
1294:FreeRTOS/tasks.c **** 				eReturn = eBlocked;
1295:FreeRTOS/tasks.c **** 			}
1296:FreeRTOS/tasks.c **** 
1297:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:FreeRTOS/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:FreeRTOS/tasks.c **** 				{
1300:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:FreeRTOS/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:FreeRTOS/tasks.c **** 					indefinitely? */
1303:FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:FreeRTOS/tasks.c **** 					{
1305:FreeRTOS/tasks.c **** 						eReturn = eSuspended;
1306:FreeRTOS/tasks.c **** 					}
1307:FreeRTOS/tasks.c **** 					else
1308:FreeRTOS/tasks.c **** 					{
1309:FreeRTOS/tasks.c **** 						eReturn = eBlocked;
1310:FreeRTOS/tasks.c **** 					}
1311:FreeRTOS/tasks.c **** 				}
1312:FreeRTOS/tasks.c **** 			#endif
1313:FreeRTOS/tasks.c **** 
1314:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:FreeRTOS/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:FreeRTOS/tasks.c **** 				{
1317:FreeRTOS/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:FreeRTOS/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:FreeRTOS/tasks.c **** 					all. */
1320:FreeRTOS/tasks.c **** 					eReturn = eDeleted;
1321:FreeRTOS/tasks.c **** 				}
1322:FreeRTOS/tasks.c **** 			#endif
1323:FreeRTOS/tasks.c **** 
1324:FreeRTOS/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:FreeRTOS/tasks.c **** 			{
1326:FreeRTOS/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:FreeRTOS/tasks.c **** 				Ready (including pending ready) state. */
1328:FreeRTOS/tasks.c **** 				eReturn = eReady;
1329:FreeRTOS/tasks.c **** 			}
1330:FreeRTOS/tasks.c **** 		}
1331:FreeRTOS/tasks.c **** 
1332:FreeRTOS/tasks.c **** 		return eReturn;
1333:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:FreeRTOS/tasks.c **** 
1335:FreeRTOS/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1337:FreeRTOS/tasks.c **** 
1338:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:FreeRTOS/tasks.c **** 
1340:FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:FreeRTOS/tasks.c **** 	{
1342:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1343:FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 25


1344:FreeRTOS/tasks.c **** 
1345:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1346:FreeRTOS/tasks.c **** 		{
1347:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:FreeRTOS/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:FreeRTOS/tasks.c **** 		}
1352:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1353:FreeRTOS/tasks.c **** 
1354:FreeRTOS/tasks.c **** 		return uxReturn;
1355:FreeRTOS/tasks.c **** 	}
1356:FreeRTOS/tasks.c **** 
1357:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1359:FreeRTOS/tasks.c **** 
1360:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:FreeRTOS/tasks.c **** 
1362:FreeRTOS/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:FreeRTOS/tasks.c **** 	{
1364:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1365:FreeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:FreeRTOS/tasks.c **** 
1367:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:FreeRTOS/tasks.c **** 		provided on the following link:
1382:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:FreeRTOS/tasks.c **** 
1385:FreeRTOS/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:FreeRTOS/tasks.c **** 		{
1387:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:FreeRTOS/tasks.c **** 			task that is being queried. */
1389:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:FreeRTOS/tasks.c **** 		}
1392:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:FreeRTOS/tasks.c **** 
1394:FreeRTOS/tasks.c **** 		return uxReturn;
1395:FreeRTOS/tasks.c **** 	}
1396:FreeRTOS/tasks.c **** 
1397:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1399:FreeRTOS/tasks.c **** 
1400:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 26


1401:FreeRTOS/tasks.c **** 
1402:FreeRTOS/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:FreeRTOS/tasks.c **** 	{
1404:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1405:FreeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:FreeRTOS/tasks.c **** 
1408:FreeRTOS/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:FreeRTOS/tasks.c **** 
1410:FreeRTOS/tasks.c **** 		/* Ensure the new priority is valid. */
1411:FreeRTOS/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:FreeRTOS/tasks.c **** 		{
1413:FreeRTOS/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:FreeRTOS/tasks.c **** 		}
1415:FreeRTOS/tasks.c **** 		else
1416:FreeRTOS/tasks.c **** 		{
1417:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:FreeRTOS/tasks.c **** 		}
1419:FreeRTOS/tasks.c **** 
1420:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1421:FreeRTOS/tasks.c **** 		{
1422:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:FreeRTOS/tasks.c **** 			task that is being changed. */
1424:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:FreeRTOS/tasks.c **** 
1426:FreeRTOS/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:FreeRTOS/tasks.c **** 
1428:FreeRTOS/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:FreeRTOS/tasks.c **** 			{
1430:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:FreeRTOS/tasks.c **** 			}
1432:FreeRTOS/tasks.c **** 			#else
1433:FreeRTOS/tasks.c **** 			{
1434:FreeRTOS/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:FreeRTOS/tasks.c **** 			}
1436:FreeRTOS/tasks.c **** 			#endif
1437:FreeRTOS/tasks.c **** 
1438:FreeRTOS/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:FreeRTOS/tasks.c **** 			{
1440:FreeRTOS/tasks.c **** 				/* The priority change may have readied a task of higher
1441:FreeRTOS/tasks.c **** 				priority than the calling task. */
1442:FreeRTOS/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:FreeRTOS/tasks.c **** 				{
1444:FreeRTOS/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:FreeRTOS/tasks.c **** 					{
1446:FreeRTOS/tasks.c **** 						/* The priority of a task other than the currently
1447:FreeRTOS/tasks.c **** 						running task is being raised.  Is the priority being
1448:FreeRTOS/tasks.c **** 						raised above that of the running task? */
1449:FreeRTOS/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:FreeRTOS/tasks.c **** 						{
1451:FreeRTOS/tasks.c **** 							xYieldRequired = pdTRUE;
1452:FreeRTOS/tasks.c **** 						}
1453:FreeRTOS/tasks.c **** 						else
1454:FreeRTOS/tasks.c **** 						{
1455:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:FreeRTOS/tasks.c **** 						}
1457:FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 27


1458:FreeRTOS/tasks.c **** 					else
1459:FreeRTOS/tasks.c **** 					{
1460:FreeRTOS/tasks.c **** 						/* The priority of the running task is being raised,
1461:FreeRTOS/tasks.c **** 						but the running task must already be the highest
1462:FreeRTOS/tasks.c **** 						priority task able to run so no yield is required. */
1463:FreeRTOS/tasks.c **** 					}
1464:FreeRTOS/tasks.c **** 				}
1465:FreeRTOS/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:FreeRTOS/tasks.c **** 				{
1467:FreeRTOS/tasks.c **** 					/* Setting the priority of the running task down means
1468:FreeRTOS/tasks.c **** 					there may now be another task of higher priority that
1469:FreeRTOS/tasks.c **** 					is ready to execute. */
1470:FreeRTOS/tasks.c **** 					xYieldRequired = pdTRUE;
1471:FreeRTOS/tasks.c **** 				}
1472:FreeRTOS/tasks.c **** 				else
1473:FreeRTOS/tasks.c **** 				{
1474:FreeRTOS/tasks.c **** 					/* Setting the priority of any other task down does not
1475:FreeRTOS/tasks.c **** 					require a yield as the running task must be above the
1476:FreeRTOS/tasks.c **** 					new priority of the task being modified. */
1477:FreeRTOS/tasks.c **** 				}
1478:FreeRTOS/tasks.c **** 
1479:FreeRTOS/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:FreeRTOS/tasks.c **** 				before its uxPriority member is changed so the
1481:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:FreeRTOS/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:FreeRTOS/tasks.c **** 
1484:FreeRTOS/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:FreeRTOS/tasks.c **** 				{
1486:FreeRTOS/tasks.c **** 					/* Only change the priority being used if the task is not
1487:FreeRTOS/tasks.c **** 					currently using an inherited priority. */
1488:FreeRTOS/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:FreeRTOS/tasks.c **** 					{
1490:FreeRTOS/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:FreeRTOS/tasks.c **** 					}
1492:FreeRTOS/tasks.c **** 					else
1493:FreeRTOS/tasks.c **** 					{
1494:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:FreeRTOS/tasks.c **** 					}
1496:FreeRTOS/tasks.c **** 
1497:FreeRTOS/tasks.c **** 					/* The base priority gets set whatever. */
1498:FreeRTOS/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:FreeRTOS/tasks.c **** 				}
1500:FreeRTOS/tasks.c **** 				#else
1501:FreeRTOS/tasks.c **** 				{
1502:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:FreeRTOS/tasks.c **** 				}
1504:FreeRTOS/tasks.c **** 				#endif
1505:FreeRTOS/tasks.c **** 
1506:FreeRTOS/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:FreeRTOS/tasks.c **** 				being used for anything else. */
1508:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:FreeRTOS/tasks.c **** 				{
1510:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:FreeRTOS/tasks.c **** 				}
1512:FreeRTOS/tasks.c **** 				else
1513:FreeRTOS/tasks.c **** 				{
1514:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 28


1515:FreeRTOS/tasks.c **** 				}
1516:FreeRTOS/tasks.c **** 
1517:FreeRTOS/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:FreeRTOS/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:FreeRTOS/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:FreeRTOS/tasks.c **** 				in the list appropriate to its new priority. */
1521:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:FreeRTOS/tasks.c **** 				{
1523:FreeRTOS/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:FreeRTOS/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:FreeRTOS/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:FreeRTOS/tasks.c **** 					{
1528:FreeRTOS/tasks.c **** 						/* It is known that the task is in its ready list so
1529:FreeRTOS/tasks.c **** 						there is no need to check again and the port level
1530:FreeRTOS/tasks.c **** 						reset macro can be called directly. */
1531:FreeRTOS/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:FreeRTOS/tasks.c **** 					}
1533:FreeRTOS/tasks.c **** 					else
1534:FreeRTOS/tasks.c **** 					{
1535:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:FreeRTOS/tasks.c **** 					}
1537:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:FreeRTOS/tasks.c **** 				}
1539:FreeRTOS/tasks.c **** 				else
1540:FreeRTOS/tasks.c **** 				{
1541:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:FreeRTOS/tasks.c **** 				}
1543:FreeRTOS/tasks.c **** 
1544:FreeRTOS/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:FreeRTOS/tasks.c **** 				{
1546:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:FreeRTOS/tasks.c **** 				}
1548:FreeRTOS/tasks.c **** 				else
1549:FreeRTOS/tasks.c **** 				{
1550:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:FreeRTOS/tasks.c **** 				}
1552:FreeRTOS/tasks.c **** 
1553:FreeRTOS/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:FreeRTOS/tasks.c **** 				optimised task selection is not being used. */
1555:FreeRTOS/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:FreeRTOS/tasks.c **** 			}
1557:FreeRTOS/tasks.c **** 		}
1558:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1559:FreeRTOS/tasks.c **** 	}
1560:FreeRTOS/tasks.c **** 
1561:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1563:FreeRTOS/tasks.c **** 
1564:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:FreeRTOS/tasks.c **** 
1566:FreeRTOS/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:FreeRTOS/tasks.c **** 	{
1568:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
1569:FreeRTOS/tasks.c **** 
1570:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
1571:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 29


1572:FreeRTOS/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:FreeRTOS/tasks.c **** 			being suspended. */
1574:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:FreeRTOS/tasks.c **** 
1576:FreeRTOS/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:FreeRTOS/tasks.c **** 
1578:FreeRTOS/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:FreeRTOS/tasks.c **** 			suspended list. */
1580:FreeRTOS/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:FreeRTOS/tasks.c **** 			{
1582:FreeRTOS/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:FreeRTOS/tasks.c **** 			}
1584:FreeRTOS/tasks.c **** 			else
1585:FreeRTOS/tasks.c **** 			{
1586:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:FreeRTOS/tasks.c **** 			}
1588:FreeRTOS/tasks.c **** 
1589:FreeRTOS/tasks.c **** 			/* Is the task waiting on an event also? */
1590:FreeRTOS/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:FreeRTOS/tasks.c **** 			{
1592:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:FreeRTOS/tasks.c **** 			}
1594:FreeRTOS/tasks.c **** 			else
1595:FreeRTOS/tasks.c **** 			{
1596:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:FreeRTOS/tasks.c **** 			}
1598:FreeRTOS/tasks.c **** 
1599:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:FreeRTOS/tasks.c **** 		}
1601:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
1602:FreeRTOS/tasks.c **** 
1603:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:FreeRTOS/tasks.c **** 		{
1605:FreeRTOS/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:FreeRTOS/tasks.c **** 			task that is now in the Suspended state. */
1607:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1608:FreeRTOS/tasks.c **** 			{
1609:FreeRTOS/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:FreeRTOS/tasks.c **** 			}
1611:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1612:FreeRTOS/tasks.c **** 		}
1613:FreeRTOS/tasks.c **** 		else
1614:FreeRTOS/tasks.c **** 		{
1615:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:FreeRTOS/tasks.c **** 		}
1617:FreeRTOS/tasks.c **** 
1618:FreeRTOS/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:FreeRTOS/tasks.c **** 		{
1620:FreeRTOS/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:FreeRTOS/tasks.c **** 			{
1622:FreeRTOS/tasks.c **** 				/* The current task has just been suspended. */
1623:FreeRTOS/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
1625:FreeRTOS/tasks.c **** 			}
1626:FreeRTOS/tasks.c **** 			else
1627:FreeRTOS/tasks.c **** 			{
1628:FreeRTOS/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 30


1629:FreeRTOS/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:FreeRTOS/tasks.c **** 				must be adjusted to point to a different task. */
1631:FreeRTOS/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:FreeRTOS/tasks.c **** 				{
1633:FreeRTOS/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:FreeRTOS/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:FreeRTOS/tasks.c **** 					be set to point to it no matter what its relative priority
1636:FreeRTOS/tasks.c **** 					is. */
1637:FreeRTOS/tasks.c **** 					pxCurrentTCB = NULL;
1638:FreeRTOS/tasks.c **** 				}
1639:FreeRTOS/tasks.c **** 				else
1640:FreeRTOS/tasks.c **** 				{
1641:FreeRTOS/tasks.c **** 					vTaskSwitchContext();
1642:FreeRTOS/tasks.c **** 				}
1643:FreeRTOS/tasks.c **** 			}
1644:FreeRTOS/tasks.c **** 		}
1645:FreeRTOS/tasks.c **** 		else
1646:FreeRTOS/tasks.c **** 		{
1647:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:FreeRTOS/tasks.c **** 		}
1649:FreeRTOS/tasks.c **** 	}
1650:FreeRTOS/tasks.c **** 
1651:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1653:FreeRTOS/tasks.c **** 
1654:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:FreeRTOS/tasks.c **** 
1656:FreeRTOS/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:FreeRTOS/tasks.c **** 	{
  27              		.loc 1 1657 2 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
1658:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  32              		.loc 1 1658 2 view .LVU1
1659:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  33              		.loc 1 1659 2 view .LVU2
1660:FreeRTOS/tasks.c **** 
1661:FreeRTOS/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:FreeRTOS/tasks.c **** 		section. */
1663:FreeRTOS/tasks.c **** 
1664:FreeRTOS/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:FreeRTOS/tasks.c **** 		configASSERT( xTask );
  34              		.loc 1 1665 24 view .LVU3
1666:FreeRTOS/tasks.c **** 
1667:FreeRTOS/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:FreeRTOS/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1668 3 view .LVU4
  36              		.loc 1 1668 7 is_stmt 0 view .LVU5
  37 0000 4269     		ldr	r2, [r0, #20]
  38              		.loc 1 1668 82 view .LVU6
  39 0002 084B     		ldr	r3, .L7
  40 0004 9A42     		cmp	r2, r3
  41 0006 01D0     		beq	.L6
1658:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  42              		.loc 1 1658 13 view .LVU7
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 31


  43 0008 0020     		movs	r0, #0
  44              	.LVL1:
1658:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  45              		.loc 1 1658 13 view .LVU8
  46 000a 7047     		bx	lr
  47              	.LVL2:
  48              	.L6:
1669:FreeRTOS/tasks.c **** 		{
1670:FreeRTOS/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:FreeRTOS/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  49              		.loc 1 1671 4 is_stmt 1 view .LVU9
  50              		.loc 1 1671 8 is_stmt 0 view .LVU10
  51 000c 836A     		ldr	r3, [r0, #40]
  52              		.loc 1 1671 6 view .LVU11
  53 000e 064A     		ldr	r2, .L7+4
  54 0010 9342     		cmp	r3, r2
  55 0012 02D0     		beq	.L4
1672:FreeRTOS/tasks.c **** 			{
1673:FreeRTOS/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:FreeRTOS/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  56              		.loc 1 1675 5 is_stmt 1 view .LVU12
  57              		.loc 1 1675 69 is_stmt 0 view .LVU13
  58 0014 1BB1     		cbz	r3, .L5
1658:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  59              		.loc 1 1658 13 view .LVU14
  60 0016 0020     		movs	r0, #0
  61              	.LVL3:
1658:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  62              		.loc 1 1658 13 view .LVU15
  63 0018 7047     		bx	lr
  64              	.LVL4:
  65              	.L4:
1658:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  66              		.loc 1 1658 13 view .LVU16
  67 001a 0020     		movs	r0, #0
  68              	.LVL5:
1658:FreeRTOS/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  69              		.loc 1 1658 13 view .LVU17
  70 001c 7047     		bx	lr
  71              	.LVL6:
  72              	.L5:
1676:FreeRTOS/tasks.c **** 				{
1677:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
  73              		.loc 1 1677 14 view .LVU18
  74 001e 0120     		movs	r0, #1
  75              	.LVL7:
1678:FreeRTOS/tasks.c **** 				}
1679:FreeRTOS/tasks.c **** 				else
1680:FreeRTOS/tasks.c **** 				{
1681:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:FreeRTOS/tasks.c **** 				}
1683:FreeRTOS/tasks.c **** 			}
1684:FreeRTOS/tasks.c **** 			else
1685:FreeRTOS/tasks.c **** 			{
1686:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 32


1688:FreeRTOS/tasks.c **** 		}
1689:FreeRTOS/tasks.c **** 		else
1690:FreeRTOS/tasks.c **** 		{
1691:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
  76              		.loc 1 1691 28 is_stmt 1 view .LVU19
1692:FreeRTOS/tasks.c **** 		}
1693:FreeRTOS/tasks.c **** 
1694:FreeRTOS/tasks.c **** 		return xReturn;
  77              		.loc 1 1694 3 view .LVU20
1695:FreeRTOS/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  78              		.loc 1 1695 2 is_stmt 0 view .LVU21
  79 0020 7047     		bx	lr
  80              	.L8:
  81 0022 00BF     		.align	2
  82              	.L7:
  83 0024 00000000 		.word	.LANCHOR0
  84 0028 00000000 		.word	.LANCHOR1
  85              		.cfi_endproc
  86              	.LFE44:
  88              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  89              		.align	1
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  94              	prvResetNextTaskUnblockTime:
  95              	.LFB68:
1696:FreeRTOS/tasks.c **** 
1697:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1699:FreeRTOS/tasks.c **** 
1700:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:FreeRTOS/tasks.c **** 
1702:FreeRTOS/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:FreeRTOS/tasks.c **** 	{
1704:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:FreeRTOS/tasks.c **** 
1706:FreeRTOS/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1708:FreeRTOS/tasks.c **** 
1709:FreeRTOS/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:FreeRTOS/tasks.c **** 		currently executing task. */
1711:FreeRTOS/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:FreeRTOS/tasks.c **** 		{
1713:FreeRTOS/tasks.c **** 			taskENTER_CRITICAL();
1714:FreeRTOS/tasks.c **** 			{
1715:FreeRTOS/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:FreeRTOS/tasks.c **** 				{
1717:FreeRTOS/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:FreeRTOS/tasks.c **** 
1719:FreeRTOS/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:FreeRTOS/tasks.c **** 					lists even if the scheduler is suspended. */
1721:FreeRTOS/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:FreeRTOS/tasks.c **** 
1724:FreeRTOS/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:FreeRTOS/tasks.c **** 					{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 33


1727:FreeRTOS/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:FreeRTOS/tasks.c **** 						but will leave the lists in the correct state for the
1729:FreeRTOS/tasks.c **** 						next yield. */
1730:FreeRTOS/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:FreeRTOS/tasks.c **** 					}
1732:FreeRTOS/tasks.c **** 					else
1733:FreeRTOS/tasks.c **** 					{
1734:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:FreeRTOS/tasks.c **** 					}
1736:FreeRTOS/tasks.c **** 				}
1737:FreeRTOS/tasks.c **** 				else
1738:FreeRTOS/tasks.c **** 				{
1739:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:FreeRTOS/tasks.c **** 				}
1741:FreeRTOS/tasks.c **** 			}
1742:FreeRTOS/tasks.c **** 			taskEXIT_CRITICAL();
1743:FreeRTOS/tasks.c **** 		}
1744:FreeRTOS/tasks.c **** 		else
1745:FreeRTOS/tasks.c **** 		{
1746:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:FreeRTOS/tasks.c **** 		}
1748:FreeRTOS/tasks.c **** 	}
1749:FreeRTOS/tasks.c **** 
1750:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:FreeRTOS/tasks.c **** 
1752:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1753:FreeRTOS/tasks.c **** 
1754:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:FreeRTOS/tasks.c **** 
1756:FreeRTOS/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:FreeRTOS/tasks.c **** 	{
1758:FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:FreeRTOS/tasks.c **** 
1762:FreeRTOS/tasks.c **** 		configASSERT( xTaskToResume );
1763:FreeRTOS/tasks.c **** 
1764:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:FreeRTOS/tasks.c **** 		provided on the following link:
1779:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:FreeRTOS/tasks.c **** 
1782:FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 34


1784:FreeRTOS/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:FreeRTOS/tasks.c **** 			{
1786:FreeRTOS/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:FreeRTOS/tasks.c **** 
1788:FreeRTOS/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:FreeRTOS/tasks.c **** 				{
1791:FreeRTOS/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:FreeRTOS/tasks.c **** 					suspended list to the ready list directly. */
1793:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:FreeRTOS/tasks.c **** 					{
1795:FreeRTOS/tasks.c **** 						xYieldRequired = pdTRUE;
1796:FreeRTOS/tasks.c **** 					}
1797:FreeRTOS/tasks.c **** 					else
1798:FreeRTOS/tasks.c **** 					{
1799:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:FreeRTOS/tasks.c **** 					}
1801:FreeRTOS/tasks.c **** 
1802:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:FreeRTOS/tasks.c **** 				}
1805:FreeRTOS/tasks.c **** 				else
1806:FreeRTOS/tasks.c **** 				{
1807:FreeRTOS/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:FreeRTOS/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:FreeRTOS/tasks.c **** 					unsuspended. */
1810:FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:FreeRTOS/tasks.c **** 				}
1812:FreeRTOS/tasks.c **** 			}
1813:FreeRTOS/tasks.c **** 			else
1814:FreeRTOS/tasks.c **** 			{
1815:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:FreeRTOS/tasks.c **** 			}
1817:FreeRTOS/tasks.c **** 		}
1818:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:FreeRTOS/tasks.c **** 
1820:FreeRTOS/tasks.c **** 		return xYieldRequired;
1821:FreeRTOS/tasks.c **** 	}
1822:FreeRTOS/tasks.c **** 
1823:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1825:FreeRTOS/tasks.c **** 
1826:FreeRTOS/tasks.c **** void vTaskStartScheduler( void )
1827:FreeRTOS/tasks.c **** {
1828:FreeRTOS/tasks.c **** BaseType_t xReturn;
1829:FreeRTOS/tasks.c **** 
1830:FreeRTOS/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:FreeRTOS/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:FreeRTOS/tasks.c **** 	{
1833:FreeRTOS/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:FreeRTOS/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:FreeRTOS/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:FreeRTOS/tasks.c **** 
1837:FreeRTOS/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:FreeRTOS/tasks.c **** 		address of the RAM then create the idle task. */
1839:FreeRTOS/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:FreeRTOS/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 35


1841:FreeRTOS/tasks.c **** 												"IDLE",
1842:FreeRTOS/tasks.c **** 												ulIdleTaskStackSize,
1843:FreeRTOS/tasks.c **** 												( void * ) NULL,
1844:FreeRTOS/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:FreeRTOS/tasks.c **** 												pxIdleTaskStackBuffer,
1846:FreeRTOS/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:FreeRTOS/tasks.c **** 
1848:FreeRTOS/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:FreeRTOS/tasks.c **** 		{
1850:FreeRTOS/tasks.c **** 			xReturn = pdPASS;
1851:FreeRTOS/tasks.c **** 		}
1852:FreeRTOS/tasks.c **** 		else
1853:FreeRTOS/tasks.c **** 		{
1854:FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
1855:FreeRTOS/tasks.c **** 		}
1856:FreeRTOS/tasks.c **** 	}
1857:FreeRTOS/tasks.c **** 	#else
1858:FreeRTOS/tasks.c **** 	{
1859:FreeRTOS/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:FreeRTOS/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:FreeRTOS/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:FreeRTOS/tasks.c **** 								( void * ) NULL,
1863:FreeRTOS/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:FreeRTOS/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:FreeRTOS/tasks.c **** 	}
1866:FreeRTOS/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:FreeRTOS/tasks.c **** 
1868:FreeRTOS/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:FreeRTOS/tasks.c **** 	{
1870:FreeRTOS/tasks.c **** 		if( xReturn == pdPASS )
1871:FreeRTOS/tasks.c **** 		{
1872:FreeRTOS/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:FreeRTOS/tasks.c **** 		}
1874:FreeRTOS/tasks.c **** 		else
1875:FreeRTOS/tasks.c **** 		{
1876:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:FreeRTOS/tasks.c **** 		}
1878:FreeRTOS/tasks.c **** 	}
1879:FreeRTOS/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:FreeRTOS/tasks.c **** 
1881:FreeRTOS/tasks.c **** 	if( xReturn == pdPASS )
1882:FreeRTOS/tasks.c **** 	{
1883:FreeRTOS/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:FreeRTOS/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:FreeRTOS/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:FreeRTOS/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:FreeRTOS/tasks.c **** 		starts to run. */
1888:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:FreeRTOS/tasks.c **** 
1890:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:FreeRTOS/tasks.c **** 		{
1892:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:FreeRTOS/tasks.c **** 			structure specific to the task that will run first. */
1894:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:FreeRTOS/tasks.c **** 		}
1896:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 36


1898:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:FreeRTOS/tasks.c **** 
1902:FreeRTOS/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:FreeRTOS/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:FreeRTOS/tasks.c **** 		the run time counter time base. */
1905:FreeRTOS/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:FreeRTOS/tasks.c **** 
1907:FreeRTOS/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:FreeRTOS/tasks.c **** 		portable interface. */
1909:FreeRTOS/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:FreeRTOS/tasks.c **** 		{
1911:FreeRTOS/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:FreeRTOS/tasks.c **** 			function will not return. */
1913:FreeRTOS/tasks.c **** 		}
1914:FreeRTOS/tasks.c **** 		else
1915:FreeRTOS/tasks.c **** 		{
1916:FreeRTOS/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:FreeRTOS/tasks.c **** 		}
1918:FreeRTOS/tasks.c **** 	}
1919:FreeRTOS/tasks.c **** 	else
1920:FreeRTOS/tasks.c **** 	{
1921:FreeRTOS/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:FreeRTOS/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:FreeRTOS/tasks.c **** 		or the timer task. */
1924:FreeRTOS/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:FreeRTOS/tasks.c **** 	}
1926:FreeRTOS/tasks.c **** 
1927:FreeRTOS/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:FreeRTOS/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:FreeRTOS/tasks.c **** 	( void ) xIdleTaskHandle;
1930:FreeRTOS/tasks.c **** }
1931:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
1932:FreeRTOS/tasks.c **** 
1933:FreeRTOS/tasks.c **** void vTaskEndScheduler( void )
1934:FreeRTOS/tasks.c **** {
1935:FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:FreeRTOS/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:FreeRTOS/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:FreeRTOS/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:FreeRTOS/tasks.c **** 	vPortEndScheduler();
1941:FreeRTOS/tasks.c **** }
1942:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1943:FreeRTOS/tasks.c **** 
1944:FreeRTOS/tasks.c **** void vTaskSuspendAll( void )
1945:FreeRTOS/tasks.c **** {
1946:FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:FreeRTOS/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:FreeRTOS/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:FreeRTOS/tasks.c **** 	http://goo.gl/wu4acr */
1950:FreeRTOS/tasks.c **** 	++uxSchedulerSuspended;
1951:FreeRTOS/tasks.c **** }
1952:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
1953:FreeRTOS/tasks.c **** 
1954:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 37


1955:FreeRTOS/tasks.c **** 
1956:FreeRTOS/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:FreeRTOS/tasks.c **** 	{
1958:FreeRTOS/tasks.c **** 	TickType_t xReturn;
1959:FreeRTOS/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:FreeRTOS/tasks.c **** 
1961:FreeRTOS/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:FreeRTOS/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:FreeRTOS/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:FreeRTOS/tasks.c **** 		running. */
1965:FreeRTOS/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:FreeRTOS/tasks.c **** 		{
1967:FreeRTOS/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:FreeRTOS/tasks.c **** 			{
1969:FreeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:FreeRTOS/tasks.c **** 			}
1971:FreeRTOS/tasks.c **** 		}
1972:FreeRTOS/tasks.c **** 		#else
1973:FreeRTOS/tasks.c **** 		{
1974:FreeRTOS/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:FreeRTOS/tasks.c **** 
1976:FreeRTOS/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:FreeRTOS/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:FreeRTOS/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:FreeRTOS/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:FreeRTOS/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:FreeRTOS/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:FreeRTOS/tasks.c **** 			{
1983:FreeRTOS/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:FreeRTOS/tasks.c **** 			}
1985:FreeRTOS/tasks.c **** 		}
1986:FreeRTOS/tasks.c **** 		#endif
1987:FreeRTOS/tasks.c **** 
1988:FreeRTOS/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:FreeRTOS/tasks.c **** 		{
1990:FreeRTOS/tasks.c **** 			xReturn = 0;
1991:FreeRTOS/tasks.c **** 		}
1992:FreeRTOS/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:FreeRTOS/tasks.c **** 		{
1994:FreeRTOS/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:FreeRTOS/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:FreeRTOS/tasks.c **** 			processed. */
1997:FreeRTOS/tasks.c **** 			xReturn = 0;
1998:FreeRTOS/tasks.c **** 		}
1999:FreeRTOS/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:FreeRTOS/tasks.c **** 		{
2001:FreeRTOS/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:FreeRTOS/tasks.c **** 			idle priority.  This path can only be reached if
2003:FreeRTOS/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:FreeRTOS/tasks.c **** 			xReturn = 0;
2005:FreeRTOS/tasks.c **** 		}
2006:FreeRTOS/tasks.c **** 		else
2007:FreeRTOS/tasks.c **** 		{
2008:FreeRTOS/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:FreeRTOS/tasks.c **** 		}
2010:FreeRTOS/tasks.c **** 
2011:FreeRTOS/tasks.c **** 		return xReturn;
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 38


2012:FreeRTOS/tasks.c **** 	}
2013:FreeRTOS/tasks.c **** 
2014:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2016:FreeRTOS/tasks.c **** 
2017:FreeRTOS/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:FreeRTOS/tasks.c **** {
2019:FreeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
2020:FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:FreeRTOS/tasks.c **** 
2022:FreeRTOS/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:FreeRTOS/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:FreeRTOS/tasks.c **** 
2026:FreeRTOS/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:FreeRTOS/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:FreeRTOS/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:FreeRTOS/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:FreeRTOS/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
2032:FreeRTOS/tasks.c **** 	{
2033:FreeRTOS/tasks.c **** 		--uxSchedulerSuspended;
2034:FreeRTOS/tasks.c **** 
2035:FreeRTOS/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:FreeRTOS/tasks.c **** 		{
2037:FreeRTOS/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:FreeRTOS/tasks.c **** 			{
2039:FreeRTOS/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:FreeRTOS/tasks.c **** 				appropriate ready list. */
2041:FreeRTOS/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:FreeRTOS/tasks.c **** 				{
2043:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:FreeRTOS/tasks.c **** 
2048:FreeRTOS/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:FreeRTOS/tasks.c **** 					task then a yield must be performed. */
2050:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:FreeRTOS/tasks.c **** 					{
2052:FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2053:FreeRTOS/tasks.c **** 					}
2054:FreeRTOS/tasks.c **** 					else
2055:FreeRTOS/tasks.c **** 					{
2056:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:FreeRTOS/tasks.c **** 					}
2058:FreeRTOS/tasks.c **** 				}
2059:FreeRTOS/tasks.c **** 
2060:FreeRTOS/tasks.c **** 				if( pxTCB != NULL )
2061:FreeRTOS/tasks.c **** 				{
2062:FreeRTOS/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:FreeRTOS/tasks.c **** 					which may have prevented the next unblock time from being
2064:FreeRTOS/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:FreeRTOS/tasks.c **** 					important for low power tickless implementations, where
2066:FreeRTOS/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:FreeRTOS/tasks.c **** 					state. */
2068:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 39


2069:FreeRTOS/tasks.c **** 				}
2070:FreeRTOS/tasks.c **** 
2071:FreeRTOS/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:FreeRTOS/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:FreeRTOS/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:FreeRTOS/tasks.c **** 				time. */
2075:FreeRTOS/tasks.c **** 				{
2076:FreeRTOS/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:FreeRTOS/tasks.c **** 
2078:FreeRTOS/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:FreeRTOS/tasks.c **** 					{
2080:FreeRTOS/tasks.c **** 						do
2081:FreeRTOS/tasks.c **** 						{
2082:FreeRTOS/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:FreeRTOS/tasks.c **** 							{
2084:FreeRTOS/tasks.c **** 								xYieldPending = pdTRUE;
2085:FreeRTOS/tasks.c **** 							}
2086:FreeRTOS/tasks.c **** 							else
2087:FreeRTOS/tasks.c **** 							{
2088:FreeRTOS/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:FreeRTOS/tasks.c **** 							}
2090:FreeRTOS/tasks.c **** 							--uxPendedCounts;
2091:FreeRTOS/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:FreeRTOS/tasks.c **** 
2093:FreeRTOS/tasks.c **** 						uxPendedTicks = 0;
2094:FreeRTOS/tasks.c **** 					}
2095:FreeRTOS/tasks.c **** 					else
2096:FreeRTOS/tasks.c **** 					{
2097:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:FreeRTOS/tasks.c **** 					}
2099:FreeRTOS/tasks.c **** 				}
2100:FreeRTOS/tasks.c **** 
2101:FreeRTOS/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:FreeRTOS/tasks.c **** 				{
2103:FreeRTOS/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:FreeRTOS/tasks.c **** 					{
2105:FreeRTOS/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:FreeRTOS/tasks.c **** 					}
2107:FreeRTOS/tasks.c **** 					#endif
2108:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:FreeRTOS/tasks.c **** 				}
2110:FreeRTOS/tasks.c **** 				else
2111:FreeRTOS/tasks.c **** 				{
2112:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:FreeRTOS/tasks.c **** 				}
2114:FreeRTOS/tasks.c **** 			}
2115:FreeRTOS/tasks.c **** 		}
2116:FreeRTOS/tasks.c **** 		else
2117:FreeRTOS/tasks.c **** 		{
2118:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:FreeRTOS/tasks.c **** 		}
2120:FreeRTOS/tasks.c **** 	}
2121:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
2122:FreeRTOS/tasks.c **** 
2123:FreeRTOS/tasks.c **** 	return xAlreadyYielded;
2124:FreeRTOS/tasks.c **** }
2125:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 40


2126:FreeRTOS/tasks.c **** 
2127:FreeRTOS/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:FreeRTOS/tasks.c **** {
2129:FreeRTOS/tasks.c **** TickType_t xTicks;
2130:FreeRTOS/tasks.c **** 
2131:FreeRTOS/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:FreeRTOS/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:FreeRTOS/tasks.c **** 	{
2134:FreeRTOS/tasks.c **** 		xTicks = xTickCount;
2135:FreeRTOS/tasks.c **** 	}
2136:FreeRTOS/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:FreeRTOS/tasks.c **** 
2138:FreeRTOS/tasks.c **** 	return xTicks;
2139:FreeRTOS/tasks.c **** }
2140:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2141:FreeRTOS/tasks.c **** 
2142:FreeRTOS/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:FreeRTOS/tasks.c **** {
2144:FreeRTOS/tasks.c **** TickType_t xReturn;
2145:FreeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:FreeRTOS/tasks.c **** 
2147:FreeRTOS/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:FreeRTOS/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:FreeRTOS/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:FreeRTOS/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:FreeRTOS/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:FreeRTOS/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:FreeRTOS/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:FreeRTOS/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:FreeRTOS/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:FreeRTOS/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:FreeRTOS/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:FreeRTOS/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:FreeRTOS/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:FreeRTOS/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:FreeRTOS/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:FreeRTOS/tasks.c **** 
2163:FreeRTOS/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:FreeRTOS/tasks.c **** 	{
2165:FreeRTOS/tasks.c **** 		xReturn = xTickCount;
2166:FreeRTOS/tasks.c **** 	}
2167:FreeRTOS/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:FreeRTOS/tasks.c **** 
2169:FreeRTOS/tasks.c **** 	return xReturn;
2170:FreeRTOS/tasks.c **** }
2171:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2172:FreeRTOS/tasks.c **** 
2173:FreeRTOS/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:FreeRTOS/tasks.c **** {
2175:FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:FreeRTOS/tasks.c **** 	BaseType_t. */
2177:FreeRTOS/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:FreeRTOS/tasks.c **** }
2179:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2180:FreeRTOS/tasks.c **** 
2181:FreeRTOS/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:FreeRTOS/tasks.c **** {
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 41


2183:FreeRTOS/tasks.c **** TCB_t *pxTCB;
2184:FreeRTOS/tasks.c **** 
2185:FreeRTOS/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:FreeRTOS/tasks.c **** 	queried. */
2187:FreeRTOS/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
2189:FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:FreeRTOS/tasks.c **** }
2191:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2192:FreeRTOS/tasks.c **** 
2193:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:FreeRTOS/tasks.c **** 
2195:FreeRTOS/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:FreeRTOS/tasks.c **** 	{
2197:FreeRTOS/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:FreeRTOS/tasks.c **** 	UBaseType_t x;
2199:FreeRTOS/tasks.c **** 	char cNextChar;
2200:FreeRTOS/tasks.c **** 
2201:FreeRTOS/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:FreeRTOS/tasks.c **** 
2203:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:FreeRTOS/tasks.c **** 		{
2205:FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:FreeRTOS/tasks.c **** 
2207:FreeRTOS/tasks.c **** 			do
2208:FreeRTOS/tasks.c **** 			{
2209:FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:FreeRTOS/tasks.c **** 
2211:FreeRTOS/tasks.c **** 				/* Check each character in the name looking for a match or
2212:FreeRTOS/tasks.c **** 				mismatch. */
2213:FreeRTOS/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:FreeRTOS/tasks.c **** 				{
2215:FreeRTOS/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:FreeRTOS/tasks.c **** 
2217:FreeRTOS/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:FreeRTOS/tasks.c **** 					{
2219:FreeRTOS/tasks.c **** 						/* Characters didn't match. */
2220:FreeRTOS/tasks.c **** 						break;
2221:FreeRTOS/tasks.c **** 					}
2222:FreeRTOS/tasks.c **** 					else if( cNextChar == 0x00 )
2223:FreeRTOS/tasks.c **** 					{
2224:FreeRTOS/tasks.c **** 						/* Both strings terminated, a match must have been
2225:FreeRTOS/tasks.c **** 						found. */
2226:FreeRTOS/tasks.c **** 						pxReturn = pxNextTCB;
2227:FreeRTOS/tasks.c **** 						break;
2228:FreeRTOS/tasks.c **** 					}
2229:FreeRTOS/tasks.c **** 					else
2230:FreeRTOS/tasks.c **** 					{
2231:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:FreeRTOS/tasks.c **** 					}
2233:FreeRTOS/tasks.c **** 				}
2234:FreeRTOS/tasks.c **** 
2235:FreeRTOS/tasks.c **** 				if( pxReturn != NULL )
2236:FreeRTOS/tasks.c **** 				{
2237:FreeRTOS/tasks.c **** 					/* The handle has been found. */
2238:FreeRTOS/tasks.c **** 					break;
2239:FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 42


2240:FreeRTOS/tasks.c **** 
2241:FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:FreeRTOS/tasks.c **** 		}
2243:FreeRTOS/tasks.c **** 		else
2244:FreeRTOS/tasks.c **** 		{
2245:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:FreeRTOS/tasks.c **** 		}
2247:FreeRTOS/tasks.c **** 
2248:FreeRTOS/tasks.c **** 		return pxReturn;
2249:FreeRTOS/tasks.c **** 	}
2250:FreeRTOS/tasks.c **** 
2251:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2253:FreeRTOS/tasks.c **** 
2254:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:FreeRTOS/tasks.c **** 
2256:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:FreeRTOS/tasks.c **** 	{
2258:FreeRTOS/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:FreeRTOS/tasks.c **** 	TCB_t* pxTCB;
2260:FreeRTOS/tasks.c **** 
2261:FreeRTOS/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:FreeRTOS/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:FreeRTOS/tasks.c **** 
2264:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2265:FreeRTOS/tasks.c **** 		{
2266:FreeRTOS/tasks.c **** 			/* Search the ready lists. */
2267:FreeRTOS/tasks.c **** 			do
2268:FreeRTOS/tasks.c **** 			{
2269:FreeRTOS/tasks.c **** 				uxQueue--;
2270:FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:FreeRTOS/tasks.c **** 
2272:FreeRTOS/tasks.c **** 				if( pxTCB != NULL )
2273:FreeRTOS/tasks.c **** 				{
2274:FreeRTOS/tasks.c **** 					/* Found the handle. */
2275:FreeRTOS/tasks.c **** 					break;
2276:FreeRTOS/tasks.c **** 				}
2277:FreeRTOS/tasks.c **** 
2278:FreeRTOS/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:FreeRTOS/tasks.c **** 
2280:FreeRTOS/tasks.c **** 			/* Search the delayed lists. */
2281:FreeRTOS/tasks.c **** 			if( pxTCB == NULL )
2282:FreeRTOS/tasks.c **** 			{
2283:FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:FreeRTOS/tasks.c **** 			}
2285:FreeRTOS/tasks.c **** 
2286:FreeRTOS/tasks.c **** 			if( pxTCB == NULL )
2287:FreeRTOS/tasks.c **** 			{
2288:FreeRTOS/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:FreeRTOS/tasks.c **** 			}
2290:FreeRTOS/tasks.c **** 
2291:FreeRTOS/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:FreeRTOS/tasks.c **** 			{
2293:FreeRTOS/tasks.c **** 				if( pxTCB == NULL )
2294:FreeRTOS/tasks.c **** 				{
2295:FreeRTOS/tasks.c **** 					/* Search the suspended list. */
2296:FreeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 43


2297:FreeRTOS/tasks.c **** 				}
2298:FreeRTOS/tasks.c **** 			}
2299:FreeRTOS/tasks.c **** 			#endif
2300:FreeRTOS/tasks.c **** 
2301:FreeRTOS/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:FreeRTOS/tasks.c **** 			{
2303:FreeRTOS/tasks.c **** 				if( pxTCB == NULL )
2304:FreeRTOS/tasks.c **** 				{
2305:FreeRTOS/tasks.c **** 					/* Search the deleted list. */
2306:FreeRTOS/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:FreeRTOS/tasks.c **** 				}
2308:FreeRTOS/tasks.c **** 			}
2309:FreeRTOS/tasks.c **** 			#endif
2310:FreeRTOS/tasks.c **** 		}
2311:FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2312:FreeRTOS/tasks.c **** 
2313:FreeRTOS/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:FreeRTOS/tasks.c **** 	}
2315:FreeRTOS/tasks.c **** 
2316:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2318:FreeRTOS/tasks.c **** 
2319:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:FreeRTOS/tasks.c **** 
2321:FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:FreeRTOS/tasks.c **** 	{
2323:FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:FreeRTOS/tasks.c **** 
2325:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2326:FreeRTOS/tasks.c **** 		{
2327:FreeRTOS/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:FreeRTOS/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:FreeRTOS/tasks.c **** 			{
2330:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:FreeRTOS/tasks.c **** 				task in the Ready state. */
2332:FreeRTOS/tasks.c **** 				do
2333:FreeRTOS/tasks.c **** 				{
2334:FreeRTOS/tasks.c **** 					uxQueue--;
2335:FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:FreeRTOS/tasks.c **** 
2337:FreeRTOS/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:FreeRTOS/tasks.c **** 
2339:FreeRTOS/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:FreeRTOS/tasks.c **** 				task in the Blocked state. */
2341:FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:FreeRTOS/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:FreeRTOS/tasks.c **** 
2344:FreeRTOS/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:FreeRTOS/tasks.c **** 				{
2346:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:FreeRTOS/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:FreeRTOS/tasks.c **** 				}
2350:FreeRTOS/tasks.c **** 				#endif
2351:FreeRTOS/tasks.c **** 
2352:FreeRTOS/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 44


2354:FreeRTOS/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:FreeRTOS/tasks.c **** 					each task in the Suspended state. */
2356:FreeRTOS/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:FreeRTOS/tasks.c **** 				}
2358:FreeRTOS/tasks.c **** 				#endif
2359:FreeRTOS/tasks.c **** 
2360:FreeRTOS/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:FreeRTOS/tasks.c **** 				{
2362:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:FreeRTOS/tasks.c **** 					{
2364:FreeRTOS/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:FreeRTOS/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:FreeRTOS/tasks.c **** 						#else
2367:FreeRTOS/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:FreeRTOS/tasks.c **** 						#endif
2369:FreeRTOS/tasks.c **** 					}
2370:FreeRTOS/tasks.c **** 				}
2371:FreeRTOS/tasks.c **** 				#else
2372:FreeRTOS/tasks.c **** 				{
2373:FreeRTOS/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:FreeRTOS/tasks.c **** 					{
2375:FreeRTOS/tasks.c **** 						*pulTotalRunTime = 0;
2376:FreeRTOS/tasks.c **** 					}
2377:FreeRTOS/tasks.c **** 				}
2378:FreeRTOS/tasks.c **** 				#endif
2379:FreeRTOS/tasks.c **** 			}
2380:FreeRTOS/tasks.c **** 			else
2381:FreeRTOS/tasks.c **** 			{
2382:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:FreeRTOS/tasks.c **** 			}
2384:FreeRTOS/tasks.c **** 		}
2385:FreeRTOS/tasks.c **** 		( void ) xTaskResumeAll();
2386:FreeRTOS/tasks.c **** 
2387:FreeRTOS/tasks.c **** 		return uxTask;
2388:FreeRTOS/tasks.c **** 	}
2389:FreeRTOS/tasks.c **** 
2390:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2392:FreeRTOS/tasks.c **** 
2393:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:FreeRTOS/tasks.c **** 
2395:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:FreeRTOS/tasks.c **** 	{
2397:FreeRTOS/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:FreeRTOS/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:FreeRTOS/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:FreeRTOS/tasks.c **** 		return xIdleTaskHandle;
2401:FreeRTOS/tasks.c **** 	}
2402:FreeRTOS/tasks.c **** 
2403:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2405:FreeRTOS/tasks.c **** 
2406:FreeRTOS/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:FreeRTOS/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:FreeRTOS/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:FreeRTOS/tasks.c **** 1. */
2410:FreeRTOS/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 45


2411:FreeRTOS/tasks.c **** 
2412:FreeRTOS/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:FreeRTOS/tasks.c **** 	{
2414:FreeRTOS/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:FreeRTOS/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:FreeRTOS/tasks.c **** 		each stepped tick. */
2417:FreeRTOS/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:FreeRTOS/tasks.c **** 		xTickCount += xTicksToJump;
2419:FreeRTOS/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:FreeRTOS/tasks.c **** 	}
2421:FreeRTOS/tasks.c **** 
2422:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2424:FreeRTOS/tasks.c **** 
2425:FreeRTOS/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:FreeRTOS/tasks.c **** 
2427:FreeRTOS/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:FreeRTOS/tasks.c **** 	{
2429:FreeRTOS/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:FreeRTOS/tasks.c **** 
2432:FreeRTOS/tasks.c **** 		configASSERT( pxTCB );
2433:FreeRTOS/tasks.c **** 
2434:FreeRTOS/tasks.c **** 		vTaskSuspendAll();
2435:FreeRTOS/tasks.c **** 		{
2436:FreeRTOS/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:FreeRTOS/tasks.c **** 			it is actually in the Blocked state. */
2438:FreeRTOS/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:FreeRTOS/tasks.c **** 			{
2440:FreeRTOS/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:FreeRTOS/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:FreeRTOS/tasks.c **** 				scheduler is suspended. */
2443:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:FreeRTOS/tasks.c **** 
2445:FreeRTOS/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:FreeRTOS/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:FreeRTOS/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:FreeRTOS/tasks.c **** 				is used. */
2449:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
2450:FreeRTOS/tasks.c **** 				{
2451:FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:FreeRTOS/tasks.c **** 					{
2453:FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:FreeRTOS/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:FreeRTOS/tasks.c **** 					}
2456:FreeRTOS/tasks.c **** 					else
2457:FreeRTOS/tasks.c **** 					{
2458:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:FreeRTOS/tasks.c **** 					}
2460:FreeRTOS/tasks.c **** 				}
2461:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
2462:FreeRTOS/tasks.c **** 
2463:FreeRTOS/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:FreeRTOS/tasks.c **** 
2466:FreeRTOS/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:FreeRTOS/tasks.c **** 				switch if preemption is turned off. */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 46


2468:FreeRTOS/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:FreeRTOS/tasks.c **** 				{
2470:FreeRTOS/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:FreeRTOS/tasks.c **** 					performed if the unblocked task has a priority that is
2472:FreeRTOS/tasks.c **** 					equal to or higher than the currently executing task. */
2473:FreeRTOS/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:FreeRTOS/tasks.c **** 					{
2475:FreeRTOS/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:FreeRTOS/tasks.c **** 						is unsuspended. */
2477:FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
2478:FreeRTOS/tasks.c **** 					}
2479:FreeRTOS/tasks.c **** 					else
2480:FreeRTOS/tasks.c **** 					{
2481:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:FreeRTOS/tasks.c **** 					}
2483:FreeRTOS/tasks.c **** 				}
2484:FreeRTOS/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:FreeRTOS/tasks.c **** 			}
2486:FreeRTOS/tasks.c **** 			else
2487:FreeRTOS/tasks.c **** 			{
2488:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:FreeRTOS/tasks.c **** 			}
2490:FreeRTOS/tasks.c **** 		}
2491:FreeRTOS/tasks.c **** 		xTaskResumeAll();
2492:FreeRTOS/tasks.c **** 
2493:FreeRTOS/tasks.c **** 		return xReturn;
2494:FreeRTOS/tasks.c **** 	}
2495:FreeRTOS/tasks.c **** 
2496:FreeRTOS/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
2498:FreeRTOS/tasks.c **** 
2499:FreeRTOS/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:FreeRTOS/tasks.c **** {
2501:FreeRTOS/tasks.c **** TCB_t * pxTCB;
2502:FreeRTOS/tasks.c **** TickType_t xItemValue;
2503:FreeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:FreeRTOS/tasks.c **** 
2505:FreeRTOS/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:FreeRTOS/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:FreeRTOS/tasks.c **** 	tasks to be unblocked. */
2508:FreeRTOS/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:FreeRTOS/tasks.c **** 	{
2511:FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:FreeRTOS/tasks.c **** 		block. */
2513:FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:FreeRTOS/tasks.c **** 
2515:FreeRTOS/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:FreeRTOS/tasks.c **** 		delayed lists if it wraps to 0. */
2517:FreeRTOS/tasks.c **** 		xTickCount = xConstTickCount;
2518:FreeRTOS/tasks.c **** 
2519:FreeRTOS/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:FreeRTOS/tasks.c **** 		{
2521:FreeRTOS/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:FreeRTOS/tasks.c **** 		}
2523:FreeRTOS/tasks.c **** 		else
2524:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 47


2525:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:FreeRTOS/tasks.c **** 		}
2527:FreeRTOS/tasks.c **** 
2528:FreeRTOS/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:FreeRTOS/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:FreeRTOS/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:FreeRTOS/tasks.c **** 		look any further down the list. */
2532:FreeRTOS/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:FreeRTOS/tasks.c **** 		{
2534:FreeRTOS/tasks.c **** 			for( ;; )
2535:FreeRTOS/tasks.c **** 			{
2536:FreeRTOS/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:FreeRTOS/tasks.c **** 				{
2538:FreeRTOS/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:FreeRTOS/tasks.c **** 					to the maximum possible value so it is extremely
2540:FreeRTOS/tasks.c **** 					unlikely that the
2541:FreeRTOS/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:FreeRTOS/tasks.c **** 					next time through. */
2543:FreeRTOS/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:FreeRTOS/tasks.c **** 					break;
2545:FreeRTOS/tasks.c **** 				}
2546:FreeRTOS/tasks.c **** 				else
2547:FreeRTOS/tasks.c **** 				{
2548:FreeRTOS/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:FreeRTOS/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:FreeRTOS/tasks.c **** 					at which the task at the head of the delayed list must
2551:FreeRTOS/tasks.c **** 					be removed from the Blocked state. */
2552:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:FreeRTOS/tasks.c **** 
2555:FreeRTOS/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:FreeRTOS/tasks.c **** 					{
2557:FreeRTOS/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:FreeRTOS/tasks.c **** 						item value is the time at which the task at the head
2559:FreeRTOS/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:FreeRTOS/tasks.c **** 						state -	so record the item value in
2561:FreeRTOS/tasks.c **** 						xNextTaskUnblockTime. */
2562:FreeRTOS/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:FreeRTOS/tasks.c **** 						break;
2564:FreeRTOS/tasks.c **** 					}
2565:FreeRTOS/tasks.c **** 					else
2566:FreeRTOS/tasks.c **** 					{
2567:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:FreeRTOS/tasks.c **** 					}
2569:FreeRTOS/tasks.c **** 
2570:FreeRTOS/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:FreeRTOS/tasks.c **** 
2573:FreeRTOS/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:FreeRTOS/tasks.c **** 					it from the event list. */
2575:FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:FreeRTOS/tasks.c **** 					{
2577:FreeRTOS/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:FreeRTOS/tasks.c **** 					}
2579:FreeRTOS/tasks.c **** 					else
2580:FreeRTOS/tasks.c **** 					{
2581:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 48


2582:FreeRTOS/tasks.c **** 					}
2583:FreeRTOS/tasks.c **** 
2584:FreeRTOS/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:FreeRTOS/tasks.c **** 					list. */
2586:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:FreeRTOS/tasks.c **** 
2588:FreeRTOS/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:FreeRTOS/tasks.c **** 					context switch if preemption is turned off. */
2590:FreeRTOS/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:FreeRTOS/tasks.c **** 					{
2592:FreeRTOS/tasks.c **** 						/* Preemption is on, but a context switch should
2593:FreeRTOS/tasks.c **** 						only be performed if the unblocked task has a
2594:FreeRTOS/tasks.c **** 						priority that is equal to or higher than the
2595:FreeRTOS/tasks.c **** 						currently executing task. */
2596:FreeRTOS/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:FreeRTOS/tasks.c **** 						{
2598:FreeRTOS/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:FreeRTOS/tasks.c **** 						}
2600:FreeRTOS/tasks.c **** 						else
2601:FreeRTOS/tasks.c **** 						{
2602:FreeRTOS/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:FreeRTOS/tasks.c **** 						}
2604:FreeRTOS/tasks.c **** 					}
2605:FreeRTOS/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:FreeRTOS/tasks.c **** 				}
2607:FreeRTOS/tasks.c **** 			}
2608:FreeRTOS/tasks.c **** 		}
2609:FreeRTOS/tasks.c **** 
2610:FreeRTOS/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:FreeRTOS/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:FreeRTOS/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:FreeRTOS/tasks.c **** 		{
2615:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:FreeRTOS/tasks.c **** 			{
2617:FreeRTOS/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:FreeRTOS/tasks.c **** 			}
2619:FreeRTOS/tasks.c **** 			else
2620:FreeRTOS/tasks.c **** 			{
2621:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:FreeRTOS/tasks.c **** 			}
2623:FreeRTOS/tasks.c **** 		}
2624:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:FreeRTOS/tasks.c **** 
2626:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:FreeRTOS/tasks.c **** 		{
2628:FreeRTOS/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:FreeRTOS/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:FreeRTOS/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:FreeRTOS/tasks.c **** 			{
2632:FreeRTOS/tasks.c **** 				vApplicationTickHook();
2633:FreeRTOS/tasks.c **** 			}
2634:FreeRTOS/tasks.c **** 			else
2635:FreeRTOS/tasks.c **** 			{
2636:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:FreeRTOS/tasks.c **** 			}
2638:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 49


2639:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:FreeRTOS/tasks.c **** 	}
2641:FreeRTOS/tasks.c **** 	else
2642:FreeRTOS/tasks.c **** 	{
2643:FreeRTOS/tasks.c **** 		++uxPendedTicks;
2644:FreeRTOS/tasks.c **** 
2645:FreeRTOS/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:FreeRTOS/tasks.c **** 		scheduler is locked. */
2647:FreeRTOS/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:FreeRTOS/tasks.c **** 		{
2649:FreeRTOS/tasks.c **** 			vApplicationTickHook();
2650:FreeRTOS/tasks.c **** 		}
2651:FreeRTOS/tasks.c **** 		#endif
2652:FreeRTOS/tasks.c **** 	}
2653:FreeRTOS/tasks.c **** 
2654:FreeRTOS/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:FreeRTOS/tasks.c **** 	{
2656:FreeRTOS/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:FreeRTOS/tasks.c **** 		{
2658:FreeRTOS/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:FreeRTOS/tasks.c **** 		}
2660:FreeRTOS/tasks.c **** 		else
2661:FreeRTOS/tasks.c **** 		{
2662:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:FreeRTOS/tasks.c **** 		}
2664:FreeRTOS/tasks.c **** 	}
2665:FreeRTOS/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:FreeRTOS/tasks.c **** 
2667:FreeRTOS/tasks.c **** 	return xSwitchRequired;
2668:FreeRTOS/tasks.c **** }
2669:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2670:FreeRTOS/tasks.c **** 
2671:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:FreeRTOS/tasks.c **** 
2673:FreeRTOS/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:FreeRTOS/tasks.c **** 	{
2675:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2676:FreeRTOS/tasks.c **** 
2677:FreeRTOS/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:FreeRTOS/tasks.c **** 		getting set. */
2679:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2680:FreeRTOS/tasks.c **** 		{
2681:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:FreeRTOS/tasks.c **** 		}
2683:FreeRTOS/tasks.c **** 		else
2684:FreeRTOS/tasks.c **** 		{
2685:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:FreeRTOS/tasks.c **** 		}
2687:FreeRTOS/tasks.c **** 
2688:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2690:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2691:FreeRTOS/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2693:FreeRTOS/tasks.c **** 	}
2694:FreeRTOS/tasks.c **** 
2695:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 50


2696:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2697:FreeRTOS/tasks.c **** 
2698:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:FreeRTOS/tasks.c **** 
2700:FreeRTOS/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:FreeRTOS/tasks.c **** 	{
2702:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2703:FreeRTOS/tasks.c **** 	TaskHookFunction_t xReturn;
2704:FreeRTOS/tasks.c **** 
2705:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2707:FreeRTOS/tasks.c **** 		{
2708:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:FreeRTOS/tasks.c **** 		}
2710:FreeRTOS/tasks.c **** 		else
2711:FreeRTOS/tasks.c **** 		{
2712:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:FreeRTOS/tasks.c **** 		}
2714:FreeRTOS/tasks.c **** 
2715:FreeRTOS/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:FreeRTOS/tasks.c **** 		the value can be accessed from an interrupt. */
2717:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
2718:FreeRTOS/tasks.c **** 		{
2719:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:FreeRTOS/tasks.c **** 		}
2721:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
2722:FreeRTOS/tasks.c **** 
2723:FreeRTOS/tasks.c **** 		return xReturn;
2724:FreeRTOS/tasks.c **** 	}
2725:FreeRTOS/tasks.c **** 
2726:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2728:FreeRTOS/tasks.c **** 
2729:FreeRTOS/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:FreeRTOS/tasks.c **** 
2731:FreeRTOS/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:FreeRTOS/tasks.c **** 	{
2733:FreeRTOS/tasks.c **** 	TCB_t *xTCB;
2734:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
2735:FreeRTOS/tasks.c **** 
2736:FreeRTOS/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:FreeRTOS/tasks.c **** 		if( xTask == NULL )
2738:FreeRTOS/tasks.c **** 		{
2739:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:FreeRTOS/tasks.c **** 		}
2741:FreeRTOS/tasks.c **** 		else
2742:FreeRTOS/tasks.c **** 		{
2743:FreeRTOS/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:FreeRTOS/tasks.c **** 		}
2745:FreeRTOS/tasks.c **** 
2746:FreeRTOS/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:FreeRTOS/tasks.c **** 		{
2748:FreeRTOS/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:FreeRTOS/tasks.c **** 		}
2750:FreeRTOS/tasks.c **** 		else
2751:FreeRTOS/tasks.c **** 		{
2752:FreeRTOS/tasks.c **** 			xReturn = pdFAIL;
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 51


2753:FreeRTOS/tasks.c **** 		}
2754:FreeRTOS/tasks.c **** 
2755:FreeRTOS/tasks.c **** 		return xReturn;
2756:FreeRTOS/tasks.c **** 	}
2757:FreeRTOS/tasks.c **** 
2758:FreeRTOS/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2760:FreeRTOS/tasks.c **** 
2761:FreeRTOS/tasks.c **** void vTaskSwitchContext( void )
2762:FreeRTOS/tasks.c **** {
2763:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:FreeRTOS/tasks.c **** 	{
2765:FreeRTOS/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:FreeRTOS/tasks.c **** 		switch. */
2767:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2768:FreeRTOS/tasks.c **** 	}
2769:FreeRTOS/tasks.c **** 	else
2770:FreeRTOS/tasks.c **** 	{
2771:FreeRTOS/tasks.c **** 		xYieldPending = pdFALSE;
2772:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:FreeRTOS/tasks.c **** 
2774:FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:FreeRTOS/tasks.c **** 		{
2776:FreeRTOS/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:FreeRTOS/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:FreeRTOS/tasks.c **** 				#else
2779:FreeRTOS/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:FreeRTOS/tasks.c **** 				#endif
2781:FreeRTOS/tasks.c **** 
2782:FreeRTOS/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:FreeRTOS/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:FreeRTOS/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:FreeRTOS/tasks.c **** 				protection here so count values are only valid until the timer
2786:FreeRTOS/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:FreeRTOS/tasks.c **** 				against suspect run time stat counter implementations - which
2788:FreeRTOS/tasks.c **** 				are provided by the application, not the kernel. */
2789:FreeRTOS/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:FreeRTOS/tasks.c **** 				{
2791:FreeRTOS/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:FreeRTOS/tasks.c **** 				}
2793:FreeRTOS/tasks.c **** 				else
2794:FreeRTOS/tasks.c **** 				{
2795:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:FreeRTOS/tasks.c **** 				}
2797:FreeRTOS/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:FreeRTOS/tasks.c **** 		}
2799:FreeRTOS/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:FreeRTOS/tasks.c **** 
2801:FreeRTOS/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:FreeRTOS/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:FreeRTOS/tasks.c **** 
2804:FreeRTOS/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:FreeRTOS/tasks.c **** 		optimised asm code. */
2806:FreeRTOS/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:FreeRTOS/tasks.c **** 
2809:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 52


2810:FreeRTOS/tasks.c **** 		{
2811:FreeRTOS/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:FreeRTOS/tasks.c **** 			structure specific to this task. */
2813:FreeRTOS/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:FreeRTOS/tasks.c **** 		}
2815:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:FreeRTOS/tasks.c **** 	}
2817:FreeRTOS/tasks.c **** }
2818:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2819:FreeRTOS/tasks.c **** 
2820:FreeRTOS/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:FreeRTOS/tasks.c **** {
2822:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
2823:FreeRTOS/tasks.c **** 
2824:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:FreeRTOS/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:FreeRTOS/tasks.c **** 
2827:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:FreeRTOS/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:FreeRTOS/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:FreeRTOS/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:FreeRTOS/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:FreeRTOS/tasks.c **** 
2833:FreeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:FreeRTOS/tasks.c **** }
2835:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2836:FreeRTOS/tasks.c **** 
2837:FreeRTOS/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:FreeRTOS/tasks.c **** {
2839:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
2840:FreeRTOS/tasks.c **** 
2841:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:FreeRTOS/tasks.c **** 	the event groups implementation. */
2843:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:FreeRTOS/tasks.c **** 
2845:FreeRTOS/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:FreeRTOS/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:FreeRTOS/tasks.c **** 	task that is not in the Blocked state. */
2848:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:FreeRTOS/tasks.c **** 
2850:FreeRTOS/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:FreeRTOS/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:FreeRTOS/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:FreeRTOS/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:FreeRTOS/tasks.c **** 	the task level). */
2855:FreeRTOS/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:FreeRTOS/tasks.c **** 
2857:FreeRTOS/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:FreeRTOS/tasks.c **** }
2859:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2860:FreeRTOS/tasks.c **** 
2861:FreeRTOS/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:FreeRTOS/tasks.c **** 
2863:FreeRTOS/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:FreeRTOS/tasks.c **** 	{
2865:FreeRTOS/tasks.c **** 		configASSERT( pxEventList );
2866:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 53


2867:FreeRTOS/tasks.c **** 		/* This function should not be called by application code hence the
2868:FreeRTOS/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:FreeRTOS/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:FreeRTOS/tasks.c **** 		it should be called with the scheduler suspended. */
2871:FreeRTOS/tasks.c **** 
2872:FreeRTOS/tasks.c **** 
2873:FreeRTOS/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:FreeRTOS/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:FreeRTOS/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:FreeRTOS/tasks.c **** 		can be used in place of vListInsert. */
2877:FreeRTOS/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:FreeRTOS/tasks.c **** 
2879:FreeRTOS/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:FreeRTOS/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:FreeRTOS/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:FreeRTOS/tasks.c **** 		{
2884:FreeRTOS/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:FreeRTOS/tasks.c **** 		}
2886:FreeRTOS/tasks.c **** 
2887:FreeRTOS/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:FreeRTOS/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:FreeRTOS/tasks.c **** 	}
2890:FreeRTOS/tasks.c **** 
2891:FreeRTOS/tasks.c **** #endif /* configUSE_TIMERS */
2892:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2893:FreeRTOS/tasks.c **** 
2894:FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:FreeRTOS/tasks.c **** {
2896:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2897:FreeRTOS/tasks.c **** BaseType_t xReturn;
2898:FreeRTOS/tasks.c **** 
2899:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:FreeRTOS/tasks.c **** 	called from a critical section within an ISR. */
2901:FreeRTOS/tasks.c **** 
2902:FreeRTOS/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:FreeRTOS/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:FreeRTOS/tasks.c **** 	the delayed list, and add it to the ready list.
2905:FreeRTOS/tasks.c **** 
2906:FreeRTOS/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:FreeRTOS/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:FreeRTOS/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:FreeRTOS/tasks.c **** 
2910:FreeRTOS/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:FreeRTOS/tasks.c **** 	pxEventList is not empty. */
2912:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:FreeRTOS/tasks.c **** 
2916:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:FreeRTOS/tasks.c **** 	{
2918:FreeRTOS/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:FreeRTOS/tasks.c **** 	}
2921:FreeRTOS/tasks.c **** 	else
2922:FreeRTOS/tasks.c **** 	{
2923:FreeRTOS/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 54


2924:FreeRTOS/tasks.c **** 		pending until the scheduler is resumed. */
2925:FreeRTOS/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:FreeRTOS/tasks.c **** 	}
2927:FreeRTOS/tasks.c **** 
2928:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:FreeRTOS/tasks.c **** 	{
2930:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:FreeRTOS/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:FreeRTOS/tasks.c **** 		it should force a context switch now. */
2933:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
2934:FreeRTOS/tasks.c **** 
2935:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2938:FreeRTOS/tasks.c **** 	}
2939:FreeRTOS/tasks.c **** 	else
2940:FreeRTOS/tasks.c **** 	{
2941:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
2942:FreeRTOS/tasks.c **** 	}
2943:FreeRTOS/tasks.c **** 
2944:FreeRTOS/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:FreeRTOS/tasks.c **** 	{
2946:FreeRTOS/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:FreeRTOS/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:FreeRTOS/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:FreeRTOS/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:FreeRTOS/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:FreeRTOS/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:FreeRTOS/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:FreeRTOS/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:FreeRTOS/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:FreeRTOS/tasks.c **** 	}
2956:FreeRTOS/tasks.c **** 	#endif
2957:FreeRTOS/tasks.c **** 
2958:FreeRTOS/tasks.c **** 	return xReturn;
2959:FreeRTOS/tasks.c **** }
2960:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
2961:FreeRTOS/tasks.c **** 
2962:FreeRTOS/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:FreeRTOS/tasks.c **** {
2964:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
2965:FreeRTOS/tasks.c **** BaseType_t xReturn;
2966:FreeRTOS/tasks.c **** 
2967:FreeRTOS/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:FreeRTOS/tasks.c **** 	the event flags implementation. */
2969:FreeRTOS/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:FreeRTOS/tasks.c **** 
2971:FreeRTOS/tasks.c **** 	/* Store the new item value in the event list. */
2972:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:FreeRTOS/tasks.c **** 
2974:FreeRTOS/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:FreeRTOS/tasks.c **** 	event flags. */
2976:FreeRTOS/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:FreeRTOS/tasks.c **** 
2980:FreeRTOS/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 55


2981:FreeRTOS/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:FreeRTOS/tasks.c **** 	lists. */
2983:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:FreeRTOS/tasks.c **** 
2986:FreeRTOS/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:FreeRTOS/tasks.c **** 	{
2988:FreeRTOS/tasks.c **** 		/* Return true if the task removed from the event list has
2989:FreeRTOS/tasks.c **** 		a higher priority than the calling task.  This allows
2990:FreeRTOS/tasks.c **** 		the calling task to know if it should force a context
2991:FreeRTOS/tasks.c **** 		switch now. */
2992:FreeRTOS/tasks.c **** 		xReturn = pdTRUE;
2993:FreeRTOS/tasks.c **** 
2994:FreeRTOS/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:FreeRTOS/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:FreeRTOS/tasks.c **** 		xYieldPending = pdTRUE;
2997:FreeRTOS/tasks.c **** 	}
2998:FreeRTOS/tasks.c **** 	else
2999:FreeRTOS/tasks.c **** 	{
3000:FreeRTOS/tasks.c **** 		xReturn = pdFALSE;
3001:FreeRTOS/tasks.c **** 	}
3002:FreeRTOS/tasks.c **** 
3003:FreeRTOS/tasks.c **** 	return xReturn;
3004:FreeRTOS/tasks.c **** }
3005:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3006:FreeRTOS/tasks.c **** 
3007:FreeRTOS/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:FreeRTOS/tasks.c **** {
3009:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3010:FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:FreeRTOS/tasks.c **** }
3013:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3014:FreeRTOS/tasks.c **** 
3015:FreeRTOS/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:FreeRTOS/tasks.c **** {
3017:FreeRTOS/tasks.c **** BaseType_t xReturn;
3018:FreeRTOS/tasks.c **** 
3019:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
3020:FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
3021:FreeRTOS/tasks.c **** 
3022:FreeRTOS/tasks.c **** 	taskENTER_CRITICAL();
3023:FreeRTOS/tasks.c **** 	{
3024:FreeRTOS/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:FreeRTOS/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:FreeRTOS/tasks.c **** 
3027:FreeRTOS/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:FreeRTOS/tasks.c **** 			{
3030:FreeRTOS/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:FreeRTOS/tasks.c **** 				but has the same result. */
3032:FreeRTOS/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
3034:FreeRTOS/tasks.c **** 			}
3035:FreeRTOS/tasks.c **** 			else
3036:FreeRTOS/tasks.c **** 		#endif
3037:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 56


3038:FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:FreeRTOS/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:FreeRTOS/tasks.c **** 			{
3041:FreeRTOS/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:FreeRTOS/tasks.c **** 				specified is the maximum block time then the task should block
3043:FreeRTOS/tasks.c **** 				indefinitely, and therefore never time out. */
3044:FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
3045:FreeRTOS/tasks.c **** 			}
3046:FreeRTOS/tasks.c **** 			else
3047:FreeRTOS/tasks.c **** 		#endif
3048:FreeRTOS/tasks.c **** 
3049:FreeRTOS/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:FreeRTOS/tasks.c **** 		{
3051:FreeRTOS/tasks.c **** 			/* The tick count is greater than the time at which
3052:FreeRTOS/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:FreeRTOS/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:FreeRTOS/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:FreeRTOS/tasks.c **** 			was called. */
3056:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
3057:FreeRTOS/tasks.c **** 		}
3058:FreeRTOS/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:FreeRTOS/tasks.c **** 		{
3060:FreeRTOS/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:FreeRTOS/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
3064:FreeRTOS/tasks.c **** 		}
3065:FreeRTOS/tasks.c **** 		else
3066:FreeRTOS/tasks.c **** 		{
3067:FreeRTOS/tasks.c **** 			xReturn = pdTRUE;
3068:FreeRTOS/tasks.c **** 		}
3069:FreeRTOS/tasks.c **** 	}
3070:FreeRTOS/tasks.c **** 	taskEXIT_CRITICAL();
3071:FreeRTOS/tasks.c **** 
3072:FreeRTOS/tasks.c **** 	return xReturn;
3073:FreeRTOS/tasks.c **** }
3074:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3075:FreeRTOS/tasks.c **** 
3076:FreeRTOS/tasks.c **** void vTaskMissedYield( void )
3077:FreeRTOS/tasks.c **** {
3078:FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
3079:FreeRTOS/tasks.c **** }
3080:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3081:FreeRTOS/tasks.c **** 
3082:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:FreeRTOS/tasks.c **** 
3084:FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:FreeRTOS/tasks.c **** 	{
3086:FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3087:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3088:FreeRTOS/tasks.c **** 
3089:FreeRTOS/tasks.c **** 		if( xTask != NULL )
3090:FreeRTOS/tasks.c **** 		{
3091:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:FreeRTOS/tasks.c **** 		}
3094:FreeRTOS/tasks.c **** 		else
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 57


3095:FreeRTOS/tasks.c **** 		{
3096:FreeRTOS/tasks.c **** 			uxReturn = 0U;
3097:FreeRTOS/tasks.c **** 		}
3098:FreeRTOS/tasks.c **** 
3099:FreeRTOS/tasks.c **** 		return uxReturn;
3100:FreeRTOS/tasks.c **** 	}
3101:FreeRTOS/tasks.c **** 
3102:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3104:FreeRTOS/tasks.c **** 
3105:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:FreeRTOS/tasks.c **** 
3107:FreeRTOS/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:FreeRTOS/tasks.c **** 	{
3109:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3110:FreeRTOS/tasks.c **** 
3111:FreeRTOS/tasks.c **** 		if( xTask != NULL )
3112:FreeRTOS/tasks.c **** 		{
3113:FreeRTOS/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:FreeRTOS/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:FreeRTOS/tasks.c **** 		}
3116:FreeRTOS/tasks.c **** 	}
3117:FreeRTOS/tasks.c **** 
3118:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:FreeRTOS/tasks.c **** 
3120:FreeRTOS/tasks.c **** /*
3121:FreeRTOS/tasks.c ****  * -----------------------------------------------------------
3122:FreeRTOS/tasks.c ****  * The Idle task.
3123:FreeRTOS/tasks.c ****  * ----------------------------------------------------------
3124:FreeRTOS/tasks.c ****  *
3125:FreeRTOS/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:FreeRTOS/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:FreeRTOS/tasks.c ****  *
3128:FreeRTOS/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:FreeRTOS/tasks.c ****  *
3130:FreeRTOS/tasks.c ****  */
3131:FreeRTOS/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:FreeRTOS/tasks.c **** {
3133:FreeRTOS/tasks.c **** 	/* Stop warnings. */
3134:FreeRTOS/tasks.c **** 	( void ) pvParameters;
3135:FreeRTOS/tasks.c **** 
3136:FreeRTOS/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:FreeRTOS/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:FreeRTOS/tasks.c **** 
3139:FreeRTOS/tasks.c **** 	for( ;; )
3140:FreeRTOS/tasks.c **** 	{
3141:FreeRTOS/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:FreeRTOS/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:FreeRTOS/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:FreeRTOS/tasks.c **** 
3145:FreeRTOS/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:FreeRTOS/tasks.c **** 		{
3147:FreeRTOS/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:FreeRTOS/tasks.c **** 			see if any other task has become available.  If we are using
3149:FreeRTOS/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:FreeRTOS/tasks.c **** 			will automatically get the processor anyway. */
3151:FreeRTOS/tasks.c **** 			taskYIELD();
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 58


3152:FreeRTOS/tasks.c **** 		}
3153:FreeRTOS/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:FreeRTOS/tasks.c **** 
3155:FreeRTOS/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:FreeRTOS/tasks.c **** 		{
3157:FreeRTOS/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:FreeRTOS/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:FreeRTOS/tasks.c **** 			to run then the idle task should yield before the end of the
3160:FreeRTOS/tasks.c **** 			timeslice.
3161:FreeRTOS/tasks.c **** 
3162:FreeRTOS/tasks.c **** 			A critical region is not required here as we are just reading from
3163:FreeRTOS/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:FreeRTOS/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:FreeRTOS/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:FreeRTOS/tasks.c **** 			{
3168:FreeRTOS/tasks.c **** 				taskYIELD();
3169:FreeRTOS/tasks.c **** 			}
3170:FreeRTOS/tasks.c **** 			else
3171:FreeRTOS/tasks.c **** 			{
3172:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:FreeRTOS/tasks.c **** 			}
3174:FreeRTOS/tasks.c **** 		}
3175:FreeRTOS/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:FreeRTOS/tasks.c **** 
3177:FreeRTOS/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:FreeRTOS/tasks.c **** 		{
3179:FreeRTOS/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:FreeRTOS/tasks.c **** 
3181:FreeRTOS/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:FreeRTOS/tasks.c **** 			allows the application designer to add background functionality
3183:FreeRTOS/tasks.c **** 			without the overhead of a separate task.
3184:FreeRTOS/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:FreeRTOS/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:FreeRTOS/tasks.c **** 			vApplicationIdleHook();
3187:FreeRTOS/tasks.c **** 		}
3188:FreeRTOS/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:FreeRTOS/tasks.c **** 
3190:FreeRTOS/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:FreeRTOS/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:FreeRTOS/tasks.c **** 		user defined low power mode	implementations require
3193:FreeRTOS/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:FreeRTOS/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:FreeRTOS/tasks.c **** 		{
3196:FreeRTOS/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:FreeRTOS/tasks.c **** 
3198:FreeRTOS/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:FreeRTOS/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:FreeRTOS/tasks.c **** 			test of the expected idle time is performed without the
3201:FreeRTOS/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:FreeRTOS/tasks.c **** 			valid. */
3203:FreeRTOS/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:FreeRTOS/tasks.c **** 
3205:FreeRTOS/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:FreeRTOS/tasks.c **** 			{
3207:FreeRTOS/tasks.c **** 				vTaskSuspendAll();
3208:FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 59


3209:FreeRTOS/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:FreeRTOS/tasks.c **** 					time can be sampled again, and this time its value can
3211:FreeRTOS/tasks.c **** 					be used. */
3212:FreeRTOS/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:FreeRTOS/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:FreeRTOS/tasks.c **** 
3215:FreeRTOS/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:FreeRTOS/tasks.c **** 					{
3217:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:FreeRTOS/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:FreeRTOS/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:FreeRTOS/tasks.c **** 					}
3221:FreeRTOS/tasks.c **** 					else
3222:FreeRTOS/tasks.c **** 					{
3223:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:FreeRTOS/tasks.c **** 					}
3225:FreeRTOS/tasks.c **** 				}
3226:FreeRTOS/tasks.c **** 				( void ) xTaskResumeAll();
3227:FreeRTOS/tasks.c **** 			}
3228:FreeRTOS/tasks.c **** 			else
3229:FreeRTOS/tasks.c **** 			{
3230:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:FreeRTOS/tasks.c **** 			}
3232:FreeRTOS/tasks.c **** 		}
3233:FreeRTOS/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:FreeRTOS/tasks.c **** 	}
3235:FreeRTOS/tasks.c **** }
3236:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3237:FreeRTOS/tasks.c **** 
3238:FreeRTOS/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:FreeRTOS/tasks.c **** 
3240:FreeRTOS/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:FreeRTOS/tasks.c **** 	{
3242:FreeRTOS/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:FreeRTOS/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:FreeRTOS/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:FreeRTOS/tasks.c **** 
3246:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:FreeRTOS/tasks.c **** 		{
3248:FreeRTOS/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3250:FreeRTOS/tasks.c **** 		}
3251:FreeRTOS/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:FreeRTOS/tasks.c **** 		{
3253:FreeRTOS/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:FreeRTOS/tasks.c **** 			eReturn = eAbortSleep;
3255:FreeRTOS/tasks.c **** 		}
3256:FreeRTOS/tasks.c **** 		else
3257:FreeRTOS/tasks.c **** 		{
3258:FreeRTOS/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:FreeRTOS/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:FreeRTOS/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:FreeRTOS/tasks.c **** 			interrupts. */
3262:FreeRTOS/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:FreeRTOS/tasks.c **** 			{
3264:FreeRTOS/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 60


3266:FreeRTOS/tasks.c **** 			else
3267:FreeRTOS/tasks.c **** 			{
3268:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:FreeRTOS/tasks.c **** 			}
3270:FreeRTOS/tasks.c **** 		}
3271:FreeRTOS/tasks.c **** 
3272:FreeRTOS/tasks.c **** 		return eReturn;
3273:FreeRTOS/tasks.c **** 	}
3274:FreeRTOS/tasks.c **** 
3275:FreeRTOS/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3277:FreeRTOS/tasks.c **** 
3278:FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:FreeRTOS/tasks.c **** 
3280:FreeRTOS/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:FreeRTOS/tasks.c **** 	{
3282:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3283:FreeRTOS/tasks.c **** 
3284:FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:FreeRTOS/tasks.c **** 		{
3286:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:FreeRTOS/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:FreeRTOS/tasks.c **** 		}
3289:FreeRTOS/tasks.c **** 	}
3290:FreeRTOS/tasks.c **** 
3291:FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3293:FreeRTOS/tasks.c **** 
3294:FreeRTOS/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:FreeRTOS/tasks.c **** 
3296:FreeRTOS/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:FreeRTOS/tasks.c **** 	{
3298:FreeRTOS/tasks.c **** 	void *pvReturn = NULL;
3299:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3300:FreeRTOS/tasks.c **** 
3301:FreeRTOS/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:FreeRTOS/tasks.c **** 		{
3303:FreeRTOS/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:FreeRTOS/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:FreeRTOS/tasks.c **** 		}
3306:FreeRTOS/tasks.c **** 		else
3307:FreeRTOS/tasks.c **** 		{
3308:FreeRTOS/tasks.c **** 			pvReturn = NULL;
3309:FreeRTOS/tasks.c **** 		}
3310:FreeRTOS/tasks.c **** 
3311:FreeRTOS/tasks.c **** 		return pvReturn;
3312:FreeRTOS/tasks.c **** 	}
3313:FreeRTOS/tasks.c **** 
3314:FreeRTOS/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3316:FreeRTOS/tasks.c **** 
3317:FreeRTOS/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:FreeRTOS/tasks.c **** 
3319:FreeRTOS/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:FreeRTOS/tasks.c **** 	{
3321:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3322:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 61


3323:FreeRTOS/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:FreeRTOS/tasks.c **** 		the calling task. */
3325:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:FreeRTOS/tasks.c **** 
3327:FreeRTOS/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:FreeRTOS/tasks.c **** 	}
3329:FreeRTOS/tasks.c **** 
3330:FreeRTOS/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3332:FreeRTOS/tasks.c **** 
3333:FreeRTOS/tasks.c **** static void prvInitialiseTaskLists( void )
3334:FreeRTOS/tasks.c **** {
3335:FreeRTOS/tasks.c **** UBaseType_t uxPriority;
3336:FreeRTOS/tasks.c **** 
3337:FreeRTOS/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:FreeRTOS/tasks.c **** 	{
3339:FreeRTOS/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:FreeRTOS/tasks.c **** 	}
3341:FreeRTOS/tasks.c **** 
3342:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:FreeRTOS/tasks.c **** 
3346:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:FreeRTOS/tasks.c **** 	{
3348:FreeRTOS/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:FreeRTOS/tasks.c **** 	}
3350:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:FreeRTOS/tasks.c **** 
3352:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:FreeRTOS/tasks.c **** 	{
3354:FreeRTOS/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:FreeRTOS/tasks.c **** 	}
3356:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:FreeRTOS/tasks.c **** 
3358:FreeRTOS/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:FreeRTOS/tasks.c **** 	using list2. */
3360:FreeRTOS/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:FreeRTOS/tasks.c **** }
3363:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3364:FreeRTOS/tasks.c **** 
3365:FreeRTOS/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:FreeRTOS/tasks.c **** {
3367:FreeRTOS/tasks.c **** 
3368:FreeRTOS/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:FreeRTOS/tasks.c **** 
3370:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:FreeRTOS/tasks.c **** 	{
3372:FreeRTOS/tasks.c **** 		BaseType_t xListIsEmpty;
3373:FreeRTOS/tasks.c **** 
3374:FreeRTOS/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:FreeRTOS/tasks.c **** 		too often in the idle task. */
3376:FreeRTOS/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:FreeRTOS/tasks.c **** 		{
3378:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
3379:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 62


3380:FreeRTOS/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:FreeRTOS/tasks.c **** 			}
3382:FreeRTOS/tasks.c **** 			( void ) xTaskResumeAll();
3383:FreeRTOS/tasks.c **** 
3384:FreeRTOS/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:FreeRTOS/tasks.c **** 			{
3386:FreeRTOS/tasks.c **** 				TCB_t *pxTCB;
3387:FreeRTOS/tasks.c **** 
3388:FreeRTOS/tasks.c **** 				taskENTER_CRITICAL();
3389:FreeRTOS/tasks.c **** 				{
3390:FreeRTOS/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:FreeRTOS/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:FreeRTOS/tasks.c **** 				}
3395:FreeRTOS/tasks.c **** 				taskEXIT_CRITICAL();
3396:FreeRTOS/tasks.c **** 
3397:FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:FreeRTOS/tasks.c **** 			}
3399:FreeRTOS/tasks.c **** 			else
3400:FreeRTOS/tasks.c **** 			{
3401:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:FreeRTOS/tasks.c **** 			}
3403:FreeRTOS/tasks.c **** 		}
3404:FreeRTOS/tasks.c **** 	}
3405:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:FreeRTOS/tasks.c **** }
3407:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3408:FreeRTOS/tasks.c **** 
3409:FreeRTOS/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:FreeRTOS/tasks.c **** 
3411:FreeRTOS/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:FreeRTOS/tasks.c **** 	{
3413:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3414:FreeRTOS/tasks.c **** 
3415:FreeRTOS/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:FreeRTOS/tasks.c **** 
3418:FreeRTOS/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:FreeRTOS/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:FreeRTOS/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:FreeRTOS/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:FreeRTOS/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:FreeRTOS/tasks.c **** 
3424:FreeRTOS/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:FreeRTOS/tasks.c **** 		{
3426:FreeRTOS/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:FreeRTOS/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:FreeRTOS/tasks.c **** 			being in the Blocked state. */
3429:FreeRTOS/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:FreeRTOS/tasks.c **** 			{
3431:FreeRTOS/tasks.c **** 				vTaskSuspendAll();
3432:FreeRTOS/tasks.c **** 				{
3433:FreeRTOS/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:FreeRTOS/tasks.c **** 					{
3435:FreeRTOS/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 63


3437:FreeRTOS/tasks.c **** 				}
3438:FreeRTOS/tasks.c **** 				xTaskResumeAll();
3439:FreeRTOS/tasks.c **** 			}
3440:FreeRTOS/tasks.c **** 		}
3441:FreeRTOS/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:FreeRTOS/tasks.c **** 
3443:FreeRTOS/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:FreeRTOS/tasks.c **** 		{
3445:FreeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:FreeRTOS/tasks.c **** 		}
3447:FreeRTOS/tasks.c **** 		#else
3448:FreeRTOS/tasks.c **** 		{
3449:FreeRTOS/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:FreeRTOS/tasks.c **** 		}
3451:FreeRTOS/tasks.c **** 		#endif
3452:FreeRTOS/tasks.c **** 
3453:FreeRTOS/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:FreeRTOS/tasks.c **** 		{
3455:FreeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:FreeRTOS/tasks.c **** 		}
3457:FreeRTOS/tasks.c **** 		#else
3458:FreeRTOS/tasks.c **** 		{
3459:FreeRTOS/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:FreeRTOS/tasks.c **** 		}
3461:FreeRTOS/tasks.c **** 		#endif
3462:FreeRTOS/tasks.c **** 
3463:FreeRTOS/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:FreeRTOS/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:FreeRTOS/tasks.c **** 		just set to whatever is passed in. */
3466:FreeRTOS/tasks.c **** 		if( eState != eInvalid )
3467:FreeRTOS/tasks.c **** 		{
3468:FreeRTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:FreeRTOS/tasks.c **** 		}
3470:FreeRTOS/tasks.c **** 		else
3471:FreeRTOS/tasks.c **** 		{
3472:FreeRTOS/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:FreeRTOS/tasks.c **** 		}
3474:FreeRTOS/tasks.c **** 
3475:FreeRTOS/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:FreeRTOS/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:FreeRTOS/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:FreeRTOS/tasks.c **** 		{
3479:FreeRTOS/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:FreeRTOS/tasks.c **** 			{
3481:FreeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:FreeRTOS/tasks.c **** 			}
3483:FreeRTOS/tasks.c **** 			#else
3484:FreeRTOS/tasks.c **** 			{
3485:FreeRTOS/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:FreeRTOS/tasks.c **** 			}
3487:FreeRTOS/tasks.c **** 			#endif
3488:FreeRTOS/tasks.c **** 		}
3489:FreeRTOS/tasks.c **** 		else
3490:FreeRTOS/tasks.c **** 		{
3491:FreeRTOS/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:FreeRTOS/tasks.c **** 		}
3493:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 64


3494:FreeRTOS/tasks.c **** 
3495:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3497:FreeRTOS/tasks.c **** 
3498:FreeRTOS/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:FreeRTOS/tasks.c **** 
3500:FreeRTOS/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:FreeRTOS/tasks.c **** 	{
3502:FreeRTOS/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:FreeRTOS/tasks.c **** 	UBaseType_t uxTask = 0;
3504:FreeRTOS/tasks.c **** 
3505:FreeRTOS/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:FreeRTOS/tasks.c **** 		{
3507:FreeRTOS/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:FreeRTOS/tasks.c **** 
3509:FreeRTOS/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:FreeRTOS/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:FreeRTOS/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:FreeRTOS/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:FreeRTOS/tasks.c **** 			do
3514:FreeRTOS/tasks.c **** 			{
3515:FreeRTOS/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:FreeRTOS/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:FreeRTOS/tasks.c **** 				uxTask++;
3518:FreeRTOS/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:FreeRTOS/tasks.c **** 		}
3520:FreeRTOS/tasks.c **** 		else
3521:FreeRTOS/tasks.c **** 		{
3522:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:FreeRTOS/tasks.c **** 		}
3524:FreeRTOS/tasks.c **** 
3525:FreeRTOS/tasks.c **** 		return uxTask;
3526:FreeRTOS/tasks.c **** 	}
3527:FreeRTOS/tasks.c **** 
3528:FreeRTOS/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3530:FreeRTOS/tasks.c **** 
3531:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:FreeRTOS/tasks.c **** 
3533:FreeRTOS/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:FreeRTOS/tasks.c **** 	{
3535:FreeRTOS/tasks.c **** 	uint32_t ulCount = 0U;
3536:FreeRTOS/tasks.c **** 
3537:FreeRTOS/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:FreeRTOS/tasks.c **** 		{
3539:FreeRTOS/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:FreeRTOS/tasks.c **** 			ulCount++;
3541:FreeRTOS/tasks.c **** 		}
3542:FreeRTOS/tasks.c **** 
3543:FreeRTOS/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:FreeRTOS/tasks.c **** 
3545:FreeRTOS/tasks.c **** 		return ( uint16_t ) ulCount;
3546:FreeRTOS/tasks.c **** 	}
3547:FreeRTOS/tasks.c **** 
3548:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3550:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 65


3551:FreeRTOS/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:FreeRTOS/tasks.c **** 
3553:FreeRTOS/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:FreeRTOS/tasks.c **** 	{
3555:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
3556:FreeRTOS/tasks.c **** 	uint8_t *pucEndOfStack;
3557:FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
3558:FreeRTOS/tasks.c **** 
3559:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:FreeRTOS/tasks.c **** 
3561:FreeRTOS/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:FreeRTOS/tasks.c **** 		{
3563:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:FreeRTOS/tasks.c **** 		}
3565:FreeRTOS/tasks.c **** 		#else
3566:FreeRTOS/tasks.c **** 		{
3567:FreeRTOS/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:FreeRTOS/tasks.c **** 		}
3569:FreeRTOS/tasks.c **** 		#endif
3570:FreeRTOS/tasks.c **** 
3571:FreeRTOS/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:FreeRTOS/tasks.c **** 
3573:FreeRTOS/tasks.c **** 		return uxReturn;
3574:FreeRTOS/tasks.c **** 	}
3575:FreeRTOS/tasks.c **** 
3576:FreeRTOS/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3578:FreeRTOS/tasks.c **** 
3579:FreeRTOS/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:FreeRTOS/tasks.c **** 
3581:FreeRTOS/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:FreeRTOS/tasks.c **** 	{
3583:FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:FreeRTOS/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:FreeRTOS/tasks.c **** 		want to allocate and clean RAM statically. */
3586:FreeRTOS/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:FreeRTOS/tasks.c **** 
3588:FreeRTOS/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:FreeRTOS/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:FreeRTOS/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:FreeRTOS/tasks.c **** 		{
3592:FreeRTOS/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:FreeRTOS/tasks.c **** 		}
3594:FreeRTOS/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:FreeRTOS/tasks.c **** 
3596:FreeRTOS/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:FreeRTOS/tasks.c **** 		{
3598:FreeRTOS/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:FreeRTOS/tasks.c **** 			the stack and TCB. */
3600:FreeRTOS/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:FreeRTOS/tasks.c **** 			vPortFree( pxTCB );
3602:FreeRTOS/tasks.c **** 		}
3603:FreeRTOS/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:FreeRTOS/tasks.c **** 		{
3605:FreeRTOS/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:FreeRTOS/tasks.c **** 			check what was statically allocated before trying to free the
3607:FreeRTOS/tasks.c **** 			memory. */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 66


3608:FreeRTOS/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:FreeRTOS/tasks.c **** 			{
3610:FreeRTOS/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:FreeRTOS/tasks.c **** 				must be freed. */
3612:FreeRTOS/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
3614:FreeRTOS/tasks.c **** 			}
3615:FreeRTOS/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:FreeRTOS/tasks.c **** 			{
3617:FreeRTOS/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:FreeRTOS/tasks.c **** 				only memory that must be freed. */
3619:FreeRTOS/tasks.c **** 				vPortFree( pxTCB );
3620:FreeRTOS/tasks.c **** 			}
3621:FreeRTOS/tasks.c **** 			else
3622:FreeRTOS/tasks.c **** 			{
3623:FreeRTOS/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:FreeRTOS/tasks.c **** 				nothing needs to be freed. */
3625:FreeRTOS/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:FreeRTOS/tasks.c **** 			}
3628:FreeRTOS/tasks.c **** 		}
3629:FreeRTOS/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:FreeRTOS/tasks.c **** 	}
3631:FreeRTOS/tasks.c **** 
3632:FreeRTOS/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3634:FreeRTOS/tasks.c **** 
3635:FreeRTOS/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:FreeRTOS/tasks.c **** {
  96              		.loc 1 3636 1 is_stmt 1 view -0
  97              		.cfi_startproc
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100              		@ link register save eliminated.
3637:FreeRTOS/tasks.c **** TCB_t *pxTCB;
 101              		.loc 1 3637 1 view .LVU23
3638:FreeRTOS/tasks.c **** 
3639:FreeRTOS/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 102              		.loc 1 3639 2 view .LVU24
 103              		.loc 1 3639 6 is_stmt 0 view .LVU25
 104 0000 084B     		ldr	r3, .L12
 105 0002 1B68     		ldr	r3, [r3]
 106 0004 1B68     		ldr	r3, [r3]
 107              		.loc 1 3639 45 view .LVU26
 108 0006 23B9     		cbnz	r3, .L10
3640:FreeRTOS/tasks.c **** 	{
3641:FreeRTOS/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:FreeRTOS/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:FreeRTOS/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:FreeRTOS/tasks.c **** 		there is an item in the delayed list. */
3645:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 109              		.loc 1 3645 3 is_stmt 1 view .LVU27
 110              		.loc 1 3645 24 is_stmt 0 view .LVU28
 111 0008 074B     		ldr	r3, .L12+4
 112 000a 4FF0FF32 		mov	r2, #-1
 113 000e 1A60     		str	r2, [r3]
 114 0010 7047     		bx	lr
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 67


 115              	.L10:
3646:FreeRTOS/tasks.c **** 	}
3647:FreeRTOS/tasks.c **** 	else
3648:FreeRTOS/tasks.c **** 	{
3649:FreeRTOS/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:FreeRTOS/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:FreeRTOS/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:FreeRTOS/tasks.c **** 		from the Blocked state. */
3653:FreeRTOS/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 116              		.loc 1 3653 3 is_stmt 1 view .LVU29
 117              		.loc 1 3653 27 is_stmt 0 view .LVU30
 118 0012 044B     		ldr	r3, .L12
 119 0014 1B68     		ldr	r3, [r3]
 120 0016 DB68     		ldr	r3, [r3, #12]
 121              		.loc 1 3653 13 view .LVU31
 122 0018 DB68     		ldr	r3, [r3, #12]
 123              	.LVL8:
3654:FreeRTOS/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 124              		.loc 1 3654 3 is_stmt 1 view .LVU32
 125              		.loc 1 3654 26 is_stmt 0 view .LVU33
 126 001a 5A68     		ldr	r2, [r3, #4]
 127              		.loc 1 3654 24 view .LVU34
 128 001c 024B     		ldr	r3, .L12+4
 129              	.LVL9:
 130              		.loc 1 3654 24 view .LVU35
 131 001e 1A60     		str	r2, [r3]
3655:FreeRTOS/tasks.c **** 	}
3656:FreeRTOS/tasks.c **** }
 132              		.loc 1 3656 1 view .LVU36
 133 0020 7047     		bx	lr
 134              	.L13:
 135 0022 00BF     		.align	2
 136              	.L12:
 137 0024 00000000 		.word	.LANCHOR2
 138 0028 00000000 		.word	.LANCHOR3
 139              		.cfi_endproc
 140              	.LFE68:
 142              		.section	.text.prvDeleteTCB,"ax",%progbits
 143              		.align	1
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 148              	prvDeleteTCB:
 149              	.LVL10:
 150              	.LFB67:
3582:FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 151              		.loc 1 3582 2 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
3582:FreeRTOS/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 155              		.loc 1 3582 2 is_stmt 0 view .LVU38
 156 0000 10B5     		push	{r4, lr}
 157              	.LCFI0:
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 4, -8
 160              		.cfi_offset 14, -4
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 68


 161 0002 0446     		mov	r4, r0
3586:FreeRTOS/tasks.c **** 
 162              		.loc 1 3586 3 is_stmt 1 view .LVU39
3600:FreeRTOS/tasks.c **** 			vPortFree( pxTCB );
 163              		.loc 1 3600 4 view .LVU40
 164 0004 006B     		ldr	r0, [r0, #48]
 165              	.LVL11:
3600:FreeRTOS/tasks.c **** 			vPortFree( pxTCB );
 166              		.loc 1 3600 4 is_stmt 0 view .LVU41
 167 0006 FFF7FEFF 		bl	vPortFree
 168              	.LVL12:
3601:FreeRTOS/tasks.c **** 		}
 169              		.loc 1 3601 4 is_stmt 1 view .LVU42
 170 000a 2046     		mov	r0, r4
 171 000c FFF7FEFF 		bl	vPortFree
 172              	.LVL13:
3630:FreeRTOS/tasks.c **** 
 173              		.loc 1 3630 2 is_stmt 0 view .LVU43
 174 0010 10BD     		pop	{r4, pc}
3630:FreeRTOS/tasks.c **** 
 175              		.loc 1 3630 2 view .LVU44
 176              		.cfi_endproc
 177              	.LFE67:
 179              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 180              		.align	1
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 185              	prvInitialiseNewTask:
 186              	.LVL14:
 187              	.LFB35:
 775:FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 188              		.loc 1 775 1 is_stmt 1 view -0
 189              		.cfi_startproc
 190              		@ args = 16, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 775:FreeRTOS/tasks.c **** StackType_t *pxTopOfStack;
 192              		.loc 1 775 1 is_stmt 0 view .LVU46
 193 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 194              	.LCFI1:
 195              		.cfi_def_cfa_offset 32
 196              		.cfi_offset 4, -32
 197              		.cfi_offset 5, -28
 198              		.cfi_offset 6, -24
 199              		.cfi_offset 7, -20
 200              		.cfi_offset 8, -16
 201              		.cfi_offset 9, -12
 202              		.cfi_offset 10, -8
 203              		.cfi_offset 14, -4
 204 0004 0746     		mov	r7, r0
 205 0006 9846     		mov	r8, r3
 206 0008 089D     		ldr	r5, [sp, #32]
 207 000a DDF82490 		ldr	r9, [sp, #36]
 208 000e 0A9C     		ldr	r4, [sp, #40]
 776:FreeRTOS/tasks.c **** UBaseType_t x;
 209              		.loc 1 776 1 is_stmt 1 view .LVU47
 777:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 69


 210              		.loc 1 777 1 view .LVU48
 807:FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 211              		.loc 1 807 3 view .LVU49
 807:FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 212              		.loc 1 807 26 is_stmt 0 view .LVU50
 213 0010 266B     		ldr	r6, [r4, #48]
 807:FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 214              		.loc 1 807 36 view .LVU51
 215 0012 02F18042 		add	r2, r2, #1073741824
 216              	.LVL15:
 807:FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 217              		.loc 1 807 36 view .LVU52
 218 0016 013A     		subs	r2, r2, #1
 219              	.LVL16:
 807:FreeRTOS/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 220              		.loc 1 807 16 view .LVU53
 221 0018 06EB8206 		add	r6, r6, r2, lsl #2
 222              	.LVL17:
 808:FreeRTOS/tasks.c **** 
 223              		.loc 1 808 3 is_stmt 1 view .LVU54
 808:FreeRTOS/tasks.c **** 
 224              		.loc 1 808 81 is_stmt 0 view .LVU55
 225 001c 26F00706 		bic	r6, r6, #7
 226              	.LVL18:
 811:FreeRTOS/tasks.c **** 	}
 227              		.loc 1 811 124 is_stmt 1 view .LVU56
 827:FreeRTOS/tasks.c **** 	{
 228              		.loc 1 827 2 view .LVU57
 827:FreeRTOS/tasks.c **** 	{
 229              		.loc 1 827 9 is_stmt 0 view .LVU58
 230 0020 4FF0000C 		mov	ip, #0
 231              	.LVL19:
 232              	.L17:
 827:FreeRTOS/tasks.c **** 	{
 233              		.loc 1 827 30 is_stmt 1 discriminator 1 view .LVU59
 827:FreeRTOS/tasks.c **** 	{
 234              		.loc 1 827 2 is_stmt 0 discriminator 1 view .LVU60
 235 0024 BCF10F0F 		cmp	ip, #15
 236 0028 0BD8     		bhi	.L18
 829:FreeRTOS/tasks.c **** 
 237              		.loc 1 829 3 is_stmt 1 view .LVU61
 829:FreeRTOS/tasks.c **** 
 238              		.loc 1 829 37 is_stmt 0 view .LVU62
 239 002a 11F80C20 		ldrb	r2, [r1, ip]	@ zero_extendqisi2
 829:FreeRTOS/tasks.c **** 
 240              		.loc 1 829 29 view .LVU63
 241 002e 04EB0C03 		add	r3, r4, ip
 242 0032 83F83420 		strb	r2, [r3, #52]
 834:FreeRTOS/tasks.c **** 		{
 243              		.loc 1 834 3 is_stmt 1 view .LVU64
 834:FreeRTOS/tasks.c **** 		{
 244              		.loc 1 834 13 is_stmt 0 view .LVU65
 245 0036 11F80C30 		ldrb	r3, [r1, ip]	@ zero_extendqisi2
 834:FreeRTOS/tasks.c **** 		{
 246              		.loc 1 834 5 view .LVU66
 247 003a 13B1     		cbz	r3, .L18
 840:FreeRTOS/tasks.c **** 		}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 70


 248              		.loc 1 840 28 is_stmt 1 discriminator 2 view .LVU67
 827:FreeRTOS/tasks.c **** 	{
 249              		.loc 1 827 75 discriminator 2 view .LVU68
 827:FreeRTOS/tasks.c **** 	{
 250              		.loc 1 827 76 is_stmt 0 discriminator 2 view .LVU69
 251 003c 0CF1010C 		add	ip, ip, #1
 252              	.LVL20:
 827:FreeRTOS/tasks.c **** 	{
 253              		.loc 1 827 76 discriminator 2 view .LVU70
 254 0040 F0E7     		b	.L17
 255              	.L18:
 846:FreeRTOS/tasks.c **** 
 256              		.loc 1 846 2 is_stmt 1 view .LVU71
 846:FreeRTOS/tasks.c **** 
 257              		.loc 1 846 54 is_stmt 0 view .LVU72
 258 0042 0023     		movs	r3, #0
 259 0044 84F84330 		strb	r3, [r4, #67]
 850:FreeRTOS/tasks.c **** 	{
 260              		.loc 1 850 2 is_stmt 1 view .LVU73
 850:FreeRTOS/tasks.c **** 	{
 261              		.loc 1 850 4 is_stmt 0 view .LVU74
 262 0048 042D     		cmp	r5, #4
 263 004a 00D9     		bls	.L20
 852:FreeRTOS/tasks.c **** 	}
 264              		.loc 1 852 14 view .LVU75
 265 004c 0425     		movs	r5, #4
 266              	.L20:
 267              	.LVL21:
 856:FreeRTOS/tasks.c **** 	}
 268              		.loc 1 856 27 is_stmt 1 view .LVU76
 859:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 269              		.loc 1 859 2 view .LVU77
 859:FreeRTOS/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 270              		.loc 1 859 23 is_stmt 0 view .LVU78
 271 004e E562     		str	r5, [r4, #44]
 862:FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 272              		.loc 1 862 3 is_stmt 1 view .LVU79
 862:FreeRTOS/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 273              		.loc 1 862 28 is_stmt 0 view .LVU80
 274 0050 6564     		str	r5, [r4, #68]
 863:FreeRTOS/tasks.c **** 	}
 275              		.loc 1 863 3 is_stmt 1 view .LVU81
 863:FreeRTOS/tasks.c **** 	}
 276              		.loc 1 863 27 is_stmt 0 view .LVU82
 277 0052 4FF0000A 		mov	r10, #0
 278 0056 C4F848A0 		str	r10, [r4, #72]
 867:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 279              		.loc 1 867 2 is_stmt 1 view .LVU83
 280 005a 201D     		adds	r0, r4, #4
 281              	.LVL22:
 867:FreeRTOS/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 282              		.loc 1 867 2 is_stmt 0 view .LVU84
 283 005c FFF7FEFF 		bl	vListInitialiseItem
 284              	.LVL23:
 868:FreeRTOS/tasks.c **** 
 285              		.loc 1 868 2 is_stmt 1 view .LVU85
 286 0060 04F11800 		add	r0, r4, #24
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 71


 287 0064 FFF7FEFF 		bl	vListInitialiseItem
 288              	.LVL24:
 872:FreeRTOS/tasks.c **** 
 289              		.loc 1 872 2 view .LVU86
 290 0068 2461     		str	r4, [r4, #16]
 875:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 291              		.loc 1 875 2 view .LVU87
 292 006a C5F10505 		rsb	r5, r5, #5
 293              	.LVL25:
 875:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 294              		.loc 1 875 2 is_stmt 0 view .LVU88
 295 006e A561     		str	r5, [r4, #24]
 876:FreeRTOS/tasks.c **** 
 296              		.loc 1 876 2 is_stmt 1 view .LVU89
 297 0070 6462     		str	r4, [r4, #36]
 903:FreeRTOS/tasks.c **** 	}
 298              		.loc 1 903 3 view .LVU90
 918:FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 299              		.loc 1 918 3 view .LVU91
 918:FreeRTOS/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 300              		.loc 1 918 29 is_stmt 0 view .LVU92
 301 0072 C4F84CA0 		str	r10, [r4, #76]
 919:FreeRTOS/tasks.c **** 	}
 302              		.loc 1 919 3 is_stmt 1 view .LVU93
 919:FreeRTOS/tasks.c **** 	}
 303              		.loc 1 919 27 is_stmt 0 view .LVU94
 304 0076 84F850A0 		strb	r10, [r4, #80]
 946:FreeRTOS/tasks.c **** 	}
 305              		.loc 1 946 3 is_stmt 1 view .LVU95
 946:FreeRTOS/tasks.c **** 	}
 306              		.loc 1 946 28 is_stmt 0 view .LVU96
 307 007a 4246     		mov	r2, r8
 308 007c 3946     		mov	r1, r7
 309 007e 3046     		mov	r0, r6
 310 0080 FFF7FEFF 		bl	pxPortInitialiseStack
 311              	.LVL26:
 946:FreeRTOS/tasks.c **** 	}
 312              		.loc 1 946 26 view .LVU97
 313 0084 2060     		str	r0, [r4]
 950:FreeRTOS/tasks.c **** 	{
 314              		.loc 1 950 2 is_stmt 1 view .LVU98
 950:FreeRTOS/tasks.c **** 	{
 315              		.loc 1 950 4 is_stmt 0 view .LVU99
 316 0086 B9F1000F 		cmp	r9, #0
 317 008a 01D0     		beq	.L16
 954:FreeRTOS/tasks.c **** 	}
 318              		.loc 1 954 3 is_stmt 1 view .LVU100
 954:FreeRTOS/tasks.c **** 	}
 319              		.loc 1 954 18 is_stmt 0 view .LVU101
 320 008c C9F80040 		str	r4, [r9]
 958:FreeRTOS/tasks.c **** 	}
 321              		.loc 1 958 27 is_stmt 1 view .LVU102
 322              	.L16:
 960:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 323              		.loc 1 960 1 is_stmt 0 view .LVU103
 324 0090 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 960:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 72


 325              		.loc 1 960 1 view .LVU104
 326              		.cfi_endproc
 327              	.LFE35:
 329              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 330              		.align	1
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 335              	prvInitialiseTaskLists:
 336              	.LFB65:
3334:FreeRTOS/tasks.c **** UBaseType_t uxPriority;
 337              		.loc 1 3334 1 is_stmt 1 view -0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341 0000 38B5     		push	{r3, r4, r5, lr}
 342              	.LCFI2:
 343              		.cfi_def_cfa_offset 16
 344              		.cfi_offset 3, -16
 345              		.cfi_offset 4, -12
 346              		.cfi_offset 5, -8
 347              		.cfi_offset 14, -4
3335:FreeRTOS/tasks.c **** 
 348              		.loc 1 3335 1 view .LVU106
3337:FreeRTOS/tasks.c **** 	{
 349              		.loc 1 3337 2 view .LVU107
 350              	.LVL27:
3337:FreeRTOS/tasks.c **** 	{
 351              		.loc 1 3337 18 is_stmt 0 view .LVU108
 352 0002 0024     		movs	r4, #0
3337:FreeRTOS/tasks.c **** 	{
 353              		.loc 1 3337 2 view .LVU109
 354 0004 07E0     		b	.L25
 355              	.LVL28:
 356              	.L26:
3339:FreeRTOS/tasks.c **** 	}
 357              		.loc 1 3339 3 is_stmt 1 discriminator 3 view .LVU110
 358 0006 04EB8402 		add	r2, r4, r4, lsl #2
 359 000a 9300     		lsls	r3, r2, #2
 360 000c 0E48     		ldr	r0, .L28
 361 000e 1844     		add	r0, r0, r3
 362 0010 FFF7FEFF 		bl	vListInitialise
 363              	.LVL29:
3337:FreeRTOS/tasks.c **** 	{
 364              		.loc 1 3337 91 discriminator 3 view .LVU111
3337:FreeRTOS/tasks.c **** 	{
 365              		.loc 1 3337 101 is_stmt 0 discriminator 3 view .LVU112
 366 0014 0134     		adds	r4, r4, #1
 367              	.LVL30:
 368              	.L25:
3337:FreeRTOS/tasks.c **** 	{
 369              		.loc 1 3337 40 is_stmt 1 discriminator 1 view .LVU113
3337:FreeRTOS/tasks.c **** 	{
 370              		.loc 1 3337 2 is_stmt 0 discriminator 1 view .LVU114
 371 0016 042C     		cmp	r4, #4
 372 0018 F5D9     		bls	.L26
3342:FreeRTOS/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 73


 373              		.loc 1 3342 2 is_stmt 1 view .LVU115
 374 001a 0C4D     		ldr	r5, .L28+4
 375 001c 2846     		mov	r0, r5
 376 001e FFF7FEFF 		bl	vListInitialise
 377              	.LVL31:
3343:FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 378              		.loc 1 3343 2 view .LVU116
 379 0022 0B4C     		ldr	r4, .L28+8
 380              	.LVL32:
3343:FreeRTOS/tasks.c **** 	vListInitialise( &xPendingReadyList );
 381              		.loc 1 3343 2 is_stmt 0 view .LVU117
 382 0024 2046     		mov	r0, r4
 383 0026 FFF7FEFF 		bl	vListInitialise
 384              	.LVL33:
3344:FreeRTOS/tasks.c **** 
 385              		.loc 1 3344 2 is_stmt 1 view .LVU118
 386 002a 0A48     		ldr	r0, .L28+12
 387 002c FFF7FEFF 		bl	vListInitialise
 388              	.LVL34:
3348:FreeRTOS/tasks.c **** 	}
 389              		.loc 1 3348 3 view .LVU119
 390 0030 0948     		ldr	r0, .L28+16
 391 0032 FFF7FEFF 		bl	vListInitialise
 392              	.LVL35:
3354:FreeRTOS/tasks.c **** 	}
 393              		.loc 1 3354 3 view .LVU120
 394 0036 0948     		ldr	r0, .L28+20
 395 0038 FFF7FEFF 		bl	vListInitialise
 396              	.LVL36:
3360:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 397              		.loc 1 3360 2 view .LVU121
3360:FreeRTOS/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 398              		.loc 1 3360 20 is_stmt 0 view .LVU122
 399 003c 084B     		ldr	r3, .L28+24
 400 003e 1D60     		str	r5, [r3]
3361:FreeRTOS/tasks.c **** }
 401              		.loc 1 3361 2 is_stmt 1 view .LVU123
3361:FreeRTOS/tasks.c **** }
 402              		.loc 1 3361 28 is_stmt 0 view .LVU124
 403 0040 084B     		ldr	r3, .L28+28
 404 0042 1C60     		str	r4, [r3]
3362:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 405              		.loc 1 3362 1 view .LVU125
 406 0044 38BD     		pop	{r3, r4, r5, pc}
 407              	.L29:
 408 0046 00BF     		.align	2
 409              	.L28:
 410 0048 00000000 		.word	.LANCHOR4
 411 004c 00000000 		.word	.LANCHOR5
 412 0050 00000000 		.word	.LANCHOR6
 413 0054 00000000 		.word	.LANCHOR1
 414 0058 00000000 		.word	.LANCHOR7
 415 005c 00000000 		.word	.LANCHOR0
 416 0060 00000000 		.word	.LANCHOR2
 417 0064 00000000 		.word	.LANCHOR8
 418              		.cfi_endproc
 419              	.LFE65:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 74


 421              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 422              		.align	1
 423              		.syntax unified
 424              		.thumb
 425              		.thumb_func
 427              	prvAddNewTaskToReadyList:
 428              	.LVL37:
 429              	.LFB36:
 964:FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 430              		.loc 1 964 1 is_stmt 1 view -0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 0, uses_anonymous_args = 0
 964:FreeRTOS/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 434              		.loc 1 964 1 is_stmt 0 view .LVU127
 435 0000 10B5     		push	{r4, lr}
 436              	.LCFI3:
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 4, -8
 439              		.cfi_offset 14, -4
 440 0002 0446     		mov	r4, r0
 967:FreeRTOS/tasks.c **** 	{
 441              		.loc 1 967 2 is_stmt 1 view .LVU128
 442 0004 FFF7FEFF 		bl	vPortEnterCritical
 443              	.LVL38:
 969:FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 444              		.loc 1 969 3 view .LVU129
 969:FreeRTOS/tasks.c **** 		if( pxCurrentTCB == NULL )
 445              		.loc 1 969 25 is_stmt 0 view .LVU130
 446 0008 214A     		ldr	r2, .L37
 447 000a 1368     		ldr	r3, [r2]
 448 000c 0133     		adds	r3, r3, #1
 449 000e 1360     		str	r3, [r2]
 970:FreeRTOS/tasks.c **** 		{
 450              		.loc 1 970 3 is_stmt 1 view .LVU131
 970:FreeRTOS/tasks.c **** 		{
 451              		.loc 1 970 20 is_stmt 0 view .LVU132
 452 0010 204B     		ldr	r3, .L37+4
 453 0012 1B68     		ldr	r3, [r3]
 970:FreeRTOS/tasks.c **** 		{
 454              		.loc 1 970 5 view .LVU133
 455 0014 5BB1     		cbz	r3, .L35
 993:FreeRTOS/tasks.c **** 			{
 456              		.loc 1 993 4 is_stmt 1 view .LVU134
 993:FreeRTOS/tasks.c **** 			{
 457              		.loc 1 993 26 is_stmt 0 view .LVU135
 458 0016 204B     		ldr	r3, .L37+8
 459 0018 1B68     		ldr	r3, [r3]
 993:FreeRTOS/tasks.c **** 			{
 460              		.loc 1 993 6 view .LVU136
 461 001a 6BB9     		cbnz	r3, .L32
 995:FreeRTOS/tasks.c **** 				{
 462              		.loc 1 995 5 is_stmt 1 view .LVU137
 995:FreeRTOS/tasks.c **** 				{
 463              		.loc 1 995 21 is_stmt 0 view .LVU138
 464 001c 1D4B     		ldr	r3, .L37+4
 465 001e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 75


 466 0020 DA6A     		ldr	r2, [r3, #44]
 995:FreeRTOS/tasks.c **** 				{
 467              		.loc 1 995 45 view .LVU139
 468 0022 E36A     		ldr	r3, [r4, #44]
 995:FreeRTOS/tasks.c **** 				{
 469              		.loc 1 995 7 view .LVU140
 470 0024 9A42     		cmp	r2, r3
 471 0026 07D8     		bhi	.L32
 997:FreeRTOS/tasks.c **** 				}
 472              		.loc 1 997 6 is_stmt 1 view .LVU141
 997:FreeRTOS/tasks.c **** 				}
 473              		.loc 1 997 19 is_stmt 0 view .LVU142
 474 0028 1A4B     		ldr	r3, .L37+4
 475 002a 1C60     		str	r4, [r3]
 476 002c 04E0     		b	.L32
 477              	.L35:
 974:FreeRTOS/tasks.c **** 
 478              		.loc 1 974 4 is_stmt 1 view .LVU143
 974:FreeRTOS/tasks.c **** 
 479              		.loc 1 974 17 is_stmt 0 view .LVU144
 480 002e 194B     		ldr	r3, .L37+4
 481 0030 1C60     		str	r4, [r3]
 976:FreeRTOS/tasks.c **** 			{
 482              		.loc 1 976 4 is_stmt 1 view .LVU145
 976:FreeRTOS/tasks.c **** 			{
 483              		.loc 1 976 31 is_stmt 0 view .LVU146
 484 0032 1368     		ldr	r3, [r2]
 976:FreeRTOS/tasks.c **** 			{
 485              		.loc 1 976 6 view .LVU147
 486 0034 012B     		cmp	r3, #1
 487 0036 28D0     		beq	.L36
 488              	.L32:
1006:FreeRTOS/tasks.c **** 			}
 489              		.loc 1 1006 29 is_stmt 1 view .LVU148
1010:FreeRTOS/tasks.c **** 
 490              		.loc 1 1010 3 view .LVU149
1010:FreeRTOS/tasks.c **** 
 491              		.loc 1 1010 15 is_stmt 0 view .LVU150
 492 0038 184A     		ldr	r2, .L37+12
 493 003a 1368     		ldr	r3, [r2]
 494 003c 0133     		adds	r3, r3, #1
 495 003e 1360     		str	r3, [r2]
1018:FreeRTOS/tasks.c **** 
 496              		.loc 1 1018 31 is_stmt 1 view .LVU151
1020:FreeRTOS/tasks.c **** 
 497              		.loc 1 1020 3 view .LVU152
1020:FreeRTOS/tasks.c **** 
 498              		.loc 1 1020 3 view .LVU153
 499 0040 E06A     		ldr	r0, [r4, #44]
 500 0042 0123     		movs	r3, #1
 501 0044 8340     		lsls	r3, r3, r0
 502 0046 164A     		ldr	r2, .L37+16
 503 0048 1168     		ldr	r1, [r2]
 504 004a 0B43     		orrs	r3, r3, r1
 505 004c 1360     		str	r3, [r2]
1020:FreeRTOS/tasks.c **** 
 506              		.loc 1 1020 3 view .LVU154
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 76


 507 004e 00EB8000 		add	r0, r0, r0, lsl #2
 508 0052 211D     		adds	r1, r4, #4
 509 0054 134B     		ldr	r3, .L37+20
 510 0056 03EB8000 		add	r0, r3, r0, lsl #2
 511 005a FFF7FEFF 		bl	vListInsertEnd
 512              	.LVL39:
1020:FreeRTOS/tasks.c **** 
 513              		.loc 1 1020 36 view .LVU155
1022:FreeRTOS/tasks.c **** 	}
 514              		.loc 1 1022 3 view .LVU156
1024:FreeRTOS/tasks.c **** 
 515              		.loc 1 1024 2 view .LVU157
 516 005e FFF7FEFF 		bl	vPortExitCritical
 517              	.LVL40:
1026:FreeRTOS/tasks.c **** 	{
 518              		.loc 1 1026 2 view .LVU158
1026:FreeRTOS/tasks.c **** 	{
 519              		.loc 1 1026 24 is_stmt 0 view .LVU159
 520 0062 0D4B     		ldr	r3, .L37+8
 521 0064 1B68     		ldr	r3, [r3]
1026:FreeRTOS/tasks.c **** 	{
 522              		.loc 1 1026 4 view .LVU160
 523 0066 7BB1     		cbz	r3, .L30
1030:FreeRTOS/tasks.c **** 		{
 524              		.loc 1 1030 3 is_stmt 1 view .LVU161
1030:FreeRTOS/tasks.c **** 		{
 525              		.loc 1 1030 19 is_stmt 0 view .LVU162
 526 0068 0A4B     		ldr	r3, .L37+4
 527 006a 1B68     		ldr	r3, [r3]
 528 006c DA6A     		ldr	r2, [r3, #44]
1030:FreeRTOS/tasks.c **** 		{
 529              		.loc 1 1030 42 view .LVU163
 530 006e E36A     		ldr	r3, [r4, #44]
1030:FreeRTOS/tasks.c **** 		{
 531              		.loc 1 1030 5 view .LVU164
 532 0070 9A42     		cmp	r2, r3
 533 0072 09D2     		bcs	.L30
1032:FreeRTOS/tasks.c **** 		}
 534              		.loc 1 1032 4 is_stmt 1 view .LVU165
 535 0074 4FF0E023 		mov	r3, #-536813568
 536 0078 4FF08052 		mov	r2, #268435456
 537 007c C3F8042D 		str	r2, [r3, #3332]
1032:FreeRTOS/tasks.c **** 		}
 538              		.loc 1 1032 4 view .LVU166
 539              		.syntax unified
 540              	@ 1032 "FreeRTOS/tasks.c" 1
 541 0080 BFF34F8F 		dsb
 542              	@ 0 "" 2
1032:FreeRTOS/tasks.c **** 		}
 543              		.loc 1 1032 4 view .LVU167
 544              	@ 1032 "FreeRTOS/tasks.c" 1
 545 0084 BFF36F8F 		isb
 546              	@ 0 "" 2
1032:FreeRTOS/tasks.c **** 		}
 547              		.loc 1 1032 35 view .LVU168
1041:FreeRTOS/tasks.c **** 	}
 548              		.loc 1 1041 27 view .LVU169
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 77


 549              		.thumb
 550              		.syntax unified
 551              	.L30:
1043:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 552              		.loc 1 1043 1 is_stmt 0 view .LVU170
 553 0088 10BD     		pop	{r4, pc}
 554              	.LVL41:
 555              	.L36:
 981:FreeRTOS/tasks.c **** 			}
 556              		.loc 1 981 5 is_stmt 1 view .LVU171
 557 008a FFF7FEFF 		bl	prvInitialiseTaskLists
 558              	.LVL42:
 559 008e D3E7     		b	.L32
 560              	.L38:
 561              		.align	2
 562              	.L37:
 563 0090 00000000 		.word	.LANCHOR9
 564 0094 00000000 		.word	.LANCHOR10
 565 0098 00000000 		.word	.LANCHOR11
 566 009c 00000000 		.word	.LANCHOR12
 567 00a0 00000000 		.word	.LANCHOR13
 568 00a4 00000000 		.word	.LANCHOR4
 569              		.cfi_endproc
 570              	.LFE36:
 572              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 573              		.align	1
 574              		.syntax unified
 575              		.thumb
 576              		.thumb_func
 578              	prvAddCurrentTaskToDelayedList:
 579              	.LVL43:
 580              	.LFB80:
3657:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3658:FreeRTOS/tasks.c **** 
3659:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:FreeRTOS/tasks.c **** 
3661:FreeRTOS/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:FreeRTOS/tasks.c **** 	{
3663:FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
3664:FreeRTOS/tasks.c **** 
3665:FreeRTOS/tasks.c **** 		/* A critical section is not required as this is not called from
3666:FreeRTOS/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:FreeRTOS/tasks.c **** 		individual execution thread. */
3668:FreeRTOS/tasks.c **** 		xReturn = pxCurrentTCB;
3669:FreeRTOS/tasks.c **** 
3670:FreeRTOS/tasks.c **** 		return xReturn;
3671:FreeRTOS/tasks.c **** 	}
3672:FreeRTOS/tasks.c **** 
3673:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3675:FreeRTOS/tasks.c **** 
3676:FreeRTOS/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:FreeRTOS/tasks.c **** 
3678:FreeRTOS/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:FreeRTOS/tasks.c **** 	{
3680:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
3681:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 78


3682:FreeRTOS/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:FreeRTOS/tasks.c **** 		{
3684:FreeRTOS/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:FreeRTOS/tasks.c **** 		}
3686:FreeRTOS/tasks.c **** 		else
3687:FreeRTOS/tasks.c **** 		{
3688:FreeRTOS/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:FreeRTOS/tasks.c **** 			{
3690:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:FreeRTOS/tasks.c **** 			}
3692:FreeRTOS/tasks.c **** 			else
3693:FreeRTOS/tasks.c **** 			{
3694:FreeRTOS/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:FreeRTOS/tasks.c **** 			}
3696:FreeRTOS/tasks.c **** 		}
3697:FreeRTOS/tasks.c **** 
3698:FreeRTOS/tasks.c **** 		return xReturn;
3699:FreeRTOS/tasks.c **** 	}
3700:FreeRTOS/tasks.c **** 
3701:FreeRTOS/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3703:FreeRTOS/tasks.c **** 
3704:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:FreeRTOS/tasks.c **** 
3706:FreeRTOS/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:FreeRTOS/tasks.c **** 	{
3708:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:FreeRTOS/tasks.c **** 
3710:FreeRTOS/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:FreeRTOS/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
3713:FreeRTOS/tasks.c **** 		{
3714:FreeRTOS/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:FreeRTOS/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:FreeRTOS/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:FreeRTOS/tasks.c **** 			{
3719:FreeRTOS/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:FreeRTOS/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:FreeRTOS/tasks.c **** 				not	being used for anything else. */
3722:FreeRTOS/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:FreeRTOS/tasks.c **** 				{
3724:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:FreeRTOS/tasks.c **** 				}
3726:FreeRTOS/tasks.c **** 				else
3727:FreeRTOS/tasks.c **** 				{
3728:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:FreeRTOS/tasks.c **** 				}
3730:FreeRTOS/tasks.c **** 
3731:FreeRTOS/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:FreeRTOS/tasks.c **** 				to be moved into a new list. */
3733:FreeRTOS/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:FreeRTOS/tasks.c **** 				{
3735:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:FreeRTOS/tasks.c **** 					{
3737:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 79


3739:FreeRTOS/tasks.c **** 					else
3740:FreeRTOS/tasks.c **** 					{
3741:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:FreeRTOS/tasks.c **** 					}
3743:FreeRTOS/tasks.c **** 
3744:FreeRTOS/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:FreeRTOS/tasks.c **** 				}
3748:FreeRTOS/tasks.c **** 				else
3749:FreeRTOS/tasks.c **** 				{
3750:FreeRTOS/tasks.c **** 					/* Just inherit the priority. */
3751:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:FreeRTOS/tasks.c **** 				}
3753:FreeRTOS/tasks.c **** 
3754:FreeRTOS/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:FreeRTOS/tasks.c **** 			}
3756:FreeRTOS/tasks.c **** 			else
3757:FreeRTOS/tasks.c **** 			{
3758:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:FreeRTOS/tasks.c **** 			}
3760:FreeRTOS/tasks.c **** 		}
3761:FreeRTOS/tasks.c **** 		else
3762:FreeRTOS/tasks.c **** 		{
3763:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:FreeRTOS/tasks.c **** 		}
3765:FreeRTOS/tasks.c **** 	}
3766:FreeRTOS/tasks.c **** 
3767:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3768:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3769:FreeRTOS/tasks.c **** 
3770:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:FreeRTOS/tasks.c **** 
3772:FreeRTOS/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:FreeRTOS/tasks.c **** 	{
3774:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:FreeRTOS/tasks.c **** 
3777:FreeRTOS/tasks.c **** 		if( pxMutexHolder != NULL )
3778:FreeRTOS/tasks.c **** 		{
3779:FreeRTOS/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:FreeRTOS/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:FreeRTOS/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:FreeRTOS/tasks.c **** 			be the running state task. */
3783:FreeRTOS/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:FreeRTOS/tasks.c **** 
3785:FreeRTOS/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:FreeRTOS/tasks.c **** 
3788:FreeRTOS/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:FreeRTOS/tasks.c **** 			task? */
3790:FreeRTOS/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:FreeRTOS/tasks.c **** 			{
3792:FreeRTOS/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:FreeRTOS/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:FreeRTOS/tasks.c **** 				{
3795:FreeRTOS/tasks.c **** 					/* A task can only have an inherited priority if it holds
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 80


3796:FreeRTOS/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:FreeRTOS/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:FreeRTOS/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:FreeRTOS/tasks.c **** 					the	holding task from the ready	list. */
3800:FreeRTOS/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:FreeRTOS/tasks.c **** 					{
3802:FreeRTOS/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:FreeRTOS/tasks.c **** 					}
3804:FreeRTOS/tasks.c **** 					else
3805:FreeRTOS/tasks.c **** 					{
3806:FreeRTOS/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:FreeRTOS/tasks.c **** 					}
3808:FreeRTOS/tasks.c **** 
3809:FreeRTOS/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:FreeRTOS/tasks.c **** 					new	ready list. */
3811:FreeRTOS/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:FreeRTOS/tasks.c **** 
3814:FreeRTOS/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:FreeRTOS/tasks.c **** 					any other purpose if this task is running, and it must be
3816:FreeRTOS/tasks.c **** 					running to give back the mutex. */
3817:FreeRTOS/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:FreeRTOS/tasks.c **** 
3820:FreeRTOS/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:FreeRTOS/tasks.c **** 					This is only actually required in the corner case whereby
3822:FreeRTOS/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:FreeRTOS/tasks.c **** 					in an order different to that in which they were taken.
3824:FreeRTOS/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:FreeRTOS/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:FreeRTOS/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:FreeRTOS/tasks.c **** 					a task is waiting on it or not. */
3828:FreeRTOS/tasks.c **** 					xReturn = pdTRUE;
3829:FreeRTOS/tasks.c **** 				}
3830:FreeRTOS/tasks.c **** 				else
3831:FreeRTOS/tasks.c **** 				{
3832:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:FreeRTOS/tasks.c **** 				}
3834:FreeRTOS/tasks.c **** 			}
3835:FreeRTOS/tasks.c **** 			else
3836:FreeRTOS/tasks.c **** 			{
3837:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:FreeRTOS/tasks.c **** 			}
3839:FreeRTOS/tasks.c **** 		}
3840:FreeRTOS/tasks.c **** 		else
3841:FreeRTOS/tasks.c **** 		{
3842:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:FreeRTOS/tasks.c **** 		}
3844:FreeRTOS/tasks.c **** 
3845:FreeRTOS/tasks.c **** 		return xReturn;
3846:FreeRTOS/tasks.c **** 	}
3847:FreeRTOS/tasks.c **** 
3848:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
3849:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3850:FreeRTOS/tasks.c **** 
3851:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 81


3853:FreeRTOS/tasks.c **** 	void vTaskEnterCritical( void )
3854:FreeRTOS/tasks.c **** 	{
3855:FreeRTOS/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:FreeRTOS/tasks.c **** 
3857:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:FreeRTOS/tasks.c **** 		{
3859:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:FreeRTOS/tasks.c **** 
3861:FreeRTOS/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:FreeRTOS/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:FreeRTOS/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:FreeRTOS/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:FreeRTOS/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:FreeRTOS/tasks.c **** 			critical section. */
3867:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:FreeRTOS/tasks.c **** 			{
3869:FreeRTOS/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:FreeRTOS/tasks.c **** 			}
3871:FreeRTOS/tasks.c **** 		}
3872:FreeRTOS/tasks.c **** 		else
3873:FreeRTOS/tasks.c **** 		{
3874:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:FreeRTOS/tasks.c **** 		}
3876:FreeRTOS/tasks.c **** 	}
3877:FreeRTOS/tasks.c **** 
3878:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3880:FreeRTOS/tasks.c **** 
3881:FreeRTOS/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:FreeRTOS/tasks.c **** 
3883:FreeRTOS/tasks.c **** 	void vTaskExitCritical( void )
3884:FreeRTOS/tasks.c **** 	{
3885:FreeRTOS/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:FreeRTOS/tasks.c **** 		{
3887:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:FreeRTOS/tasks.c **** 			{
3889:FreeRTOS/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:FreeRTOS/tasks.c **** 
3891:FreeRTOS/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:FreeRTOS/tasks.c **** 				{
3893:FreeRTOS/tasks.c **** 					portENABLE_INTERRUPTS();
3894:FreeRTOS/tasks.c **** 				}
3895:FreeRTOS/tasks.c **** 				else
3896:FreeRTOS/tasks.c **** 				{
3897:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:FreeRTOS/tasks.c **** 				}
3899:FreeRTOS/tasks.c **** 			}
3900:FreeRTOS/tasks.c **** 			else
3901:FreeRTOS/tasks.c **** 			{
3902:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:FreeRTOS/tasks.c **** 			}
3904:FreeRTOS/tasks.c **** 		}
3905:FreeRTOS/tasks.c **** 		else
3906:FreeRTOS/tasks.c **** 		{
3907:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:FreeRTOS/tasks.c **** 		}
3909:FreeRTOS/tasks.c **** 	}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 82


3910:FreeRTOS/tasks.c **** 
3911:FreeRTOS/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3913:FreeRTOS/tasks.c **** 
3914:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:FreeRTOS/tasks.c **** 
3916:FreeRTOS/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:FreeRTOS/tasks.c **** 	{
3918:FreeRTOS/tasks.c **** 	size_t x;
3919:FreeRTOS/tasks.c **** 
3920:FreeRTOS/tasks.c **** 		/* Start by copying the entire string. */
3921:FreeRTOS/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:FreeRTOS/tasks.c **** 
3923:FreeRTOS/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:FreeRTOS/tasks.c **** 		printed out. */
3925:FreeRTOS/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:FreeRTOS/tasks.c **** 		{
3927:FreeRTOS/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:FreeRTOS/tasks.c **** 		}
3929:FreeRTOS/tasks.c **** 
3930:FreeRTOS/tasks.c **** 		/* Terminate. */
3931:FreeRTOS/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:FreeRTOS/tasks.c **** 
3933:FreeRTOS/tasks.c **** 		/* Return the new end of string. */
3934:FreeRTOS/tasks.c **** 		return &( pcBuffer[ x ] );
3935:FreeRTOS/tasks.c **** 	}
3936:FreeRTOS/tasks.c **** 
3937:FreeRTOS/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
3939:FreeRTOS/tasks.c **** 
3940:FreeRTOS/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:FreeRTOS/tasks.c **** 
3942:FreeRTOS/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:FreeRTOS/tasks.c **** 	{
3944:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:FreeRTOS/tasks.c **** 	char cStatus;
3947:FreeRTOS/tasks.c **** 
3948:FreeRTOS/tasks.c **** 		/*
3949:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
3950:FreeRTOS/tasks.c **** 		 *
3951:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:FreeRTOS/tasks.c **** 		 * scheduler.
3954:FreeRTOS/tasks.c **** 		 *
3955:FreeRTOS/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:FreeRTOS/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:FreeRTOS/tasks.c **** 		 * displays task names, states and stack usage.
3958:FreeRTOS/tasks.c **** 		 *
3959:FreeRTOS/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:FreeRTOS/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:FreeRTOS/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:FreeRTOS/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:FreeRTOS/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:FreeRTOS/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:FreeRTOS/tasks.c **** 		 * snprintf() implementation!).
3966:FreeRTOS/tasks.c **** 		 *
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 83


3967:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:FreeRTOS/tasks.c **** 		 * through a call to vTaskList().
3970:FreeRTOS/tasks.c **** 		 */
3971:FreeRTOS/tasks.c **** 
3972:FreeRTOS/tasks.c **** 
3973:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:FreeRTOS/tasks.c **** 
3976:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:FreeRTOS/tasks.c **** 		function is executing. */
3978:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:FreeRTOS/tasks.c **** 
3980:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:FreeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:FreeRTOS/tasks.c **** 		equate to NULL. */
3983:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:FreeRTOS/tasks.c **** 
3985:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:FreeRTOS/tasks.c **** 		{
3987:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
3988:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:FreeRTOS/tasks.c **** 
3990:FreeRTOS/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:FreeRTOS/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:FreeRTOS/tasks.c **** 			{
3993:FreeRTOS/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:FreeRTOS/tasks.c **** 				{
3995:FreeRTOS/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:FreeRTOS/tasks.c **** 										break;
3997:FreeRTOS/tasks.c **** 
3998:FreeRTOS/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:FreeRTOS/tasks.c **** 										break;
4000:FreeRTOS/tasks.c **** 
4001:FreeRTOS/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:FreeRTOS/tasks.c **** 										break;
4003:FreeRTOS/tasks.c **** 
4004:FreeRTOS/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:FreeRTOS/tasks.c **** 										break;
4006:FreeRTOS/tasks.c **** 
4007:FreeRTOS/tasks.c **** 					default:			/* Should not get here, but it is included
4008:FreeRTOS/tasks.c **** 										to prevent static checking errors. */
4009:FreeRTOS/tasks.c **** 										cStatus = 0x00;
4010:FreeRTOS/tasks.c **** 										break;
4011:FreeRTOS/tasks.c **** 				}
4012:FreeRTOS/tasks.c **** 
4013:FreeRTOS/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:FreeRTOS/tasks.c **** 				can be printed in tabular form more easily. */
4015:FreeRTOS/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:FreeRTOS/tasks.c **** 
4017:FreeRTOS/tasks.c **** 				/* Write the rest of the string. */
4018:FreeRTOS/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:FreeRTOS/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:FreeRTOS/tasks.c **** 			}
4021:FreeRTOS/tasks.c **** 
4022:FreeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:FreeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 84


4024:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:FreeRTOS/tasks.c **** 		}
4026:FreeRTOS/tasks.c **** 		else
4027:FreeRTOS/tasks.c **** 		{
4028:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:FreeRTOS/tasks.c **** 		}
4030:FreeRTOS/tasks.c **** 	}
4031:FreeRTOS/tasks.c **** 
4032:FreeRTOS/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
4034:FreeRTOS/tasks.c **** 
4035:FreeRTOS/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:FreeRTOS/tasks.c **** 
4037:FreeRTOS/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:FreeRTOS/tasks.c **** 	{
4039:FreeRTOS/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:FreeRTOS/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:FreeRTOS/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:FreeRTOS/tasks.c **** 
4043:FreeRTOS/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:FreeRTOS/tasks.c **** 		{
4045:FreeRTOS/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:FreeRTOS/tasks.c **** 		}
4047:FreeRTOS/tasks.c **** 		#endif
4048:FreeRTOS/tasks.c **** 
4049:FreeRTOS/tasks.c **** 		/*
4050:FreeRTOS/tasks.c **** 		 * PLEASE NOTE:
4051:FreeRTOS/tasks.c **** 		 *
4052:FreeRTOS/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:FreeRTOS/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:FreeRTOS/tasks.c **** 		 * scheduler.
4055:FreeRTOS/tasks.c **** 		 *
4056:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:FreeRTOS/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:FreeRTOS/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:FreeRTOS/tasks.c **** 		 * in both absolute and percentage terms.
4060:FreeRTOS/tasks.c **** 		 *
4061:FreeRTOS/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:FreeRTOS/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:FreeRTOS/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:FreeRTOS/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:FreeRTOS/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:FreeRTOS/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:FreeRTOS/tasks.c **** 		 * a full snprintf() implementation!).
4068:FreeRTOS/tasks.c **** 		 *
4069:FreeRTOS/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:FreeRTOS/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:FreeRTOS/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:FreeRTOS/tasks.c **** 		 */
4073:FreeRTOS/tasks.c **** 
4074:FreeRTOS/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:FreeRTOS/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:FreeRTOS/tasks.c **** 
4077:FreeRTOS/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:FreeRTOS/tasks.c **** 		function is executing. */
4079:FreeRTOS/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 85


4081:FreeRTOS/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:FreeRTOS/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:FreeRTOS/tasks.c **** 		equate to NULL. */
4084:FreeRTOS/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:FreeRTOS/tasks.c **** 
4086:FreeRTOS/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:FreeRTOS/tasks.c **** 		{
4088:FreeRTOS/tasks.c **** 			/* Generate the (binary) data. */
4089:FreeRTOS/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:FreeRTOS/tasks.c **** 
4091:FreeRTOS/tasks.c **** 			/* For percentage calculations. */
4092:FreeRTOS/tasks.c **** 			ulTotalTime /= 100UL;
4093:FreeRTOS/tasks.c **** 
4094:FreeRTOS/tasks.c **** 			/* Avoid divide by zero errors. */
4095:FreeRTOS/tasks.c **** 			if( ulTotalTime > 0 )
4096:FreeRTOS/tasks.c **** 			{
4097:FreeRTOS/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:FreeRTOS/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:FreeRTOS/tasks.c **** 				{
4100:FreeRTOS/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:FreeRTOS/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:FreeRTOS/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:FreeRTOS/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:FreeRTOS/tasks.c **** 
4105:FreeRTOS/tasks.c **** 					/* Write the task name to the string, padding with
4106:FreeRTOS/tasks.c **** 					spaces so it can be printed in tabular form more
4107:FreeRTOS/tasks.c **** 					easily. */
4108:FreeRTOS/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:FreeRTOS/tasks.c **** 
4110:FreeRTOS/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:FreeRTOS/tasks.c **** 					{
4112:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:FreeRTOS/tasks.c **** 						{
4114:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:FreeRTOS/tasks.c **** 						}
4116:FreeRTOS/tasks.c **** 						#else
4117:FreeRTOS/tasks.c **** 						{
4118:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:FreeRTOS/tasks.c **** 							printf() library can be used. */
4120:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:FreeRTOS/tasks.c **** 						}
4122:FreeRTOS/tasks.c **** 						#endif
4123:FreeRTOS/tasks.c **** 					}
4124:FreeRTOS/tasks.c **** 					else
4125:FreeRTOS/tasks.c **** 					{
4126:FreeRTOS/tasks.c **** 						/* If the percentage is zero here then the task has
4127:FreeRTOS/tasks.c **** 						consumed less than 1% of the total run time. */
4128:FreeRTOS/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:FreeRTOS/tasks.c **** 						{
4130:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:FreeRTOS/tasks.c **** 						}
4132:FreeRTOS/tasks.c **** 						#else
4133:FreeRTOS/tasks.c **** 						{
4134:FreeRTOS/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:FreeRTOS/tasks.c **** 							printf() library can be used. */
4136:FreeRTOS/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:FreeRTOS/tasks.c **** 						}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 86


4138:FreeRTOS/tasks.c **** 						#endif
4139:FreeRTOS/tasks.c **** 					}
4140:FreeRTOS/tasks.c **** 
4141:FreeRTOS/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:FreeRTOS/tasks.c **** 				}
4143:FreeRTOS/tasks.c **** 			}
4144:FreeRTOS/tasks.c **** 			else
4145:FreeRTOS/tasks.c **** 			{
4146:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:FreeRTOS/tasks.c **** 			}
4148:FreeRTOS/tasks.c **** 
4149:FreeRTOS/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:FreeRTOS/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:FreeRTOS/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:FreeRTOS/tasks.c **** 		}
4153:FreeRTOS/tasks.c **** 		else
4154:FreeRTOS/tasks.c **** 		{
4155:FreeRTOS/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:FreeRTOS/tasks.c **** 		}
4157:FreeRTOS/tasks.c **** 	}
4158:FreeRTOS/tasks.c **** 
4159:FreeRTOS/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4161:FreeRTOS/tasks.c **** 
4162:FreeRTOS/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:FreeRTOS/tasks.c **** {
4164:FreeRTOS/tasks.c **** TickType_t uxReturn;
4165:FreeRTOS/tasks.c **** 
4166:FreeRTOS/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:FreeRTOS/tasks.c **** 
4168:FreeRTOS/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:FreeRTOS/tasks.c **** 	queues and semaphores. */
4170:FreeRTOS/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:FreeRTOS/tasks.c **** 
4172:FreeRTOS/tasks.c **** 	return uxReturn;
4173:FreeRTOS/tasks.c **** }
4174:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4175:FreeRTOS/tasks.c **** 
4176:FreeRTOS/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:FreeRTOS/tasks.c **** 
4178:FreeRTOS/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:FreeRTOS/tasks.c **** 	{
4180:FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:FreeRTOS/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:FreeRTOS/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:FreeRTOS/tasks.c **** 		{
4184:FreeRTOS/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:FreeRTOS/tasks.c **** 		}
4186:FreeRTOS/tasks.c **** 
4187:FreeRTOS/tasks.c **** 		return pxCurrentTCB;
4188:FreeRTOS/tasks.c **** 	}
4189:FreeRTOS/tasks.c **** 
4190:FreeRTOS/tasks.c **** #endif /* configUSE_MUTEXES */
4191:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4192:FreeRTOS/tasks.c **** 
4193:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 87


4195:FreeRTOS/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:FreeRTOS/tasks.c **** 	{
4197:FreeRTOS/tasks.c **** 	uint32_t ulReturn;
4198:FreeRTOS/tasks.c **** 
4199:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4200:FreeRTOS/tasks.c **** 		{
4201:FreeRTOS/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:FreeRTOS/tasks.c **** 			{
4204:FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:FreeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:FreeRTOS/tasks.c **** 
4207:FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:FreeRTOS/tasks.c **** 				{
4209:FreeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:FreeRTOS/tasks.c **** 
4212:FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4214:FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4215:FreeRTOS/tasks.c **** 					application code should ever do. */
4216:FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4217:FreeRTOS/tasks.c **** 				}
4218:FreeRTOS/tasks.c **** 				else
4219:FreeRTOS/tasks.c **** 				{
4220:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:FreeRTOS/tasks.c **** 				}
4222:FreeRTOS/tasks.c **** 			}
4223:FreeRTOS/tasks.c **** 			else
4224:FreeRTOS/tasks.c **** 			{
4225:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:FreeRTOS/tasks.c **** 			}
4227:FreeRTOS/tasks.c **** 		}
4228:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4229:FreeRTOS/tasks.c **** 
4230:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4231:FreeRTOS/tasks.c **** 		{
4232:FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:FreeRTOS/tasks.c **** 
4235:FreeRTOS/tasks.c **** 			if( ulReturn != 0UL )
4236:FreeRTOS/tasks.c **** 			{
4237:FreeRTOS/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:FreeRTOS/tasks.c **** 				{
4239:FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:FreeRTOS/tasks.c **** 				}
4241:FreeRTOS/tasks.c **** 				else
4242:FreeRTOS/tasks.c **** 				{
4243:FreeRTOS/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:FreeRTOS/tasks.c **** 				}
4245:FreeRTOS/tasks.c **** 			}
4246:FreeRTOS/tasks.c **** 			else
4247:FreeRTOS/tasks.c **** 			{
4248:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:FreeRTOS/tasks.c **** 			}
4250:FreeRTOS/tasks.c **** 
4251:FreeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 88


4252:FreeRTOS/tasks.c **** 		}
4253:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4254:FreeRTOS/tasks.c **** 
4255:FreeRTOS/tasks.c **** 		return ulReturn;
4256:FreeRTOS/tasks.c **** 	}
4257:FreeRTOS/tasks.c **** 
4258:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4260:FreeRTOS/tasks.c **** 
4261:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:FreeRTOS/tasks.c **** 
4263:FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:FreeRTOS/tasks.c **** 	{
4265:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4266:FreeRTOS/tasks.c **** 
4267:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4268:FreeRTOS/tasks.c **** 		{
4269:FreeRTOS/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:FreeRTOS/tasks.c **** 			{
4272:FreeRTOS/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:FreeRTOS/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:FreeRTOS/tasks.c **** 				clear the value to zero. */
4275:FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:FreeRTOS/tasks.c **** 
4277:FreeRTOS/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:FreeRTOS/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:FreeRTOS/tasks.c **** 
4280:FreeRTOS/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:FreeRTOS/tasks.c **** 				{
4282:FreeRTOS/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:FreeRTOS/tasks.c **** 
4285:FreeRTOS/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:FreeRTOS/tasks.c **** 					section (some will yield immediately, others wait until the
4287:FreeRTOS/tasks.c **** 					critical section exits) - but it is not something that
4288:FreeRTOS/tasks.c **** 					application code should ever do. */
4289:FreeRTOS/tasks.c **** 					portYIELD_WITHIN_API();
4290:FreeRTOS/tasks.c **** 				}
4291:FreeRTOS/tasks.c **** 				else
4292:FreeRTOS/tasks.c **** 				{
4293:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:FreeRTOS/tasks.c **** 				}
4295:FreeRTOS/tasks.c **** 			}
4296:FreeRTOS/tasks.c **** 			else
4297:FreeRTOS/tasks.c **** 			{
4298:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:FreeRTOS/tasks.c **** 			}
4300:FreeRTOS/tasks.c **** 		}
4301:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4302:FreeRTOS/tasks.c **** 
4303:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4304:FreeRTOS/tasks.c **** 		{
4305:FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:FreeRTOS/tasks.c **** 
4307:FreeRTOS/tasks.c **** 			if( pulNotificationValue != NULL )
4308:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 89


4309:FreeRTOS/tasks.c **** 				/* Output the current notification value, which may or may not
4310:FreeRTOS/tasks.c **** 				have changed. */
4311:FreeRTOS/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:FreeRTOS/tasks.c **** 			}
4313:FreeRTOS/tasks.c **** 
4314:FreeRTOS/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:FreeRTOS/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:FreeRTOS/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:FreeRTOS/tasks.c **** 			unblocked because of a timeout. */
4318:FreeRTOS/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:FreeRTOS/tasks.c **** 			{
4320:FreeRTOS/tasks.c **** 				/* A notification was not received. */
4321:FreeRTOS/tasks.c **** 				xReturn = pdFALSE;
4322:FreeRTOS/tasks.c **** 			}
4323:FreeRTOS/tasks.c **** 			else
4324:FreeRTOS/tasks.c **** 			{
4325:FreeRTOS/tasks.c **** 				/* A notification was already pending or a notification was
4326:FreeRTOS/tasks.c **** 				received while the task was waiting. */
4327:FreeRTOS/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
4329:FreeRTOS/tasks.c **** 			}
4330:FreeRTOS/tasks.c **** 
4331:FreeRTOS/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:FreeRTOS/tasks.c **** 		}
4333:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4334:FreeRTOS/tasks.c **** 
4335:FreeRTOS/tasks.c **** 		return xReturn;
4336:FreeRTOS/tasks.c **** 	}
4337:FreeRTOS/tasks.c **** 
4338:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4340:FreeRTOS/tasks.c **** 
4341:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:FreeRTOS/tasks.c **** 
4343:FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:FreeRTOS/tasks.c **** 	{
4345:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4346:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:FreeRTOS/tasks.c **** 
4349:FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4350:FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:FreeRTOS/tasks.c **** 
4352:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4353:FreeRTOS/tasks.c **** 		{
4354:FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:FreeRTOS/tasks.c **** 			{
4356:FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:FreeRTOS/tasks.c **** 			}
4358:FreeRTOS/tasks.c **** 
4359:FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:FreeRTOS/tasks.c **** 
4361:FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:FreeRTOS/tasks.c **** 
4363:FreeRTOS/tasks.c **** 			switch( eAction )
4364:FreeRTOS/tasks.c **** 			{
4365:FreeRTOS/tasks.c **** 				case eSetBits	:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 90


4366:FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:FreeRTOS/tasks.c **** 					break;
4368:FreeRTOS/tasks.c **** 
4369:FreeRTOS/tasks.c **** 				case eIncrement	:
4370:FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:FreeRTOS/tasks.c **** 					break;
4372:FreeRTOS/tasks.c **** 
4373:FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4374:FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:FreeRTOS/tasks.c **** 					break;
4376:FreeRTOS/tasks.c **** 
4377:FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:FreeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:FreeRTOS/tasks.c **** 					{
4380:FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:FreeRTOS/tasks.c **** 					}
4382:FreeRTOS/tasks.c **** 					else
4383:FreeRTOS/tasks.c **** 					{
4384:FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4385:FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4386:FreeRTOS/tasks.c **** 					}
4387:FreeRTOS/tasks.c **** 					break;
4388:FreeRTOS/tasks.c **** 
4389:FreeRTOS/tasks.c **** 				case eNoAction:
4390:FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4391:FreeRTOS/tasks.c **** 					updated. */
4392:FreeRTOS/tasks.c **** 					break;
4393:FreeRTOS/tasks.c **** 			}
4394:FreeRTOS/tasks.c **** 
4395:FreeRTOS/tasks.c **** 			traceTASK_NOTIFY();
4396:FreeRTOS/tasks.c **** 
4397:FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:FreeRTOS/tasks.c **** 			notification then unblock it now. */
4399:FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:FreeRTOS/tasks.c **** 			{
4401:FreeRTOS/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:FreeRTOS/tasks.c **** 
4404:FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4405:FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:FreeRTOS/tasks.c **** 
4407:FreeRTOS/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:FreeRTOS/tasks.c **** 				{
4409:FreeRTOS/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:FreeRTOS/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:FreeRTOS/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:FreeRTOS/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:FreeRTOS/tasks.c **** 					because it will automatically get reset to a new value when
4414:FreeRTOS/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:FreeRTOS/tasks.c **** 					tickless idling is used it might be more important to enter
4416:FreeRTOS/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:FreeRTOS/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:FreeRTOS/tasks.c **** 					earliest possible time. */
4419:FreeRTOS/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:FreeRTOS/tasks.c **** 				}
4421:FreeRTOS/tasks.c **** 				#endif
4422:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 91


4423:FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:FreeRTOS/tasks.c **** 				{
4425:FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4426:FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4427:FreeRTOS/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:FreeRTOS/tasks.c **** 				}
4429:FreeRTOS/tasks.c **** 				else
4430:FreeRTOS/tasks.c **** 				{
4431:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:FreeRTOS/tasks.c **** 				}
4433:FreeRTOS/tasks.c **** 			}
4434:FreeRTOS/tasks.c **** 			else
4435:FreeRTOS/tasks.c **** 			{
4436:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:FreeRTOS/tasks.c **** 			}
4438:FreeRTOS/tasks.c **** 		}
4439:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4440:FreeRTOS/tasks.c **** 
4441:FreeRTOS/tasks.c **** 		return xReturn;
4442:FreeRTOS/tasks.c **** 	}
4443:FreeRTOS/tasks.c **** 
4444:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4446:FreeRTOS/tasks.c **** 
4447:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:FreeRTOS/tasks.c **** 
4449:FreeRTOS/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:FreeRTOS/tasks.c **** 	{
4451:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4452:FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:FreeRTOS/tasks.c **** 
4456:FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4457:FreeRTOS/tasks.c **** 
4458:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:FreeRTOS/tasks.c **** 		provided on the following link:
4473:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:FreeRTOS/tasks.c **** 
4476:FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:FreeRTOS/tasks.c **** 
4478:FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 92


4480:FreeRTOS/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:FreeRTOS/tasks.c **** 			{
4482:FreeRTOS/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:FreeRTOS/tasks.c **** 			}
4484:FreeRTOS/tasks.c **** 
4485:FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:FreeRTOS/tasks.c **** 
4488:FreeRTOS/tasks.c **** 			switch( eAction )
4489:FreeRTOS/tasks.c **** 			{
4490:FreeRTOS/tasks.c **** 				case eSetBits	:
4491:FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:FreeRTOS/tasks.c **** 					break;
4493:FreeRTOS/tasks.c **** 
4494:FreeRTOS/tasks.c **** 				case eIncrement	:
4495:FreeRTOS/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:FreeRTOS/tasks.c **** 					break;
4497:FreeRTOS/tasks.c **** 
4498:FreeRTOS/tasks.c **** 				case eSetValueWithOverwrite	:
4499:FreeRTOS/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:FreeRTOS/tasks.c **** 					break;
4501:FreeRTOS/tasks.c **** 
4502:FreeRTOS/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:FreeRTOS/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:FreeRTOS/tasks.c **** 					{
4505:FreeRTOS/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:FreeRTOS/tasks.c **** 					}
4507:FreeRTOS/tasks.c **** 					else
4508:FreeRTOS/tasks.c **** 					{
4509:FreeRTOS/tasks.c **** 						/* The value could not be written to the task. */
4510:FreeRTOS/tasks.c **** 						xReturn = pdFAIL;
4511:FreeRTOS/tasks.c **** 					}
4512:FreeRTOS/tasks.c **** 					break;
4513:FreeRTOS/tasks.c **** 
4514:FreeRTOS/tasks.c **** 				case eNoAction :
4515:FreeRTOS/tasks.c **** 					/* The task is being notified without its notify value being
4516:FreeRTOS/tasks.c **** 					updated. */
4517:FreeRTOS/tasks.c **** 					break;
4518:FreeRTOS/tasks.c **** 			}
4519:FreeRTOS/tasks.c **** 
4520:FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:FreeRTOS/tasks.c **** 
4522:FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:FreeRTOS/tasks.c **** 			notification then unblock it now. */
4524:FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:FreeRTOS/tasks.c **** 			{
4526:FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4527:FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:FreeRTOS/tasks.c **** 
4529:FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:FreeRTOS/tasks.c **** 				{
4531:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:FreeRTOS/tasks.c **** 				}
4534:FreeRTOS/tasks.c **** 				else
4535:FreeRTOS/tasks.c **** 				{
4536:FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 93


4537:FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:FreeRTOS/tasks.c **** 				}
4540:FreeRTOS/tasks.c **** 
4541:FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:FreeRTOS/tasks.c **** 				{
4543:FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4544:FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4545:FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:FreeRTOS/tasks.c **** 					{
4547:FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:FreeRTOS/tasks.c **** 					}
4549:FreeRTOS/tasks.c **** 					else
4550:FreeRTOS/tasks.c **** 					{
4551:FreeRTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:FreeRTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:FreeRTOS/tasks.c **** 						safe FreeRTOS function. */
4554:FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
4555:FreeRTOS/tasks.c **** 					}
4556:FreeRTOS/tasks.c **** 				}
4557:FreeRTOS/tasks.c **** 				else
4558:FreeRTOS/tasks.c **** 				{
4559:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:FreeRTOS/tasks.c **** 				}
4561:FreeRTOS/tasks.c **** 			}
4562:FreeRTOS/tasks.c **** 		}
4563:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:FreeRTOS/tasks.c **** 
4565:FreeRTOS/tasks.c **** 		return xReturn;
4566:FreeRTOS/tasks.c **** 	}
4567:FreeRTOS/tasks.c **** 
4568:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4570:FreeRTOS/tasks.c **** 
4571:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:FreeRTOS/tasks.c **** 
4573:FreeRTOS/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:FreeRTOS/tasks.c **** 	{
4575:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
4576:FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:FreeRTOS/tasks.c **** 
4579:FreeRTOS/tasks.c **** 		configASSERT( xTaskToNotify );
4580:FreeRTOS/tasks.c **** 
4581:FreeRTOS/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:FreeRTOS/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:FreeRTOS/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:FreeRTOS/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:FreeRTOS/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:FreeRTOS/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:FreeRTOS/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:FreeRTOS/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:FreeRTOS/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:FreeRTOS/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:FreeRTOS/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:FreeRTOS/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 94


4594:FreeRTOS/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:FreeRTOS/tasks.c **** 		provided on the following link:
4596:FreeRTOS/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:FreeRTOS/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:FreeRTOS/tasks.c **** 
4599:FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:FreeRTOS/tasks.c **** 
4601:FreeRTOS/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:FreeRTOS/tasks.c **** 		{
4603:FreeRTOS/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:FreeRTOS/tasks.c **** 
4606:FreeRTOS/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:FreeRTOS/tasks.c **** 			semaphore. */
4608:FreeRTOS/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:FreeRTOS/tasks.c **** 
4610:FreeRTOS/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:FreeRTOS/tasks.c **** 
4612:FreeRTOS/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:FreeRTOS/tasks.c **** 			notification then unblock it now. */
4614:FreeRTOS/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:FreeRTOS/tasks.c **** 			{
4616:FreeRTOS/tasks.c **** 				/* The task should not have been on an event list. */
4617:FreeRTOS/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:FreeRTOS/tasks.c **** 
4619:FreeRTOS/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:FreeRTOS/tasks.c **** 				{
4621:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:FreeRTOS/tasks.c **** 				}
4624:FreeRTOS/tasks.c **** 				else
4625:FreeRTOS/tasks.c **** 				{
4626:FreeRTOS/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:FreeRTOS/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:FreeRTOS/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:FreeRTOS/tasks.c **** 				}
4630:FreeRTOS/tasks.c **** 
4631:FreeRTOS/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:FreeRTOS/tasks.c **** 				{
4633:FreeRTOS/tasks.c **** 					/* The notified task has a priority above the currently
4634:FreeRTOS/tasks.c **** 					executing task so a yield is required. */
4635:FreeRTOS/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:FreeRTOS/tasks.c **** 					{
4637:FreeRTOS/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:FreeRTOS/tasks.c **** 					}
4639:FreeRTOS/tasks.c **** 					else
4640:FreeRTOS/tasks.c **** 					{
4641:FreeRTOS/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:FreeRTOS/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:FreeRTOS/tasks.c **** 						safe FreeRTOS function. */
4644:FreeRTOS/tasks.c **** 						xYieldPending = pdTRUE;
4645:FreeRTOS/tasks.c **** 					}
4646:FreeRTOS/tasks.c **** 				}
4647:FreeRTOS/tasks.c **** 				else
4648:FreeRTOS/tasks.c **** 				{
4649:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:FreeRTOS/tasks.c **** 				}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 95


4651:FreeRTOS/tasks.c **** 			}
4652:FreeRTOS/tasks.c **** 		}
4653:FreeRTOS/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:FreeRTOS/tasks.c **** 	}
4655:FreeRTOS/tasks.c **** 
4656:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:FreeRTOS/tasks.c **** 
4658:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4659:FreeRTOS/tasks.c **** 
4660:FreeRTOS/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:FreeRTOS/tasks.c **** 
4662:FreeRTOS/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:FreeRTOS/tasks.c **** 	{
4664:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
4665:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
4666:FreeRTOS/tasks.c **** 
4667:FreeRTOS/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:FreeRTOS/tasks.c **** 		its notification state cleared. */
4669:FreeRTOS/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:FreeRTOS/tasks.c **** 
4671:FreeRTOS/tasks.c **** 		taskENTER_CRITICAL();
4672:FreeRTOS/tasks.c **** 		{
4673:FreeRTOS/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:FreeRTOS/tasks.c **** 			{
4675:FreeRTOS/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:FreeRTOS/tasks.c **** 				xReturn = pdPASS;
4677:FreeRTOS/tasks.c **** 			}
4678:FreeRTOS/tasks.c **** 			else
4679:FreeRTOS/tasks.c **** 			{
4680:FreeRTOS/tasks.c **** 				xReturn = pdFAIL;
4681:FreeRTOS/tasks.c **** 			}
4682:FreeRTOS/tasks.c **** 		}
4683:FreeRTOS/tasks.c **** 		taskEXIT_CRITICAL();
4684:FreeRTOS/tasks.c **** 
4685:FreeRTOS/tasks.c **** 		return xReturn;
4686:FreeRTOS/tasks.c **** 	}
4687:FreeRTOS/tasks.c **** 
4688:FreeRTOS/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
4690:FreeRTOS/tasks.c **** 
4691:FreeRTOS/tasks.c **** 
4692:FreeRTOS/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:FreeRTOS/tasks.c **** {
 581              		.loc 1 4693 1 view -0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              		.loc 1 4693 1 is_stmt 0 view .LVU173
 586 0000 70B5     		push	{r4, r5, r6, lr}
 587              	.LCFI4:
 588              		.cfi_def_cfa_offset 16
 589              		.cfi_offset 4, -16
 590              		.cfi_offset 5, -12
 591              		.cfi_offset 6, -8
 592              		.cfi_offset 14, -4
 593 0002 0446     		mov	r4, r0
 594 0004 0D46     		mov	r5, r1
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 96


4694:FreeRTOS/tasks.c **** TickType_t xTimeToWake;
 595              		.loc 1 4694 1 is_stmt 1 view .LVU174
4695:FreeRTOS/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 596              		.loc 1 4695 1 view .LVU175
 597              		.loc 1 4695 18 is_stmt 0 view .LVU176
 598 0006 1D4B     		ldr	r3, .L46
 599 0008 1E68     		ldr	r6, [r3]
 600              	.LVL44:
4696:FreeRTOS/tasks.c **** 
4697:FreeRTOS/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:FreeRTOS/tasks.c **** 	{
4699:FreeRTOS/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:FreeRTOS/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:FreeRTOS/tasks.c **** 		when the task leaves the Blocked state. */
4702:FreeRTOS/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:FreeRTOS/tasks.c **** 	}
4704:FreeRTOS/tasks.c **** 	#endif
4705:FreeRTOS/tasks.c **** 
4706:FreeRTOS/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:FreeRTOS/tasks.c **** 	as the same list item is used for both lists. */
4708:FreeRTOS/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 601              		.loc 1 4708 2 is_stmt 1 view .LVU177
 602              		.loc 1 4708 35 is_stmt 0 view .LVU178
 603 000a 1D4B     		ldr	r3, .L46+4
 604 000c 1868     		ldr	r0, [r3]
 605              	.LVL45:
 606              		.loc 1 4708 6 view .LVU179
 607 000e 0430     		adds	r0, r0, #4
 608 0010 FFF7FEFF 		bl	uxListRemove
 609              	.LVL46:
 610              		.loc 1 4708 4 view .LVU180
 611 0014 50B9     		cbnz	r0, .L40
4709:FreeRTOS/tasks.c **** 	{
4710:FreeRTOS/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:FreeRTOS/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:FreeRTOS/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 612              		.loc 1 4712 3 is_stmt 1 view .LVU181
 613 0016 1A4B     		ldr	r3, .L46+4
 614 0018 1B68     		ldr	r3, [r3]
 615 001a DA6A     		ldr	r2, [r3, #44]
 616 001c 0123     		movs	r3, #1
 617 001e 03FA02F2 		lsl	r2, r3, r2
 618 0022 1849     		ldr	r1, .L46+8
 619 0024 0B68     		ldr	r3, [r1]
 620 0026 23EA0203 		bic	r3, r3, r2
 621 002a 0B60     		str	r3, [r1]
 622              	.L40:
4713:FreeRTOS/tasks.c **** 	}
4714:FreeRTOS/tasks.c **** 	else
4715:FreeRTOS/tasks.c **** 	{
4716:FreeRTOS/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 623              		.loc 1 4716 27 view .LVU182
4717:FreeRTOS/tasks.c **** 	}
4718:FreeRTOS/tasks.c **** 
4719:FreeRTOS/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:FreeRTOS/tasks.c **** 	{
4721:FreeRTOS/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 97


 624              		.loc 1 4721 3 view .LVU183
 625              		.loc 1 4721 5 is_stmt 0 view .LVU184
 626 002c B4F1FF3F 		cmp	r4, #-1
 627 0030 0DD0     		beq	.L45
 628              	.L41:
4722:FreeRTOS/tasks.c **** 		{
4723:FreeRTOS/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:FreeRTOS/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:FreeRTOS/tasks.c **** 			indefinitely. */
4726:FreeRTOS/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4727:FreeRTOS/tasks.c **** 		}
4728:FreeRTOS/tasks.c **** 		else
4729:FreeRTOS/tasks.c **** 		{
4730:FreeRTOS/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:FreeRTOS/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:FreeRTOS/tasks.c **** 			kernel will manage it correctly. */
4733:FreeRTOS/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 629              		.loc 1 4733 4 is_stmt 1 view .LVU185
 630              		.loc 1 4733 16 is_stmt 0 view .LVU186
 631 0032 3444     		add	r4, r4, r6
 632              	.LVL47:
4734:FreeRTOS/tasks.c **** 
4735:FreeRTOS/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:FreeRTOS/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 633              		.loc 1 4736 4 is_stmt 1 view .LVU187
 634 0034 124B     		ldr	r3, .L46+4
 635 0036 1B68     		ldr	r3, [r3]
 636 0038 5C60     		str	r4, [r3, #4]
4737:FreeRTOS/tasks.c **** 
4738:FreeRTOS/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 637              		.loc 1 4738 4 view .LVU188
 638              		.loc 1 4738 6 is_stmt 0 view .LVU189
 639 003a A642     		cmp	r6, r4
 640 003c 10D9     		bls	.L43
4739:FreeRTOS/tasks.c **** 			{
4740:FreeRTOS/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:FreeRTOS/tasks.c **** 				list. */
4742:FreeRTOS/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 641              		.loc 1 4742 5 is_stmt 1 view .LVU190
 642 003e 124B     		ldr	r3, .L46+12
 643 0040 1868     		ldr	r0, [r3]
 644              		.loc 1 4742 60 is_stmt 0 view .LVU191
 645 0042 0F4B     		ldr	r3, .L46+4
 646 0044 1968     		ldr	r1, [r3]
 647              		.loc 1 4742 5 view .LVU192
 648 0046 0431     		adds	r1, r1, #4
 649 0048 FFF7FEFF 		bl	vListInsert
 650              	.LVL48:
 651              	.L39:
4743:FreeRTOS/tasks.c **** 			}
4744:FreeRTOS/tasks.c **** 			else
4745:FreeRTOS/tasks.c **** 			{
4746:FreeRTOS/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:FreeRTOS/tasks.c **** 				is used. */
4748:FreeRTOS/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4749:FreeRTOS/tasks.c **** 
4750:FreeRTOS/tasks.c **** 				/* If the task entering the blocked state was placed at the
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 98


4751:FreeRTOS/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:FreeRTOS/tasks.c **** 				needs to be updated too. */
4753:FreeRTOS/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4754:FreeRTOS/tasks.c **** 				{
4755:FreeRTOS/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4756:FreeRTOS/tasks.c **** 				}
4757:FreeRTOS/tasks.c **** 				else
4758:FreeRTOS/tasks.c **** 				{
4759:FreeRTOS/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:FreeRTOS/tasks.c **** 				}
4761:FreeRTOS/tasks.c **** 			}
4762:FreeRTOS/tasks.c **** 		}
4763:FreeRTOS/tasks.c **** 	}
4764:FreeRTOS/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:FreeRTOS/tasks.c **** 	{
4766:FreeRTOS/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:FreeRTOS/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:FreeRTOS/tasks.c **** 		will manage it correctly. */
4769:FreeRTOS/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:FreeRTOS/tasks.c **** 
4771:FreeRTOS/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:FreeRTOS/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:FreeRTOS/tasks.c **** 
4774:FreeRTOS/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:FreeRTOS/tasks.c **** 		{
4776:FreeRTOS/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:FreeRTOS/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:FreeRTOS/tasks.c **** 		}
4779:FreeRTOS/tasks.c **** 		else
4780:FreeRTOS/tasks.c **** 		{
4781:FreeRTOS/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:FreeRTOS/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:FreeRTOS/tasks.c **** 
4784:FreeRTOS/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:FreeRTOS/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:FreeRTOS/tasks.c **** 			too. */
4787:FreeRTOS/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:FreeRTOS/tasks.c **** 			{
4789:FreeRTOS/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:FreeRTOS/tasks.c **** 			}
4791:FreeRTOS/tasks.c **** 			else
4792:FreeRTOS/tasks.c **** 			{
4793:FreeRTOS/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:FreeRTOS/tasks.c **** 			}
4795:FreeRTOS/tasks.c **** 		}
4796:FreeRTOS/tasks.c **** 
4797:FreeRTOS/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:FreeRTOS/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:FreeRTOS/tasks.c **** 	}
4800:FreeRTOS/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:FreeRTOS/tasks.c **** }
 652              		.loc 1 4801 1 view .LVU193
 653 004c 70BD     		pop	{r4, r5, r6, pc}
 654              	.LVL49:
 655              	.L45:
4721:FreeRTOS/tasks.c **** 		{
 656              		.loc 1 4721 41 discriminator 1 view .LVU194
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 99


 657 004e 002D     		cmp	r5, #0
 658 0050 EFD0     		beq	.L41
4726:FreeRTOS/tasks.c **** 		}
 659              		.loc 1 4726 4 is_stmt 1 view .LVU195
4726:FreeRTOS/tasks.c **** 		}
 660              		.loc 1 4726 56 is_stmt 0 view .LVU196
 661 0052 0B4B     		ldr	r3, .L46+4
 662 0054 1968     		ldr	r1, [r3]
4726:FreeRTOS/tasks.c **** 		}
 663              		.loc 1 4726 4 view .LVU197
 664 0056 0431     		adds	r1, r1, #4
 665 0058 0C48     		ldr	r0, .L46+16
 666 005a FFF7FEFF 		bl	vListInsertEnd
 667              	.LVL50:
 668 005e F5E7     		b	.L39
 669              	.LVL51:
 670              	.L43:
4748:FreeRTOS/tasks.c **** 
 671              		.loc 1 4748 5 is_stmt 1 view .LVU198
 672 0060 0B4B     		ldr	r3, .L46+20
 673 0062 1868     		ldr	r0, [r3]
4748:FreeRTOS/tasks.c **** 
 674              		.loc 1 4748 52 is_stmt 0 view .LVU199
 675 0064 064B     		ldr	r3, .L46+4
 676 0066 1968     		ldr	r1, [r3]
4748:FreeRTOS/tasks.c **** 
 677              		.loc 1 4748 5 view .LVU200
 678 0068 0431     		adds	r1, r1, #4
 679 006a FFF7FEFF 		bl	vListInsert
 680              	.LVL52:
4753:FreeRTOS/tasks.c **** 				{
 681              		.loc 1 4753 5 is_stmt 1 view .LVU201
4753:FreeRTOS/tasks.c **** 				{
 682              		.loc 1 4753 21 is_stmt 0 view .LVU202
 683 006e 094B     		ldr	r3, .L46+24
 684 0070 1B68     		ldr	r3, [r3]
4753:FreeRTOS/tasks.c **** 				{
 685              		.loc 1 4753 7 view .LVU203
 686 0072 A342     		cmp	r3, r4
 687 0074 EAD9     		bls	.L39
4755:FreeRTOS/tasks.c **** 				}
 688              		.loc 1 4755 6 is_stmt 1 view .LVU204
4755:FreeRTOS/tasks.c **** 				}
 689              		.loc 1 4755 27 is_stmt 0 view .LVU205
 690 0076 074B     		ldr	r3, .L46+24
 691 0078 1C60     		str	r4, [r3]
4759:FreeRTOS/tasks.c **** 				}
 692              		.loc 1 4759 30 is_stmt 1 view .LVU206
 693              		.loc 1 4801 1 is_stmt 0 view .LVU207
 694 007a E7E7     		b	.L39
 695              	.L47:
 696              		.align	2
 697              	.L46:
 698 007c 00000000 		.word	.LANCHOR14
 699 0080 00000000 		.word	.LANCHOR10
 700 0084 00000000 		.word	.LANCHOR13
 701 0088 00000000 		.word	.LANCHOR8
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 100


 702 008c 00000000 		.word	.LANCHOR0
 703 0090 00000000 		.word	.LANCHOR2
 704 0094 00000000 		.word	.LANCHOR3
 705              		.cfi_endproc
 706              	.LFE80:
 708              		.section	.text.xTaskCreate,"ax",%progbits
 709              		.align	1
 710              		.global	xTaskCreate
 711              		.syntax unified
 712              		.thumb
 713              		.thumb_func
 715              	xTaskCreate:
 716              	.LVL53:
 717              	.LFB34:
 682:FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 718              		.loc 1 682 2 is_stmt 1 view -0
 719              		.cfi_startproc
 720              		@ args = 8, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 682:FreeRTOS/tasks.c **** 	TCB_t *pxNewTCB;
 722              		.loc 1 682 2 is_stmt 0 view .LVU209
 723 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 724              	.LCFI5:
 725              		.cfi_def_cfa_offset 28
 726              		.cfi_offset 4, -28
 727              		.cfi_offset 5, -24
 728              		.cfi_offset 6, -20
 729              		.cfi_offset 7, -16
 730              		.cfi_offset 8, -12
 731              		.cfi_offset 9, -8
 732              		.cfi_offset 14, -4
 733 0004 85B0     		sub	sp, sp, #20
 734              	.LCFI6:
 735              		.cfi_def_cfa_offset 48
 736 0006 0746     		mov	r7, r0
 737 0008 8846     		mov	r8, r1
 738 000a 1446     		mov	r4, r2
 739 000c 1E46     		mov	r6, r3
 683:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 740              		.loc 1 683 2 is_stmt 1 view .LVU210
 684:FreeRTOS/tasks.c **** 
 741              		.loc 1 684 2 view .LVU211
 742              	.LBB26:
 713:FreeRTOS/tasks.c **** 
 743              		.loc 1 713 3 view .LVU212
 716:FreeRTOS/tasks.c **** 
 744              		.loc 1 716 4 view .LVU213
 716:FreeRTOS/tasks.c **** 
 745              		.loc 1 716 32 is_stmt 0 view .LVU214
 746 000e 9000     		lsls	r0, r2, #2
 747              	.LVL54:
 716:FreeRTOS/tasks.c **** 
 748              		.loc 1 716 32 view .LVU215
 749 0010 FFF7FEFF 		bl	pvPortMalloc
 750              	.LVL55:
 718:FreeRTOS/tasks.c **** 			{
 751              		.loc 1 718 4 is_stmt 1 view .LVU216
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 101


 718:FreeRTOS/tasks.c **** 			{
 752              		.loc 1 718 6 is_stmt 0 view .LVU217
 753 0014 F0B1     		cbz	r0, .L52
 754 0016 8146     		mov	r9, r0
 721:FreeRTOS/tasks.c **** 
 755              		.loc 1 721 5 is_stmt 1 view .LVU218
 721:FreeRTOS/tasks.c **** 
 756              		.loc 1 721 28 is_stmt 0 view .LVU219
 757 0018 5420     		movs	r0, #84
 758              	.LVL56:
 721:FreeRTOS/tasks.c **** 
 759              		.loc 1 721 28 view .LVU220
 760 001a FFF7FEFF 		bl	pvPortMalloc
 761              	.LVL57:
 723:FreeRTOS/tasks.c **** 				{
 762              		.loc 1 723 5 is_stmt 1 view .LVU221
 723:FreeRTOS/tasks.c **** 				{
 763              		.loc 1 723 7 is_stmt 0 view .LVU222
 764 001e 0546     		mov	r5, r0
 765 0020 A0B1     		cbz	r0, .L50
 726:FreeRTOS/tasks.c **** 				}
 766              		.loc 1 726 6 is_stmt 1 view .LVU223
 726:FreeRTOS/tasks.c **** 				}
 767              		.loc 1 726 24 is_stmt 0 view .LVU224
 768 0022 C0F83090 		str	r9, [r0, #48]
 769              	.LVL58:
 770              	.L51:
 726:FreeRTOS/tasks.c **** 				}
 771              		.loc 1 726 24 view .LVU225
 772              	.LBE26:
 742:FreeRTOS/tasks.c **** 		{
 773              		.loc 1 742 3 is_stmt 1 view .LVU226
 742:FreeRTOS/tasks.c **** 		{
 774              		.loc 1 742 5 is_stmt 0 view .LVU227
 775 0026 D5B1     		cbz	r5, .L53
 752:FreeRTOS/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 776              		.loc 1 752 4 is_stmt 1 view .LVU228
 777 0028 0023     		movs	r3, #0
 778 002a 0393     		str	r3, [sp, #12]
 779 002c 0295     		str	r5, [sp, #8]
 780 002e 0D9B     		ldr	r3, [sp, #52]
 781 0030 0193     		str	r3, [sp, #4]
 782 0032 0C9B     		ldr	r3, [sp, #48]
 783 0034 0093     		str	r3, [sp]
 784 0036 3346     		mov	r3, r6
 785 0038 2246     		mov	r2, r4
 786 003a 4146     		mov	r1, r8
 787 003c 3846     		mov	r0, r7
 788 003e FFF7FEFF 		bl	prvInitialiseNewTask
 789              	.LVL59:
 753:FreeRTOS/tasks.c **** 			xReturn = pdPASS;
 790              		.loc 1 753 4 view .LVU229
 791 0042 2846     		mov	r0, r5
 792 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 793              	.LVL60:
 754:FreeRTOS/tasks.c **** 		}
 794              		.loc 1 754 4 view .LVU230
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 102


 754:FreeRTOS/tasks.c **** 		}
 795              		.loc 1 754 12 is_stmt 0 view .LVU231
 796 0048 0120     		movs	r0, #1
 797 004a 05E0     		b	.L48
 798              	.LVL61:
 799              	.L50:
 800              	.LBB27:
 732:FreeRTOS/tasks.c **** 				}
 801              		.loc 1 732 6 is_stmt 1 view .LVU232
 802 004c 4846     		mov	r0, r9
 803              	.LVL62:
 732:FreeRTOS/tasks.c **** 				}
 804              		.loc 1 732 6 is_stmt 0 view .LVU233
 805 004e FFF7FEFF 		bl	vPortFree
 806              	.LVL63:
 807 0052 E8E7     		b	.L51
 808              	.LVL64:
 809              	.L52:
 732:FreeRTOS/tasks.c **** 				}
 810              		.loc 1 732 6 view .LVU234
 811              	.LBE27:
 758:FreeRTOS/tasks.c **** 		}
 812              		.loc 1 758 12 view .LVU235
 813 0054 4FF0FF30 		mov	r0, #-1
 814              	.LVL65:
 815              	.L48:
 762:FreeRTOS/tasks.c **** 
 816              		.loc 1 762 2 view .LVU236
 817 0058 05B0     		add	sp, sp, #20
 818              	.LCFI7:
 819              		.cfi_remember_state
 820              		.cfi_def_cfa_offset 28
 821              		@ sp needed
 822 005a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 823              	.LVL66:
 824              	.L53:
 825              	.LCFI8:
 826              		.cfi_restore_state
 758:FreeRTOS/tasks.c **** 		}
 827              		.loc 1 758 12 view .LVU237
 828 005e 4FF0FF30 		mov	r0, #-1
 829              	.LVL67:
 761:FreeRTOS/tasks.c **** 	}
 830              		.loc 1 761 3 is_stmt 1 view .LVU238
 761:FreeRTOS/tasks.c **** 	}
 831              		.loc 1 761 10 is_stmt 0 view .LVU239
 832 0062 F9E7     		b	.L48
 833              		.cfi_endproc
 834              	.LFE34:
 836              		.section	.text.vTaskDelete,"ax",%progbits
 837              		.align	1
 838              		.global	vTaskDelete
 839              		.syntax unified
 840              		.thumb
 841              		.thumb_func
 843              	vTaskDelete:
 844              	.LVL68:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 103


 845              	.LFB37:
1049:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 846              		.loc 1 1049 2 is_stmt 1 view -0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
1049:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 850              		.loc 1 1049 2 is_stmt 0 view .LVU241
 851 0000 38B5     		push	{r3, r4, r5, lr}
 852              	.LCFI9:
 853              		.cfi_def_cfa_offset 16
 854              		.cfi_offset 3, -16
 855              		.cfi_offset 4, -12
 856              		.cfi_offset 5, -8
 857              		.cfi_offset 14, -4
 858 0002 0446     		mov	r4, r0
1050:FreeRTOS/tasks.c **** 
 859              		.loc 1 1050 2 is_stmt 1 view .LVU242
1052:FreeRTOS/tasks.c **** 		{
 860              		.loc 1 1052 3 view .LVU243
 861 0004 FFF7FEFF 		bl	vPortEnterCritical
 862              	.LVL69:
1056:FreeRTOS/tasks.c **** 
 863              		.loc 1 1056 4 view .LVU244
1056:FreeRTOS/tasks.c **** 
 864              		.loc 1 1056 12 is_stmt 0 view .LVU245
 865 0008 002C     		cmp	r4, #0
 866 000a 33D0     		beq	.L63
 867              	.LVL70:
 868              	.L56:
1059:FreeRTOS/tasks.c **** 			{
 869              		.loc 1 1059 4 is_stmt 1 discriminator 4 view .LVU246
1059:FreeRTOS/tasks.c **** 			{
 870              		.loc 1 1059 8 is_stmt 0 discriminator 4 view .LVU247
 871 000c 251D     		adds	r5, r4, #4
 872 000e 2846     		mov	r0, r5
 873 0010 FFF7FEFF 		bl	uxListRemove
 874              	.LVL71:
1059:FreeRTOS/tasks.c **** 			{
 875              		.loc 1 1059 6 discriminator 4 view .LVU248
 876 0014 68B9     		cbnz	r0, .L57
1061:FreeRTOS/tasks.c **** 			}
 877              		.loc 1 1061 5 is_stmt 1 view .LVU249
 878 0016 E36A     		ldr	r3, [r4, #44]
 879 0018 03EB8301 		add	r1, r3, r3, lsl #2
 880 001c 214A     		ldr	r2, .L66
 881 001e 52F82120 		ldr	r2, [r2, r1, lsl #2]
 882 0022 32B9     		cbnz	r2, .L57
1061:FreeRTOS/tasks.c **** 			}
 883              		.loc 1 1061 5 discriminator 1 view .LVU250
 884 0024 0122     		movs	r2, #1
 885 0026 9A40     		lsls	r2, r2, r3
 886 0028 1F49     		ldr	r1, .L66+4
 887 002a 0B68     		ldr	r3, [r1]
 888 002c 23EA0203 		bic	r3, r3, r2
 889 0030 0B60     		str	r3, [r1]
 890              	.L57:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 104


1065:FreeRTOS/tasks.c **** 			}
 891              		.loc 1 1065 29 view .LVU251
1069:FreeRTOS/tasks.c **** 			{
 892              		.loc 1 1069 4 view .LVU252
1069:FreeRTOS/tasks.c **** 			{
 893              		.loc 1 1069 8 is_stmt 0 view .LVU253
 894 0032 A36A     		ldr	r3, [r4, #40]
1069:FreeRTOS/tasks.c **** 			{
 895              		.loc 1 1069 6 view .LVU254
 896 0034 1BB1     		cbz	r3, .L58
1071:FreeRTOS/tasks.c **** 			}
 897              		.loc 1 1071 5 is_stmt 1 view .LVU255
1071:FreeRTOS/tasks.c **** 			}
 898              		.loc 1 1071 14 is_stmt 0 view .LVU256
 899 0036 04F11800 		add	r0, r4, #24
 900 003a FFF7FEFF 		bl	uxListRemove
 901              	.LVL72:
 902              	.L58:
1075:FreeRTOS/tasks.c **** 			}
 903              		.loc 1 1075 29 is_stmt 1 view .LVU257
1082:FreeRTOS/tasks.c **** 
 904              		.loc 1 1082 4 view .LVU258
1082:FreeRTOS/tasks.c **** 
 905              		.loc 1 1082 16 is_stmt 0 view .LVU259
 906 003e 1B4A     		ldr	r2, .L66+8
 907 0040 1368     		ldr	r3, [r2]
 908 0042 0133     		adds	r3, r3, #1
 909 0044 1360     		str	r3, [r2]
1084:FreeRTOS/tasks.c **** 			{
 910              		.loc 1 1084 4 is_stmt 1 view .LVU260
1084:FreeRTOS/tasks.c **** 			{
 911              		.loc 1 1084 14 is_stmt 0 view .LVU261
 912 0046 1A4B     		ldr	r3, .L66+12
 913 0048 1B68     		ldr	r3, [r3]
1084:FreeRTOS/tasks.c **** 			{
 914              		.loc 1 1084 6 view .LVU262
 915 004a A342     		cmp	r3, r4
 916 004c 15D0     		beq	.L64
1107:FreeRTOS/tasks.c **** 				prvDeleteTCB( pxTCB );
 917              		.loc 1 1107 5 is_stmt 1 view .LVU263
 918 004e 194A     		ldr	r2, .L66+16
 919 0050 1368     		ldr	r3, [r2]
 920 0052 013B     		subs	r3, r3, #1
 921 0054 1360     		str	r3, [r2]
1108:FreeRTOS/tasks.c **** 
 922              		.loc 1 1108 5 view .LVU264
 923 0056 2046     		mov	r0, r4
 924 0058 FFF7FEFF 		bl	prvDeleteTCB
 925              	.LVL73:
1112:FreeRTOS/tasks.c **** 			}
 926              		.loc 1 1112 5 view .LVU265
 927 005c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 928              	.LVL74:
 929              	.L60:
1115:FreeRTOS/tasks.c **** 		}
 930              		.loc 1 1115 29 view .LVU266
1117:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 105


 931              		.loc 1 1117 3 view .LVU267
 932 0060 FFF7FEFF 		bl	vPortExitCritical
 933              	.LVL75:
1121:FreeRTOS/tasks.c **** 		{
 934              		.loc 1 1121 3 view .LVU268
1121:FreeRTOS/tasks.c **** 		{
 935              		.loc 1 1121 25 is_stmt 0 view .LVU269
 936 0064 144B     		ldr	r3, .L66+20
 937 0066 1B68     		ldr	r3, [r3]
1121:FreeRTOS/tasks.c **** 		{
 938              		.loc 1 1121 5 view .LVU270
 939 0068 1BB1     		cbz	r3, .L55
1123:FreeRTOS/tasks.c **** 			{
 940              		.loc 1 1123 4 is_stmt 1 view .LVU271
1123:FreeRTOS/tasks.c **** 			{
 941              		.loc 1 1123 14 is_stmt 0 view .LVU272
 942 006a 114B     		ldr	r3, .L66+12
 943 006c 1B68     		ldr	r3, [r3]
1123:FreeRTOS/tasks.c **** 			{
 944              		.loc 1 1123 6 view .LVU273
 945 006e A342     		cmp	r3, r4
 946 0070 0CD0     		beq	.L65
 947              	.L55:
1133:FreeRTOS/tasks.c **** 
 948              		.loc 1 1133 2 view .LVU274
 949 0072 38BD     		pop	{r3, r4, r5, pc}
 950              	.LVL76:
 951              	.L63:
1056:FreeRTOS/tasks.c **** 
 952              		.loc 1 1056 12 discriminator 1 view .LVU275
 953 0074 0E4B     		ldr	r3, .L66+12
 954 0076 1C68     		ldr	r4, [r3]
 955              	.LVL77:
1056:FreeRTOS/tasks.c **** 
 956              		.loc 1 1056 12 discriminator 1 view .LVU276
 957 0078 C8E7     		b	.L56
 958              	.LVL78:
 959              	.L64:
1091:FreeRTOS/tasks.c **** 
 960              		.loc 1 1091 5 is_stmt 1 view .LVU277
 961 007a 2946     		mov	r1, r5
 962 007c 0F48     		ldr	r0, .L66+24
 963 007e FFF7FEFF 		bl	vListInsertEnd
 964              	.LVL79:
1096:FreeRTOS/tasks.c **** 
 965              		.loc 1 1096 5 view .LVU278
 966 0082 0F4A     		ldr	r2, .L66+28
 967 0084 1368     		ldr	r3, [r2]
 968 0086 0133     		adds	r3, r3, #1
 969 0088 1360     		str	r3, [r2]
1103:FreeRTOS/tasks.c **** 			}
 970              		.loc 1 1103 54 view .LVU279
 971 008a E9E7     		b	.L60
 972              	.L65:
1125:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 973              		.loc 1 1125 46 view .LVU280
1126:FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 106


 974              		.loc 1 1126 5 view .LVU281
 975 008c 4FF0E023 		mov	r3, #-536813568
 976 0090 4FF08052 		mov	r2, #268435456
 977 0094 C3F8042D 		str	r2, [r3, #3332]
1126:FreeRTOS/tasks.c **** 			}
 978              		.loc 1 1126 5 view .LVU282
 979              		.syntax unified
 980              	@ 1126 "FreeRTOS/tasks.c" 1
 981 0098 BFF34F8F 		dsb
 982              	@ 0 "" 2
1126:FreeRTOS/tasks.c **** 			}
 983              		.loc 1 1126 5 view .LVU283
 984              	@ 1126 "FreeRTOS/tasks.c" 1
 985 009c BFF36F8F 		isb
 986              	@ 0 "" 2
1126:FreeRTOS/tasks.c **** 			}
 987              		.loc 1 1126 27 view .LVU284
1130:FreeRTOS/tasks.c **** 			}
 988              		.loc 1 1130 29 view .LVU285
1133:FreeRTOS/tasks.c **** 
 989              		.loc 1 1133 2 is_stmt 0 view .LVU286
 990              		.thumb
 991              		.syntax unified
 992 00a0 E7E7     		b	.L55
 993              	.L67:
 994 00a2 00BF     		.align	2
 995              	.L66:
 996 00a4 00000000 		.word	.LANCHOR4
 997 00a8 00000000 		.word	.LANCHOR13
 998 00ac 00000000 		.word	.LANCHOR12
 999 00b0 00000000 		.word	.LANCHOR10
 1000 00b4 00000000 		.word	.LANCHOR9
 1001 00b8 00000000 		.word	.LANCHOR11
 1002 00bc 00000000 		.word	.LANCHOR7
 1003 00c0 00000000 		.word	.LANCHOR15
 1004              		.cfi_endproc
 1005              	.LFE37:
 1007              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1008              		.align	1
 1009              		.global	uxTaskPriorityGet
 1010              		.syntax unified
 1011              		.thumb
 1012              		.thumb_func
 1014              	uxTaskPriorityGet:
 1015              	.LVL80:
 1016              	.LFB40:
1341:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1017              		.loc 1 1341 2 is_stmt 1 view -0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
1341:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1021              		.loc 1 1341 2 is_stmt 0 view .LVU288
 1022 0000 10B5     		push	{r4, lr}
 1023              	.LCFI10:
 1024              		.cfi_def_cfa_offset 8
 1025              		.cfi_offset 4, -8
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 107


 1026              		.cfi_offset 14, -4
 1027 0002 0446     		mov	r4, r0
1342:FreeRTOS/tasks.c **** 	UBaseType_t uxReturn;
 1028              		.loc 1 1342 2 is_stmt 1 view .LVU289
1343:FreeRTOS/tasks.c **** 
 1029              		.loc 1 1343 2 view .LVU290
1345:FreeRTOS/tasks.c **** 		{
 1030              		.loc 1 1345 3 view .LVU291
 1031 0004 FFF7FEFF 		bl	vPortEnterCritical
 1032              	.LVL81:
1349:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1033              		.loc 1 1349 4 view .LVU292
1349:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1034              		.loc 1 1349 12 is_stmt 0 view .LVU293
 1035 0008 24B1     		cbz	r4, .L71
 1036              	.LVL82:
 1037              	.L69:
1350:FreeRTOS/tasks.c **** 		}
 1038              		.loc 1 1350 4 is_stmt 1 discriminator 4 view .LVU294
1350:FreeRTOS/tasks.c **** 		}
 1039              		.loc 1 1350 13 is_stmt 0 discriminator 4 view .LVU295
 1040 000a E46A     		ldr	r4, [r4, #44]
 1041              	.LVL83:
1352:FreeRTOS/tasks.c **** 
 1042              		.loc 1 1352 3 is_stmt 1 discriminator 4 view .LVU296
 1043 000c FFF7FEFF 		bl	vPortExitCritical
 1044              	.LVL84:
1354:FreeRTOS/tasks.c **** 	}
 1045              		.loc 1 1354 3 discriminator 4 view .LVU297
1355:FreeRTOS/tasks.c **** 
 1046              		.loc 1 1355 2 is_stmt 0 discriminator 4 view .LVU298
 1047 0010 2046     		mov	r0, r4
 1048 0012 10BD     		pop	{r4, pc}
 1049              	.LVL85:
 1050              	.L71:
1349:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1051              		.loc 1 1349 12 discriminator 1 view .LVU299
 1052 0014 014B     		ldr	r3, .L72
 1053 0016 1C68     		ldr	r4, [r3]
 1054              	.LVL86:
1349:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1055              		.loc 1 1349 12 discriminator 1 view .LVU300
 1056 0018 F7E7     		b	.L69
 1057              	.L73:
 1058 001a 00BF     		.align	2
 1059              	.L72:
 1060 001c 00000000 		.word	.LANCHOR10
 1061              		.cfi_endproc
 1062              	.LFE40:
 1064              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1065              		.align	1
 1066              		.global	uxTaskPriorityGetFromISR
 1067              		.syntax unified
 1068              		.thumb
 1069              		.thumb_func
 1071              	uxTaskPriorityGetFromISR:
 1072              	.LVL87:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 108


 1073              	.LFB41:
1363:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1074              		.loc 1 1363 2 is_stmt 1 view -0
 1075              		.cfi_startproc
 1076              		@ args = 0, pretend = 0, frame = 0
 1077              		@ frame_needed = 0, uses_anonymous_args = 0
 1078              		@ link register save eliminated.
1364:FreeRTOS/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
 1079              		.loc 1 1364 2 view .LVU302
1365:FreeRTOS/tasks.c **** 
 1080              		.loc 1 1365 2 view .LVU303
1383:FreeRTOS/tasks.c **** 
 1081              		.loc 1 1383 45 view .LVU304
1385:FreeRTOS/tasks.c **** 		{
 1082              		.loc 1 1385 3 view .LVU305
 1083              	.LBB28:
 1084              	.LBI28:
 1085              		.file 2 "FreeRTOS/portable/ARM_CM3/portmacro.h"
   1:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:FreeRTOS/portable/ARM_CM3/portmacro.h ****     All rights reserved
   4:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
   5:FreeRTOS/portable/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
   7:FreeRTOS/portable/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
   9:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/portable/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  13:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  14:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  19:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  20:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/portable/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/portable/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  25:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  26:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *                                                                       *
  27:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *                                                                       *
  32:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *                                                                       *
  37:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  38:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  39:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 109


  40:FreeRTOS/portable/ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/portable/ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  43:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/portable/ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/portable/ARM_CM3/portmacro.h ****     participating in the support forum.
  46:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  47:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/portable/ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  52:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/portable/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/portable/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  56:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/portable/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  63:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/portable/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/portable/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/portable/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:FreeRTOS/portable/ARM_CM3/portmacro.h **** */
  69:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  70:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  71:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  74:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:FreeRTOS/portable/ARM_CM3/portmacro.h **** extern "C" {
  76:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
  77:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  78:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:FreeRTOS/portable/ARM_CM3/portmacro.h ****  *
  81:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:FreeRTOS/portable/ARM_CM3/portmacro.h ****  *
  84:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:FreeRTOS/portable/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:FreeRTOS/portable/ARM_CM3/portmacro.h ****  */
  87:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  88:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Type definitions. */
  89:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portCHAR		char
  90:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portLONG		long
  93:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSHORT		short
  94:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 110


  97:FreeRTOS/portable/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:FreeRTOS/portable/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:FreeRTOS/portable/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 101:FreeRTOS/portable/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:FreeRTOS/portable/ARM_CM3/portmacro.h **** #else
 105:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 112:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 114:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 120:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:FreeRTOS/portable/ARM_CM3/portmacro.h **** {																				\
 123:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:FreeRTOS/portable/ARM_CM3/portmacro.h **** 																				\
 126:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 131:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 132:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Critical section management. */
 139:FreeRTOS/portable/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:FreeRTOS/portable/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 148:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 150:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:FreeRTOS/portable/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:FreeRTOS/portable/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 153:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 111


 154:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 157:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 162:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 164:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 168:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 169:FreeRTOS/portable/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 171:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	{
 174:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 176:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		return ucReturn;
 178:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	}
 179:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 180:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#endif
 184:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 185:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 189:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 191:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 193:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 195:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 197:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 201:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 202:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portNOP()
 204:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 205:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 207:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 210:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 112


 211:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 213:FreeRTOS/portable/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:FreeRTOS/portable/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 216:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 219:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	{
 221:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	}
 223:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	else
 224:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	{
 225:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	}
 227:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 228:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	return xReturn;
 229:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 230:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 231:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 233:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 235:FreeRTOS/portable/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 237:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile
 238:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 239:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 242:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 243:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	);
 245:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 246:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 247:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 248:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 249:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1086              		.loc 2 249 34 view .LVU306
 1087              	.LBB29:
 250:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 251:FreeRTOS/portable/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1088              		.loc 2 251 1 view .LVU307
 252:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 253:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile
 1089              		.loc 2 253 2 view .LVU308
 1090              		.syntax unified
 1091              	@ 253 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1092 0000 EFF31183 			mrs r3, basepri											
 1093 0004 4FF05002 		mov r2, #80												
 1094 0008 82F31188 		msr basepri, r2											
 1095 000c BFF36F8F 		isb														
 1096 0010 BFF34F8F 		dsb														
 1097              	
 1098              	@ 0 "" 2
 1099              	.LVL88:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 113


 254:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 255:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 259:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 260:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	);
 262:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 263:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	warnings. */
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1100              		.loc 2 265 2 view .LVU309
 1101              		.loc 2 265 2 is_stmt 0 view .LVU310
 1102              		.thumb
 1103              		.syntax unified
 1104              	.LBE29:
 1105              	.LBE28:
1389:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1106              		.loc 1 1389 4 is_stmt 1 view .LVU311
1389:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1107              		.loc 1 1389 12 is_stmt 0 view .LVU312
 1108 0014 18B1     		cbz	r0, .L76
 1109              	.LVL89:
 1110              	.L75:
1390:FreeRTOS/tasks.c **** 		}
 1111              		.loc 1 1390 4 is_stmt 1 discriminator 4 view .LVU313
1390:FreeRTOS/tasks.c **** 		}
 1112              		.loc 1 1390 13 is_stmt 0 discriminator 4 view .LVU314
 1113 0016 C06A     		ldr	r0, [r0, #44]
 1114              	.LVL90:
1392:FreeRTOS/tasks.c **** 
 1115              		.loc 1 1392 3 is_stmt 1 discriminator 4 view .LVU315
 1116              	.LBB30:
 1117              	.LBI30:
 266:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 267:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 268:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 269:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1118              		.loc 2 269 30 discriminator 4 view .LVU316
 1119              	.LBB31:
 270:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 271:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile
 1120              		.loc 2 271 2 discriminator 4 view .LVU317
 1121              		.syntax unified
 1122              	@ 271 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1123 0018 83F31188 			msr basepri, r3	
 1124              	@ 0 "" 2
 1125              	.LVL91:
 1126              		.loc 2 271 2 is_stmt 0 discriminator 4 view .LVU318
 1127              		.thumb
 1128              		.syntax unified
 1129              	.LBE31:
 1130              	.LBE30:
1394:FreeRTOS/tasks.c **** 	}
 1131              		.loc 1 1394 3 is_stmt 1 discriminator 4 view .LVU319
1395:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 114


 1132              		.loc 1 1395 2 is_stmt 0 discriminator 4 view .LVU320
 1133 001c 7047     		bx	lr
 1134              	.LVL92:
 1135              	.L76:
1389:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1136              		.loc 1 1389 12 discriminator 1 view .LVU321
 1137 001e 014A     		ldr	r2, .L77
 1138 0020 1068     		ldr	r0, [r2]
 1139              	.LVL93:
1389:FreeRTOS/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1140              		.loc 1 1389 12 discriminator 1 view .LVU322
 1141 0022 F8E7     		b	.L75
 1142              	.L78:
 1143              		.align	2
 1144              	.L77:
 1145 0024 00000000 		.word	.LANCHOR10
 1146              		.cfi_endproc
 1147              	.LFE41:
 1149              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1150              		.align	1
 1151              		.global	vTaskPrioritySet
 1152              		.syntax unified
 1153              		.thumb
 1154              		.thumb_func
 1156              	vTaskPrioritySet:
 1157              	.LVL94:
 1158              	.LFB42:
1403:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1159              		.loc 1 1403 2 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
1403:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 1163              		.loc 1 1403 2 is_stmt 0 view .LVU324
 1164 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1165              	.LCFI11:
 1166              		.cfi_def_cfa_offset 24
 1167              		.cfi_offset 3, -24
 1168              		.cfi_offset 4, -20
 1169              		.cfi_offset 5, -16
 1170              		.cfi_offset 6, -12
 1171              		.cfi_offset 7, -8
 1172              		.cfi_offset 14, -4
 1173 0002 0446     		mov	r4, r0
 1174 0004 0D46     		mov	r5, r1
1404:FreeRTOS/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1175              		.loc 1 1404 2 is_stmt 1 view .LVU325
1405:FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1176              		.loc 1 1405 2 view .LVU326
1406:FreeRTOS/tasks.c **** 
 1177              		.loc 1 1406 2 view .LVU327
 1178              	.LVL95:
1408:FreeRTOS/tasks.c **** 
 1179              		.loc 1 1408 59 view .LVU328
1411:FreeRTOS/tasks.c **** 		{
 1180              		.loc 1 1411 3 view .LVU329
1411:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 115


 1181              		.loc 1 1411 5 is_stmt 0 view .LVU330
 1182 0006 0429     		cmp	r1, #4
 1183 0008 00D9     		bls	.L80
1413:FreeRTOS/tasks.c **** 		}
 1184              		.loc 1 1413 18 view .LVU331
 1185 000a 0425     		movs	r5, #4
 1186              	.L80:
 1187              	.LVL96:
1417:FreeRTOS/tasks.c **** 		}
 1188              		.loc 1 1417 28 is_stmt 1 view .LVU332
1420:FreeRTOS/tasks.c **** 		{
 1189              		.loc 1 1420 3 view .LVU333
 1190 000c FFF7FEFF 		bl	vPortEnterCritical
 1191              	.LVL97:
1424:FreeRTOS/tasks.c **** 
 1192              		.loc 1 1424 4 view .LVU334
1424:FreeRTOS/tasks.c **** 
 1193              		.loc 1 1424 12 is_stmt 0 view .LVU335
 1194 0010 74B1     		cbz	r4, .L94
 1195              	.LVL98:
 1196              	.L81:
1426:FreeRTOS/tasks.c **** 
 1197              		.loc 1 1426 50 is_stmt 1 discriminator 4 view .LVU336
1430:FreeRTOS/tasks.c **** 			}
 1198              		.loc 1 1430 5 discriminator 4 view .LVU337
1430:FreeRTOS/tasks.c **** 			}
 1199              		.loc 1 1430 27 is_stmt 0 discriminator 4 view .LVU338
 1200 0012 636C     		ldr	r3, [r4, #68]
 1201              	.LVL99:
1438:FreeRTOS/tasks.c **** 			{
 1202              		.loc 1 1438 4 is_stmt 1 discriminator 4 view .LVU339
1438:FreeRTOS/tasks.c **** 			{
 1203              		.loc 1 1438 6 is_stmt 0 discriminator 4 view .LVU340
 1204 0014 9D42     		cmp	r5, r3
 1205 0016 30D0     		beq	.L82
1442:FreeRTOS/tasks.c **** 				{
 1206              		.loc 1 1442 5 is_stmt 1 view .LVU341
1442:FreeRTOS/tasks.c **** 				{
 1207              		.loc 1 1442 7 is_stmt 0 view .LVU342
 1208 0018 0DD9     		bls	.L83
1444:FreeRTOS/tasks.c **** 					{
 1209              		.loc 1 1444 6 is_stmt 1 view .LVU343
1444:FreeRTOS/tasks.c **** 					{
 1210              		.loc 1 1444 16 is_stmt 0 view .LVU344
 1211 001a 2B4A     		ldr	r2, .L97
 1212 001c 1268     		ldr	r2, [r2]
1444:FreeRTOS/tasks.c **** 					{
 1213              		.loc 1 1444 8 view .LVU345
 1214 001e A242     		cmp	r2, r4
 1215 0020 2ED0     		beq	.L90
1449:FreeRTOS/tasks.c **** 						{
 1216              		.loc 1 1449 7 is_stmt 1 view .LVU346
1449:FreeRTOS/tasks.c **** 						{
 1217              		.loc 1 1449 40 is_stmt 0 view .LVU347
 1218 0022 294A     		ldr	r2, .L97
 1219 0024 1268     		ldr	r2, [r2]
 1220 0026 D26A     		ldr	r2, [r2, #44]
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 116


1449:FreeRTOS/tasks.c **** 						{
 1221              		.loc 1 1449 9 view .LVU348
 1222 0028 AA42     		cmp	r2, r5
 1223 002a 2BD9     		bls	.L91
1406:FreeRTOS/tasks.c **** 
 1224              		.loc 1 1406 13 view .LVU349
 1225 002c 0027     		movs	r7, #0
 1226 002e 07E0     		b	.L84
 1227              	.LVL100:
 1228              	.L94:
1424:FreeRTOS/tasks.c **** 
 1229              		.loc 1 1424 12 discriminator 1 view .LVU350
 1230 0030 254B     		ldr	r3, .L97
 1231 0032 1C68     		ldr	r4, [r3]
 1232              	.LVL101:
1424:FreeRTOS/tasks.c **** 
 1233              		.loc 1 1424 12 discriminator 1 view .LVU351
 1234 0034 EDE7     		b	.L81
 1235              	.LVL102:
 1236              	.L83:
1465:FreeRTOS/tasks.c **** 				{
 1237              		.loc 1 1465 10 is_stmt 1 view .LVU352
1465:FreeRTOS/tasks.c **** 				{
 1238              		.loc 1 1465 20 is_stmt 0 view .LVU353
 1239 0036 244A     		ldr	r2, .L97
 1240 0038 1268     		ldr	r2, [r2]
1465:FreeRTOS/tasks.c **** 				{
 1241              		.loc 1 1465 12 view .LVU354
 1242 003a A242     		cmp	r2, r4
 1243 003c 24D0     		beq	.L92
1406:FreeRTOS/tasks.c **** 
 1244              		.loc 1 1406 13 view .LVU355
 1245 003e 0027     		movs	r7, #0
 1246              	.L84:
 1247              	.LVL103:
1477:FreeRTOS/tasks.c **** 
 1248              		.loc 1 1477 5 is_stmt 1 view .LVU356
1482:FreeRTOS/tasks.c **** 
 1249              		.loc 1 1482 5 view .LVU357
1482:FreeRTOS/tasks.c **** 
 1250              		.loc 1 1482 27 is_stmt 0 view .LVU358
 1251 0040 E66A     		ldr	r6, [r4, #44]
 1252              	.LVL104:
1488:FreeRTOS/tasks.c **** 					{
 1253              		.loc 1 1488 6 is_stmt 1 view .LVU359
1488:FreeRTOS/tasks.c **** 					{
 1254              		.loc 1 1488 8 is_stmt 0 view .LVU360
 1255 0042 B342     		cmp	r3, r6
 1256 0044 22D0     		beq	.L95
 1257              	.L85:
1494:FreeRTOS/tasks.c **** 					}
 1258              		.loc 1 1494 31 is_stmt 1 view .LVU361
1498:FreeRTOS/tasks.c **** 				}
 1259              		.loc 1 1498 6 view .LVU362
1498:FreeRTOS/tasks.c **** 				}
 1260              		.loc 1 1498 28 is_stmt 0 view .LVU363
 1261 0046 6564     		str	r5, [r4, #68]
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 117


1508:FreeRTOS/tasks.c **** 				{
 1262              		.loc 1 1508 5 is_stmt 1 view .LVU364
1508:FreeRTOS/tasks.c **** 				{
 1263              		.loc 1 1508 11 is_stmt 0 view .LVU365
 1264 0048 A369     		ldr	r3, [r4, #24]
 1265              	.LVL105:
1508:FreeRTOS/tasks.c **** 				{
 1266              		.loc 1 1508 7 view .LVU366
 1267 004a 002B     		cmp	r3, #0
 1268 004c 02DB     		blt	.L86
1510:FreeRTOS/tasks.c **** 				}
 1269              		.loc 1 1510 6 is_stmt 1 view .LVU367
 1270 004e C5F10505 		rsb	r5, r5, #5
 1271              	.LVL106:
1510:FreeRTOS/tasks.c **** 				}
 1272              		.loc 1 1510 6 is_stmt 0 view .LVU368
 1273 0052 A561     		str	r5, [r4, #24]
 1274              	.L86:
1514:FreeRTOS/tasks.c **** 				}
 1275              		.loc 1 1514 30 is_stmt 1 view .LVU369
1521:FreeRTOS/tasks.c **** 				{
 1276              		.loc 1 1521 5 view .LVU370
1521:FreeRTOS/tasks.c **** 				{
 1277              		.loc 1 1521 9 is_stmt 0 view .LVU371
 1278 0054 6169     		ldr	r1, [r4, #20]
 1279 0056 06EB8603 		add	r3, r6, r6, lsl #2
 1280 005a 1C4A     		ldr	r2, .L97+4
 1281 005c 02EB8303 		add	r3, r2, r3, lsl #2
1521:FreeRTOS/tasks.c **** 				{
 1282              		.loc 1 1521 112 view .LVU372
 1283 0060 9942     		cmp	r1, r3
 1284 0062 15D0     		beq	.L96
 1285              	.LVL107:
 1286              	.L87:
1541:FreeRTOS/tasks.c **** 				}
 1287              		.loc 1 1541 30 is_stmt 1 view .LVU373
1544:FreeRTOS/tasks.c **** 				{
 1288              		.loc 1 1544 5 view .LVU374
1544:FreeRTOS/tasks.c **** 				{
 1289              		.loc 1 1544 7 is_stmt 0 view .LVU375
 1290 0064 4FB1     		cbz	r7, .L82
1546:FreeRTOS/tasks.c **** 				}
 1291              		.loc 1 1546 6 is_stmt 1 view .LVU376
 1292 0066 4FF0E023 		mov	r3, #-536813568
 1293 006a 4FF08052 		mov	r2, #268435456
 1294 006e C3F8042D 		str	r2, [r3, #3332]
1546:FreeRTOS/tasks.c **** 				}
 1295              		.loc 1 1546 6 view .LVU377
 1296              		.syntax unified
 1297              	@ 1546 "FreeRTOS/tasks.c" 1
 1298 0072 BFF34F8F 		dsb
 1299              	@ 0 "" 2
1546:FreeRTOS/tasks.c **** 				}
 1300              		.loc 1 1546 6 view .LVU378
 1301              	@ 1546 "FreeRTOS/tasks.c" 1
 1302 0076 BFF36F8F 		isb
 1303              	@ 0 "" 2
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 118


1546:FreeRTOS/tasks.c **** 				}
 1304              		.loc 1 1546 37 view .LVU379
 1305              	.LVL108:
 1306              		.thumb
 1307              		.syntax unified
 1308              	.L82:
1550:FreeRTOS/tasks.c **** 				}
 1309              		.loc 1 1550 30 view .LVU380
1555:FreeRTOS/tasks.c **** 			}
 1310              		.loc 1 1555 5 view .LVU381
1558:FreeRTOS/tasks.c **** 	}
 1311              		.loc 1 1558 3 view .LVU382
 1312 007a FFF7FEFF 		bl	vPortExitCritical
 1313              	.LVL109:
1559:FreeRTOS/tasks.c **** 
 1314              		.loc 1 1559 2 is_stmt 0 view .LVU383
 1315 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1316              	.LVL110:
 1317              	.L90:
1406:FreeRTOS/tasks.c **** 
 1318              		.loc 1 1406 13 view .LVU384
 1319 0080 0027     		movs	r7, #0
 1320 0082 DDE7     		b	.L84
 1321              	.L91:
1451:FreeRTOS/tasks.c **** 						}
 1322              		.loc 1 1451 23 view .LVU385
 1323 0084 0127     		movs	r7, #1
 1324 0086 DBE7     		b	.L84
 1325              	.L92:
1470:FreeRTOS/tasks.c **** 				}
 1326              		.loc 1 1470 21 view .LVU386
 1327 0088 0127     		movs	r7, #1
 1328 008a D9E7     		b	.L84
 1329              	.LVL111:
 1330              	.L95:
1490:FreeRTOS/tasks.c **** 					}
 1331              		.loc 1 1490 7 is_stmt 1 view .LVU387
1490:FreeRTOS/tasks.c **** 					}
 1332              		.loc 1 1490 25 is_stmt 0 view .LVU388
 1333 008c E562     		str	r5, [r4, #44]
 1334 008e DAE7     		b	.L85
 1335              	.LVL112:
 1336              	.L96:
1526:FreeRTOS/tasks.c **** 					{
 1337              		.loc 1 1526 6 is_stmt 1 view .LVU389
1526:FreeRTOS/tasks.c **** 					{
 1338              		.loc 1 1526 10 is_stmt 0 view .LVU390
 1339 0090 251D     		adds	r5, r4, #4
 1340 0092 2846     		mov	r0, r5
 1341 0094 FFF7FEFF 		bl	uxListRemove
 1342              	.LVL113:
1526:FreeRTOS/tasks.c **** 					{
 1343              		.loc 1 1526 8 view .LVU391
 1344 0098 30B9     		cbnz	r0, .L88
1531:FreeRTOS/tasks.c **** 					}
 1345              		.loc 1 1531 7 is_stmt 1 view .LVU392
 1346 009a 0123     		movs	r3, #1
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 119


 1347 009c B340     		lsls	r3, r3, r6
 1348 009e 0C4A     		ldr	r2, .L97+8
 1349 00a0 1668     		ldr	r6, [r2]
 1350              	.LVL114:
1531:FreeRTOS/tasks.c **** 					}
 1351              		.loc 1 1531 7 is_stmt 0 view .LVU393
 1352 00a2 26EA0306 		bic	r6, r6, r3
 1353 00a6 1660     		str	r6, [r2]
 1354              	.L88:
1535:FreeRTOS/tasks.c **** 					}
 1355              		.loc 1 1535 31 is_stmt 1 view .LVU394
1537:FreeRTOS/tasks.c **** 				}
 1356              		.loc 1 1537 6 view .LVU395
1537:FreeRTOS/tasks.c **** 				}
 1357              		.loc 1 1537 6 view .LVU396
 1358 00a8 E06A     		ldr	r0, [r4, #44]
 1359 00aa 0123     		movs	r3, #1
 1360 00ac 8340     		lsls	r3, r3, r0
 1361 00ae 084A     		ldr	r2, .L97+8
 1362 00b0 1168     		ldr	r1, [r2]
 1363 00b2 0B43     		orrs	r3, r3, r1
 1364 00b4 1360     		str	r3, [r2]
1537:FreeRTOS/tasks.c **** 				}
 1365              		.loc 1 1537 6 view .LVU397
 1366 00b6 00EB8000 		add	r0, r0, r0, lsl #2
 1367 00ba 2946     		mov	r1, r5
 1368 00bc 034B     		ldr	r3, .L97+4
 1369 00be 03EB8000 		add	r0, r3, r0, lsl #2
 1370 00c2 FFF7FEFF 		bl	vListInsertEnd
 1371              	.LVL115:
1537:FreeRTOS/tasks.c **** 				}
 1372              		.loc 1 1537 36 view .LVU398
 1373 00c6 CDE7     		b	.L87
 1374              	.L98:
 1375              		.align	2
 1376              	.L97:
 1377 00c8 00000000 		.word	.LANCHOR10
 1378 00cc 00000000 		.word	.LANCHOR4
 1379 00d0 00000000 		.word	.LANCHOR13
 1380              		.cfi_endproc
 1381              	.LFE42:
 1383              		.section	.text.vTaskResume,"ax",%progbits
 1384              		.align	1
 1385              		.global	vTaskResume
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1390              	vTaskResume:
 1391              	.LVL116:
 1392              	.LFB45:
1703:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1393              		.loc 1 1703 2 view -0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
1704:FreeRTOS/tasks.c **** 
 1397              		.loc 1 1704 2 view .LVU400
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 120


1707:FreeRTOS/tasks.c **** 
 1398              		.loc 1 1707 32 view .LVU401
1711:FreeRTOS/tasks.c **** 		{
 1399              		.loc 1 1711 3 view .LVU402
1711:FreeRTOS/tasks.c **** 		{
 1400              		.loc 1 1711 5 is_stmt 0 view .LVU403
 1401 0000 90B3     		cbz	r0, .L103
1703:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1402              		.loc 1 1703 2 discriminator 1 view .LVU404
 1403 0002 38B5     		push	{r3, r4, r5, lr}
 1404              	.LCFI12:
 1405              		.cfi_def_cfa_offset 16
 1406              		.cfi_offset 3, -16
 1407              		.cfi_offset 4, -12
 1408              		.cfi_offset 5, -8
 1409              		.cfi_offset 14, -4
 1410 0004 0446     		mov	r4, r0
1711:FreeRTOS/tasks.c **** 		{
 1411              		.loc 1 1711 36 discriminator 1 view .LVU405
 1412 0006 194B     		ldr	r3, .L107
 1413 0008 1B68     		ldr	r3, [r3]
1711:FreeRTOS/tasks.c **** 		{
 1414              		.loc 1 1711 25 discriminator 1 view .LVU406
 1415 000a 8342     		cmp	r3, r0
 1416 000c 07D0     		beq	.L99
1713:FreeRTOS/tasks.c **** 			{
 1417              		.loc 1 1713 4 is_stmt 1 view .LVU407
 1418 000e FFF7FEFF 		bl	vPortEnterCritical
 1419              	.LVL117:
1715:FreeRTOS/tasks.c **** 				{
 1420              		.loc 1 1715 5 view .LVU408
1715:FreeRTOS/tasks.c **** 				{
 1421              		.loc 1 1715 9 is_stmt 0 view .LVU409
 1422 0012 2046     		mov	r0, r4
 1423 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1424              	.LVL118:
1715:FreeRTOS/tasks.c **** 				{
 1425              		.loc 1 1715 7 view .LVU410
 1426 0018 10B9     		cbnz	r0, .L106
 1427              	.L101:
1739:FreeRTOS/tasks.c **** 				}
 1428              		.loc 1 1739 30 is_stmt 1 view .LVU411
1742:FreeRTOS/tasks.c **** 		}
 1429              		.loc 1 1742 4 view .LVU412
 1430 001a FFF7FEFF 		bl	vPortExitCritical
 1431              	.LVL119:
1746:FreeRTOS/tasks.c **** 		}
 1432              		.loc 1 1746 28 view .LVU413
 1433              	.L99:
1748:FreeRTOS/tasks.c **** 
 1434              		.loc 1 1748 2 is_stmt 0 view .LVU414
 1435 001e 38BD     		pop	{r3, r4, r5, pc}
 1436              	.LVL120:
 1437              	.L106:
1717:FreeRTOS/tasks.c **** 
 1438              		.loc 1 1717 31 is_stmt 1 view .LVU415
1721:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 121


 1439              		.loc 1 1721 6 view .LVU416
1721:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1440              		.loc 1 1721 15 is_stmt 0 view .LVU417
 1441 0020 251D     		adds	r5, r4, #4
 1442 0022 2846     		mov	r0, r5
 1443 0024 FFF7FEFF 		bl	uxListRemove
 1444              	.LVL121:
1722:FreeRTOS/tasks.c **** 
 1445              		.loc 1 1722 6 is_stmt 1 view .LVU418
1722:FreeRTOS/tasks.c **** 
 1446              		.loc 1 1722 6 view .LVU419
 1447 0028 E06A     		ldr	r0, [r4, #44]
 1448 002a 0123     		movs	r3, #1
 1449 002c 8340     		lsls	r3, r3, r0
 1450 002e 104A     		ldr	r2, .L107+4
 1451 0030 1168     		ldr	r1, [r2]
 1452 0032 0B43     		orrs	r3, r3, r1
 1453 0034 1360     		str	r3, [r2]
1722:FreeRTOS/tasks.c **** 
 1454              		.loc 1 1722 6 view .LVU420
 1455 0036 00EB8000 		add	r0, r0, r0, lsl #2
 1456 003a 2946     		mov	r1, r5
 1457 003c 0D4B     		ldr	r3, .L107+8
 1458 003e 03EB8000 		add	r0, r3, r0, lsl #2
 1459 0042 FFF7FEFF 		bl	vListInsertEnd
 1460              	.LVL122:
1722:FreeRTOS/tasks.c **** 
 1461              		.loc 1 1722 36 view .LVU421
1725:FreeRTOS/tasks.c **** 					{
 1462              		.loc 1 1725 6 view .LVU422
1725:FreeRTOS/tasks.c **** 					{
 1463              		.loc 1 1725 15 is_stmt 0 view .LVU423
 1464 0046 E26A     		ldr	r2, [r4, #44]
1725:FreeRTOS/tasks.c **** 					{
 1465              		.loc 1 1725 43 view .LVU424
 1466 0048 084B     		ldr	r3, .L107
 1467 004a 1B68     		ldr	r3, [r3]
 1468 004c DB6A     		ldr	r3, [r3, #44]
1725:FreeRTOS/tasks.c **** 					{
 1469              		.loc 1 1725 8 view .LVU425
 1470 004e 9A42     		cmp	r2, r3
 1471 0050 E3D3     		bcc	.L101
1730:FreeRTOS/tasks.c **** 					}
 1472              		.loc 1 1730 7 is_stmt 1 view .LVU426
 1473 0052 4FF0E023 		mov	r3, #-536813568
 1474 0056 4FF08052 		mov	r2, #268435456
 1475 005a C3F8042D 		str	r2, [r3, #3332]
1730:FreeRTOS/tasks.c **** 					}
 1476              		.loc 1 1730 7 view .LVU427
 1477              		.syntax unified
 1478              	@ 1730 "FreeRTOS/tasks.c" 1
 1479 005e BFF34F8F 		dsb
 1480              	@ 0 "" 2
1730:FreeRTOS/tasks.c **** 					}
 1481              		.loc 1 1730 7 view .LVU428
 1482              	@ 1730 "FreeRTOS/tasks.c" 1
 1483 0062 BFF36F8F 		isb
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 122


 1484              	@ 0 "" 2
1730:FreeRTOS/tasks.c **** 					}
 1485              		.loc 1 1730 38 view .LVU429
 1486              		.thumb
 1487              		.syntax unified
 1488 0066 D8E7     		b	.L101
 1489              	.LVL123:
 1490              	.L103:
 1491              	.LCFI13:
 1492              		.cfi_def_cfa_offset 0
 1493              		.cfi_restore 3
 1494              		.cfi_restore 4
 1495              		.cfi_restore 5
 1496              		.cfi_restore 14
1730:FreeRTOS/tasks.c **** 					}
 1497              		.loc 1 1730 38 is_stmt 0 view .LVU430
 1498 0068 7047     		bx	lr
 1499              	.L108:
 1500 006a 00BF     		.align	2
 1501              	.L107:
 1502 006c 00000000 		.word	.LANCHOR10
 1503 0070 00000000 		.word	.LANCHOR13
 1504 0074 00000000 		.word	.LANCHOR4
 1505              		.cfi_endproc
 1506              	.LFE45:
 1508              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1509              		.align	1
 1510              		.global	xTaskResumeFromISR
 1511              		.syntax unified
 1512              		.thumb
 1513              		.thumb_func
 1515              	xTaskResumeFromISR:
 1516              	.LVL124:
 1517              	.LFB46:
1757:FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1518              		.loc 1 1757 2 is_stmt 1 view -0
 1519              		.cfi_startproc
 1520              		@ args = 0, pretend = 0, frame = 0
 1521              		@ frame_needed = 0, uses_anonymous_args = 0
1757:FreeRTOS/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1522              		.loc 1 1757 2 is_stmt 0 view .LVU432
 1523 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1524              	.LCFI14:
 1525              		.cfi_def_cfa_offset 24
 1526              		.cfi_offset 3, -24
 1527              		.cfi_offset 4, -20
 1528              		.cfi_offset 5, -16
 1529              		.cfi_offset 6, -12
 1530              		.cfi_offset 7, -8
 1531              		.cfi_offset 14, -4
 1532 0002 0446     		mov	r4, r0
1758:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1533              		.loc 1 1758 2 is_stmt 1 view .LVU433
 1534              	.LVL125:
1759:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 1535              		.loc 1 1759 2 view .LVU434
1760:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 123


 1536              		.loc 1 1760 2 view .LVU435
1762:FreeRTOS/tasks.c **** 
 1537              		.loc 1 1762 32 view .LVU436
1780:FreeRTOS/tasks.c **** 
 1538              		.loc 1 1780 45 view .LVU437
1782:FreeRTOS/tasks.c **** 		{
 1539              		.loc 1 1782 3 view .LVU438
 1540              	.LBB32:
 1541              	.LBI32:
 249:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 1542              		.loc 2 249 34 view .LVU439
 1543              	.LBB33:
 251:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 1544              		.loc 2 251 1 view .LVU440
 253:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 1545              		.loc 2 253 2 view .LVU441
 1546              		.syntax unified
 1547              	@ 253 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1548 0004 EFF31186 			mrs r6, basepri											
 1549 0008 4FF05003 		mov r3, #80												
 1550 000c 83F31188 		msr basepri, r3											
 1551 0010 BFF36F8F 		isb														
 1552 0014 BFF34F8F 		dsb														
 1553              	
 1554              	@ 0 "" 2
 1555              	.LVL126:
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 1556              		.loc 2 265 2 view .LVU442
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 1557              		.loc 2 265 2 is_stmt 0 view .LVU443
 1558              		.thumb
 1559              		.syntax unified
 1560              	.LBE33:
 1561              	.LBE32:
1784:FreeRTOS/tasks.c **** 			{
 1562              		.loc 1 1784 4 is_stmt 1 view .LVU444
1784:FreeRTOS/tasks.c **** 			{
 1563              		.loc 1 1784 8 is_stmt 0 view .LVU445
 1564 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1565              	.LVL127:
1784:FreeRTOS/tasks.c **** 			{
 1566              		.loc 1 1784 6 view .LVU446
 1567 001c 0546     		mov	r5, r0
 1568 001e E0B1     		cbz	r0, .L110
1786:FreeRTOS/tasks.c **** 
 1569              		.loc 1 1786 39 is_stmt 1 view .LVU447
1789:FreeRTOS/tasks.c **** 				{
 1570              		.loc 1 1789 5 view .LVU448
1789:FreeRTOS/tasks.c **** 				{
 1571              		.loc 1 1789 30 is_stmt 0 view .LVU449
 1572 0020 144B     		ldr	r3, .L115
 1573 0022 1B68     		ldr	r3, [r3]
1789:FreeRTOS/tasks.c **** 				{
 1574              		.loc 1 1789 7 view .LVU450
 1575 0024 FBB9     		cbnz	r3, .L111
1793:FreeRTOS/tasks.c **** 					{
 1576              		.loc 1 1793 6 is_stmt 1 view .LVU451
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 124


1793:FreeRTOS/tasks.c **** 					{
 1577              		.loc 1 1793 15 is_stmt 0 view .LVU452
 1578 0026 E26A     		ldr	r2, [r4, #44]
1793:FreeRTOS/tasks.c **** 					{
 1579              		.loc 1 1793 43 view .LVU453
 1580 0028 134B     		ldr	r3, .L115+4
 1581 002a 1B68     		ldr	r3, [r3]
 1582 002c DB6A     		ldr	r3, [r3, #44]
1793:FreeRTOS/tasks.c **** 					{
 1583              		.loc 1 1793 8 view .LVU454
 1584 002e 9A42     		cmp	r2, r3
 1585 0030 17D2     		bcs	.L113
1758:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1586              		.loc 1 1758 13 view .LVU455
 1587 0032 0025     		movs	r5, #0
 1588              	.L112:
 1589              	.LVL128:
1799:FreeRTOS/tasks.c **** 					}
 1590              		.loc 1 1799 31 is_stmt 1 view .LVU456
1802:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1591              		.loc 1 1802 6 view .LVU457
1802:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1592              		.loc 1 1802 15 is_stmt 0 view .LVU458
 1593 0034 271D     		adds	r7, r4, #4
 1594 0036 3846     		mov	r0, r7
 1595 0038 FFF7FEFF 		bl	uxListRemove
 1596              	.LVL129:
1803:FreeRTOS/tasks.c **** 				}
 1597              		.loc 1 1803 6 is_stmt 1 view .LVU459
1803:FreeRTOS/tasks.c **** 				}
 1598              		.loc 1 1803 6 view .LVU460
 1599 003c E06A     		ldr	r0, [r4, #44]
 1600 003e 0123     		movs	r3, #1
 1601 0040 8340     		lsls	r3, r3, r0
 1602 0042 0E4A     		ldr	r2, .L115+8
 1603 0044 1168     		ldr	r1, [r2]
 1604 0046 0B43     		orrs	r3, r3, r1
 1605 0048 1360     		str	r3, [r2]
1803:FreeRTOS/tasks.c **** 				}
 1606              		.loc 1 1803 6 view .LVU461
 1607 004a 00EB8000 		add	r0, r0, r0, lsl #2
 1608 004e 3946     		mov	r1, r7
 1609 0050 0B4B     		ldr	r3, .L115+12
 1610 0052 03EB8000 		add	r0, r3, r0, lsl #2
 1611 0056 FFF7FEFF 		bl	vListInsertEnd
 1612              	.LVL130:
1803:FreeRTOS/tasks.c **** 				}
 1613              		.loc 1 1803 36 view .LVU462
 1614              	.L110:
1815:FreeRTOS/tasks.c **** 			}
 1615              		.loc 1 1815 29 view .LVU463
1818:FreeRTOS/tasks.c **** 
 1616              		.loc 1 1818 3 view .LVU464
 1617              	.LBB34:
 1618              	.LBI34:
 269:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 1619              		.loc 2 269 30 view .LVU465
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 125


 1620              	.LBB35:
 1621              		.loc 2 271 2 view .LVU466
 1622              		.syntax unified
 1623              	@ 271 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1624 005a 86F31188 			msr basepri, r6	
 1625              	@ 0 "" 2
 1626              	.LVL131:
 1627              		.loc 2 271 2 is_stmt 0 view .LVU467
 1628              		.thumb
 1629              		.syntax unified
 1630              	.LBE35:
 1631              	.LBE34:
1820:FreeRTOS/tasks.c **** 	}
 1632              		.loc 1 1820 3 is_stmt 1 view .LVU468
1821:FreeRTOS/tasks.c **** 
 1633              		.loc 1 1821 2 is_stmt 0 view .LVU469
 1634 005e 2846     		mov	r0, r5
 1635 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1636              	.LVL132:
 1637              	.L113:
1795:FreeRTOS/tasks.c **** 					}
 1638              		.loc 1 1795 22 view .LVU470
 1639 0062 0125     		movs	r5, #1
 1640 0064 E6E7     		b	.L112
 1641              	.L111:
1810:FreeRTOS/tasks.c **** 				}
 1642              		.loc 1 1810 6 is_stmt 1 view .LVU471
 1643 0066 04F11801 		add	r1, r4, #24
 1644 006a 0648     		ldr	r0, .L115+16
 1645 006c FFF7FEFF 		bl	vListInsertEnd
 1646              	.LVL133:
1758:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1647              		.loc 1 1758 13 is_stmt 0 view .LVU472
 1648 0070 0025     		movs	r5, #0
 1649 0072 F2E7     		b	.L110
 1650              	.L116:
 1651              		.align	2
 1652              	.L115:
 1653 0074 00000000 		.word	.LANCHOR16
 1654 0078 00000000 		.word	.LANCHOR10
 1655 007c 00000000 		.word	.LANCHOR13
 1656 0080 00000000 		.word	.LANCHOR4
 1657 0084 00000000 		.word	.LANCHOR1
 1658              		.cfi_endproc
 1659              	.LFE46:
 1661              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 1662              		.align	2
 1663              	.LC0:
 1664 0000 49444C45 		.ascii	"IDLE\000"
 1664      00
 1665              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1666              		.align	1
 1667              		.global	vTaskStartScheduler
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1672              	vTaskStartScheduler:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 126


 1673              	.LFB47:
1827:FreeRTOS/tasks.c **** BaseType_t xReturn;
 1674              		.loc 1 1827 1 is_stmt 1 view -0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 0
 1677              		@ frame_needed = 0, uses_anonymous_args = 0
 1678 0000 00B5     		push	{lr}
 1679              	.LCFI15:
 1680              		.cfi_def_cfa_offset 4
 1681              		.cfi_offset 14, -4
 1682 0002 83B0     		sub	sp, sp, #12
 1683              	.LCFI16:
 1684              		.cfi_def_cfa_offset 16
1828:FreeRTOS/tasks.c **** 
 1685              		.loc 1 1828 1 view .LVU474
1860:FreeRTOS/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1686              		.loc 1 1860 3 view .LVU475
1860:FreeRTOS/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1687              		.loc 1 1860 13 is_stmt 0 view .LVU476
 1688 0004 114B     		ldr	r3, .L121
 1689 0006 0193     		str	r3, [sp, #4]
 1690 0008 0023     		movs	r3, #0
 1691 000a 0093     		str	r3, [sp]
 1692 000c 8022     		movs	r2, #128
 1693 000e 1049     		ldr	r1, .L121+4
 1694 0010 1048     		ldr	r0, .L121+8
 1695 0012 FFF7FEFF 		bl	xTaskCreate
 1696              	.LVL134:
1881:FreeRTOS/tasks.c **** 	{
 1697              		.loc 1 1881 2 is_stmt 1 view .LVU477
1881:FreeRTOS/tasks.c **** 	{
 1698              		.loc 1 1881 4 is_stmt 0 view .LVU478
 1699 0016 0128     		cmp	r0, #1
 1700 0018 02D0     		beq	.L120
 1701              	.LVL135:
 1702              	.L117:
1930:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1703              		.loc 1 1930 1 view .LVU479
 1704 001a 03B0     		add	sp, sp, #12
 1705              	.LCFI17:
 1706              		.cfi_remember_state
 1707              		.cfi_def_cfa_offset 4
 1708              		@ sp needed
 1709 001c 5DF804FB 		ldr	pc, [sp], #4
 1710              	.LVL136:
 1711              	.L120:
 1712              	.LCFI18:
 1713              		.cfi_restore_state
1888:FreeRTOS/tasks.c **** 
 1714              		.loc 1 1888 3 is_stmt 1 view .LVU480
 1715              	.LBB36:
 1716              	.LBI36:
 233:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 1717              		.loc 2 233 30 view .LVU481
 1718              	.LBB37:
 235:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 1719              		.loc 2 235 1 view .LVU482
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 127


 237:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 1720              		.loc 2 237 2 view .LVU483
 1721              		.syntax unified
 1722              	@ 237 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1723 0020 4FF05003 			mov r3, #80												
 1724 0024 83F31188 		msr basepri, r3											
 1725 0028 BFF36F8F 		isb														
 1726 002c BFF34F8F 		dsb														
 1727              	
 1728              	@ 0 "" 2
 1729              		.thumb
 1730              		.syntax unified
 1731              	.LBE37:
 1732              	.LBE36:
1898:FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1733              		.loc 1 1898 3 view .LVU484
1898:FreeRTOS/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1734              		.loc 1 1898 24 is_stmt 0 view .LVU485
 1735 0030 094B     		ldr	r3, .L121+12
 1736 0032 4FF0FF32 		mov	r2, #-1
 1737 0036 1A60     		str	r2, [r3]
1899:FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1738              		.loc 1 1899 3 is_stmt 1 view .LVU486
1899:FreeRTOS/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1739              		.loc 1 1899 21 is_stmt 0 view .LVU487
 1740 0038 084B     		ldr	r3, .L121+16
 1741 003a 0122     		movs	r2, #1
 1742 003c 1A60     		str	r2, [r3]
1900:FreeRTOS/tasks.c **** 
 1743              		.loc 1 1900 3 is_stmt 1 view .LVU488
1900:FreeRTOS/tasks.c **** 
 1744              		.loc 1 1900 14 is_stmt 0 view .LVU489
 1745 003e 084B     		ldr	r3, .L121+20
 1746 0040 0022     		movs	r2, #0
 1747 0042 1A60     		str	r2, [r3]
1905:FreeRTOS/tasks.c **** 
 1748              		.loc 1 1905 43 is_stmt 1 view .LVU490
1909:FreeRTOS/tasks.c **** 		{
 1749              		.loc 1 1909 3 view .LVU491
1909:FreeRTOS/tasks.c **** 		{
 1750              		.loc 1 1909 7 is_stmt 0 view .LVU492
 1751 0044 FFF7FEFF 		bl	xPortStartScheduler
 1752              	.LVL137:
1924:FreeRTOS/tasks.c **** 	}
 1753              		.loc 1 1924 67 is_stmt 1 view .LVU493
1929:FreeRTOS/tasks.c **** }
 1754              		.loc 1 1929 2 view .LVU494
1930:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1755              		.loc 1 1930 1 is_stmt 0 view .LVU495
 1756 0048 E7E7     		b	.L117
 1757              	.L122:
 1758 004a 00BF     		.align	2
 1759              	.L121:
 1760 004c 00000000 		.word	.LANCHOR17
 1761 0050 00000000 		.word	.LC0
 1762 0054 00000000 		.word	prvIdleTask
 1763 0058 00000000 		.word	.LANCHOR3
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 128


 1764 005c 00000000 		.word	.LANCHOR11
 1765 0060 00000000 		.word	.LANCHOR14
 1766              		.cfi_endproc
 1767              	.LFE47:
 1769              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1770              		.align	1
 1771              		.global	vTaskEndScheduler
 1772              		.syntax unified
 1773              		.thumb
 1774              		.thumb_func
 1776              	vTaskEndScheduler:
 1777              	.LFB48:
1934:FreeRTOS/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1778              		.loc 1 1934 1 is_stmt 1 view -0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 0
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782 0000 08B5     		push	{r3, lr}
 1783              	.LCFI19:
 1784              		.cfi_def_cfa_offset 8
 1785              		.cfi_offset 3, -8
 1786              		.cfi_offset 14, -4
1938:FreeRTOS/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1787              		.loc 1 1938 2 view .LVU497
 1788              	.LBB38:
 1789              	.LBI38:
 233:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 1790              		.loc 2 233 30 view .LVU498
 1791              	.LBB39:
 235:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 1792              		.loc 2 235 1 view .LVU499
 237:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 1793              		.loc 2 237 2 view .LVU500
 1794              		.syntax unified
 1795              	@ 237 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1796 0002 4FF05003 			mov r3, #80												
 1797 0006 83F31188 		msr basepri, r3											
 1798 000a BFF36F8F 		isb														
 1799 000e BFF34F8F 		dsb														
 1800              	
 1801              	@ 0 "" 2
 1802              		.thumb
 1803              		.syntax unified
 1804              	.LBE39:
 1805              	.LBE38:
1939:FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1806              		.loc 1 1939 2 view .LVU501
1939:FreeRTOS/tasks.c **** 	vPortEndScheduler();
 1807              		.loc 1 1939 20 is_stmt 0 view .LVU502
 1808 0012 034B     		ldr	r3, .L125
 1809 0014 0022     		movs	r2, #0
 1810 0016 1A60     		str	r2, [r3]
1940:FreeRTOS/tasks.c **** }
 1811              		.loc 1 1940 2 is_stmt 1 view .LVU503
 1812 0018 FFF7FEFF 		bl	vPortEndScheduler
 1813              	.LVL138:
1941:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 129


 1814              		.loc 1 1941 1 is_stmt 0 view .LVU504
 1815 001c 08BD     		pop	{r3, pc}
 1816              	.L126:
 1817 001e 00BF     		.align	2
 1818              	.L125:
 1819 0020 00000000 		.word	.LANCHOR11
 1820              		.cfi_endproc
 1821              	.LFE48:
 1823              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1824              		.align	1
 1825              		.global	vTaskSuspendAll
 1826              		.syntax unified
 1827              		.thumb
 1828              		.thumb_func
 1830              	vTaskSuspendAll:
 1831              	.LFB49:
1945:FreeRTOS/tasks.c **** 	/* A critical section is not required as the variable is of type
 1832              		.loc 1 1945 1 is_stmt 1 view -0
 1833              		.cfi_startproc
 1834              		@ args = 0, pretend = 0, frame = 0
 1835              		@ frame_needed = 0, uses_anonymous_args = 0
 1836              		@ link register save eliminated.
1950:FreeRTOS/tasks.c **** }
 1837              		.loc 1 1950 2 view .LVU506
 1838 0000 024A     		ldr	r2, .L128
 1839 0002 1368     		ldr	r3, [r2]
 1840 0004 0133     		adds	r3, r3, #1
 1841 0006 1360     		str	r3, [r2]
1951:FreeRTOS/tasks.c **** /*----------------------------------------------------------*/
 1842              		.loc 1 1951 1 is_stmt 0 view .LVU507
 1843 0008 7047     		bx	lr
 1844              	.L129:
 1845 000a 00BF     		.align	2
 1846              	.L128:
 1847 000c 00000000 		.word	.LANCHOR16
 1848              		.cfi_endproc
 1849              	.LFE49:
 1851              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1852              		.align	1
 1853              		.global	xTaskGetTickCount
 1854              		.syntax unified
 1855              		.thumb
 1856              		.thumb_func
 1858              	xTaskGetTickCount:
 1859              	.LFB51:
2128:FreeRTOS/tasks.c **** TickType_t xTicks;
 1860              		.loc 1 2128 1 is_stmt 1 view -0
 1861              		.cfi_startproc
 1862              		@ args = 0, pretend = 0, frame = 0
 1863              		@ frame_needed = 0, uses_anonymous_args = 0
 1864              		@ link register save eliminated.
2129:FreeRTOS/tasks.c **** 
 1865              		.loc 1 2129 1 view .LVU509
2132:FreeRTOS/tasks.c **** 	{
 1866              		.loc 1 2132 32 view .LVU510
2134:FreeRTOS/tasks.c **** 	}
 1867              		.loc 1 2134 3 view .LVU511
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 130


2134:FreeRTOS/tasks.c **** 	}
 1868              		.loc 1 2134 10 is_stmt 0 view .LVU512
 1869 0000 014B     		ldr	r3, .L131
 1870 0002 1868     		ldr	r0, [r3]
 1871              	.LVL139:
2136:FreeRTOS/tasks.c **** 
 1872              		.loc 1 2136 31 is_stmt 1 view .LVU513
2138:FreeRTOS/tasks.c **** }
 1873              		.loc 1 2138 2 view .LVU514
2139:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1874              		.loc 1 2139 1 is_stmt 0 view .LVU515
 1875 0004 7047     		bx	lr
 1876              	.L132:
 1877 0006 00BF     		.align	2
 1878              	.L131:
 1879 0008 00000000 		.word	.LANCHOR14
 1880              		.cfi_endproc
 1881              	.LFE51:
 1883              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1884              		.align	1
 1885              		.global	xTaskGetTickCountFromISR
 1886              		.syntax unified
 1887              		.thumb
 1888              		.thumb_func
 1890              	xTaskGetTickCountFromISR:
 1891              	.LFB52:
2143:FreeRTOS/tasks.c **** TickType_t xReturn;
 1892              		.loc 1 2143 1 is_stmt 1 view -0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 0
 1895              		@ frame_needed = 0, uses_anonymous_args = 0
 1896              		@ link register save eliminated.
2144:FreeRTOS/tasks.c **** UBaseType_t uxSavedInterruptStatus;
 1897              		.loc 1 2144 1 view .LVU517
2145:FreeRTOS/tasks.c **** 
 1898              		.loc 1 2145 1 view .LVU518
2161:FreeRTOS/tasks.c **** 
 1899              		.loc 1 2161 44 view .LVU519
2163:FreeRTOS/tasks.c **** 	{
 1900              		.loc 1 2163 2 view .LVU520
 1901              	.LVL140:
2165:FreeRTOS/tasks.c **** 	}
 1902              		.loc 1 2165 3 view .LVU521
2165:FreeRTOS/tasks.c **** 	}
 1903              		.loc 1 2165 11 is_stmt 0 view .LVU522
 1904 0000 014B     		ldr	r3, .L134
 1905 0002 1868     		ldr	r0, [r3]
 1906              	.LVL141:
2167:FreeRTOS/tasks.c **** 
 1907              		.loc 1 2167 2 is_stmt 1 view .LVU523
2169:FreeRTOS/tasks.c **** }
 1908              		.loc 1 2169 2 view .LVU524
2170:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1909              		.loc 1 2170 1 is_stmt 0 view .LVU525
 1910 0004 7047     		bx	lr
 1911              	.L135:
 1912 0006 00BF     		.align	2
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 131


 1913              	.L134:
 1914 0008 00000000 		.word	.LANCHOR14
 1915              		.cfi_endproc
 1916              	.LFE52:
 1918              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1919              		.align	1
 1920              		.global	uxTaskGetNumberOfTasks
 1921              		.syntax unified
 1922              		.thumb
 1923              		.thumb_func
 1925              	uxTaskGetNumberOfTasks:
 1926              	.LFB53:
2174:FreeRTOS/tasks.c **** 	/* A critical section is not required because the variables are of type
 1927              		.loc 1 2174 1 is_stmt 1 view -0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 0
 1930              		@ frame_needed = 0, uses_anonymous_args = 0
 1931              		@ link register save eliminated.
2177:FreeRTOS/tasks.c **** }
 1932              		.loc 1 2177 2 view .LVU527
2177:FreeRTOS/tasks.c **** }
 1933              		.loc 1 2177 9 is_stmt 0 view .LVU528
 1934 0000 014B     		ldr	r3, .L137
 1935 0002 1868     		ldr	r0, [r3]
2178:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1936              		.loc 1 2178 1 view .LVU529
 1937 0004 7047     		bx	lr
 1938              	.L138:
 1939 0006 00BF     		.align	2
 1940              	.L137:
 1941 0008 00000000 		.word	.LANCHOR9
 1942              		.cfi_endproc
 1943              	.LFE53:
 1945              		.section	.text.pcTaskGetName,"ax",%progbits
 1946              		.align	1
 1947              		.global	pcTaskGetName
 1948              		.syntax unified
 1949              		.thumb
 1950              		.thumb_func
 1952              	pcTaskGetName:
 1953              	.LVL142:
 1954              	.LFB54:
2182:FreeRTOS/tasks.c **** TCB_t *pxTCB;
 1955              		.loc 1 2182 1 is_stmt 1 view -0
 1956              		.cfi_startproc
 1957              		@ args = 0, pretend = 0, frame = 0
 1958              		@ frame_needed = 0, uses_anonymous_args = 0
 1959              		@ link register save eliminated.
2183:FreeRTOS/tasks.c **** 
 1960              		.loc 1 2183 1 view .LVU531
2187:FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 1961              		.loc 1 2187 2 view .LVU532
2187:FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 1962              		.loc 1 2187 10 is_stmt 0 view .LVU533
 1963 0000 0346     		mov	r3, r0
 1964 0002 10B1     		cbz	r0, .L141
 1965              	.LVL143:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 132


 1966              	.L140:
2188:FreeRTOS/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1967              		.loc 1 2188 23 is_stmt 1 discriminator 4 view .LVU534
2189:FreeRTOS/tasks.c **** }
 1968              		.loc 1 2189 2 discriminator 4 view .LVU535
2190:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 1969              		.loc 1 2190 1 is_stmt 0 discriminator 4 view .LVU536
 1970 0004 03F13400 		add	r0, r3, #52
 1971 0008 7047     		bx	lr
 1972              	.LVL144:
 1973              	.L141:
2187:FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 1974              		.loc 1 2187 10 discriminator 1 view .LVU537
 1975 000a 014B     		ldr	r3, .L142
 1976 000c 1B68     		ldr	r3, [r3]
 1977              	.LVL145:
2187:FreeRTOS/tasks.c **** 	configASSERT( pxTCB );
 1978              		.loc 1 2187 10 discriminator 1 view .LVU538
 1979 000e F9E7     		b	.L140
 1980              	.L143:
 1981              		.align	2
 1982              	.L142:
 1983 0010 00000000 		.word	.LANCHOR10
 1984              		.cfi_endproc
 1985              	.LFE54:
 1987              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1988              		.align	1
 1989              		.global	xTaskIncrementTick
 1990              		.syntax unified
 1991              		.thumb
 1992              		.thumb_func
 1994              	xTaskIncrementTick:
 1995              	.LFB55:
2500:FreeRTOS/tasks.c **** TCB_t * pxTCB;
 1996              		.loc 1 2500 1 is_stmt 1 view -0
 1997              		.cfi_startproc
 1998              		@ args = 0, pretend = 0, frame = 0
 1999              		@ frame_needed = 0, uses_anonymous_args = 0
 2000 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2001              	.LCFI20:
 2002              		.cfi_def_cfa_offset 24
 2003              		.cfi_offset 3, -24
 2004              		.cfi_offset 4, -20
 2005              		.cfi_offset 5, -16
 2006              		.cfi_offset 6, -12
 2007              		.cfi_offset 7, -8
 2008              		.cfi_offset 14, -4
2501:FreeRTOS/tasks.c **** TickType_t xItemValue;
 2009              		.loc 1 2501 1 view .LVU540
2502:FreeRTOS/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2010              		.loc 1 2502 1 view .LVU541
2503:FreeRTOS/tasks.c **** 
 2011              		.loc 1 2503 1 view .LVU542
 2012              	.LVL146:
2508:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2013              		.loc 1 2508 40 view .LVU543
2509:FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 133


 2014              		.loc 1 2509 2 view .LVU544
2509:FreeRTOS/tasks.c **** 	{
 2015              		.loc 1 2509 27 is_stmt 0 view .LVU545
 2016 0002 344B     		ldr	r3, .L164
 2017 0004 1B68     		ldr	r3, [r3]
2509:FreeRTOS/tasks.c **** 	{
 2018              		.loc 1 2509 4 view .LVU546
 2019 0006 002B     		cmp	r3, #0
 2020 0008 58D1     		bne	.L145
 2021              	.LBB40:
2513:FreeRTOS/tasks.c **** 
 2022              		.loc 1 2513 3 is_stmt 1 view .LVU547
2513:FreeRTOS/tasks.c **** 
 2023              		.loc 1 2513 49 is_stmt 0 view .LVU548
 2024 000a 334B     		ldr	r3, .L164+4
 2025 000c 1E68     		ldr	r6, [r3]
2513:FreeRTOS/tasks.c **** 
 2026              		.loc 1 2513 20 view .LVU549
 2027 000e 0136     		adds	r6, r6, #1
 2028              	.LVL147:
2517:FreeRTOS/tasks.c **** 
 2029              		.loc 1 2517 3 is_stmt 1 view .LVU550
2517:FreeRTOS/tasks.c **** 
 2030              		.loc 1 2517 14 is_stmt 0 view .LVU551
 2031 0010 1E60     		str	r6, [r3]
2519:FreeRTOS/tasks.c **** 		{
 2032              		.loc 1 2519 3 is_stmt 1 view .LVU552
2519:FreeRTOS/tasks.c **** 		{
 2033              		.loc 1 2519 5 is_stmt 0 view .LVU553
 2034 0012 86B1     		cbz	r6, .L161
 2035              	.L146:
2525:FreeRTOS/tasks.c **** 		}
 2036              		.loc 1 2525 28 is_stmt 1 view .LVU554
2532:FreeRTOS/tasks.c **** 		{
 2037              		.loc 1 2532 3 view .LVU555
2532:FreeRTOS/tasks.c **** 		{
 2038              		.loc 1 2532 23 is_stmt 0 view .LVU556
 2039 0014 314B     		ldr	r3, .L164+8
 2040 0016 1B68     		ldr	r3, [r3]
2532:FreeRTOS/tasks.c **** 		{
 2041              		.loc 1 2532 5 view .LVU557
 2042 0018 B342     		cmp	r3, r6
 2043 001a 45D9     		bls	.L156
 2044              	.LBE40:
2503:FreeRTOS/tasks.c **** 
 2045              		.loc 1 2503 12 view .LVU558
 2046 001c 0027     		movs	r7, #0
 2047              	.LVL148:
 2048              	.L148:
 2049              	.LBB42:
2615:FreeRTOS/tasks.c **** 			{
 2050              		.loc 1 2615 4 is_stmt 1 view .LVU559
2615:FreeRTOS/tasks.c **** 			{
 2051              		.loc 1 2615 8 is_stmt 0 view .LVU560
 2052 001e 304B     		ldr	r3, .L164+12
 2053 0020 1B68     		ldr	r3, [r3]
 2054 0022 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 134


 2055 0024 03EB8303 		add	r3, r3, r3, lsl #2
 2056 0028 9A00     		lsls	r2, r3, #2
 2057 002a 2E4B     		ldr	r3, .L164+16
 2058 002c 9B58     		ldr	r3, [r3, r2]
2615:FreeRTOS/tasks.c **** 			{
 2059              		.loc 1 2615 6 view .LVU561
 2060 002e 012B     		cmp	r3, #1
 2061 0030 49D9     		bls	.L154
2617:FreeRTOS/tasks.c **** 			}
 2062              		.loc 1 2617 21 view .LVU562
 2063 0032 0127     		movs	r7, #1
 2064              	.LVL149:
2617:FreeRTOS/tasks.c **** 			}
 2065              		.loc 1 2617 21 view .LVU563
 2066 0034 47E0     		b	.L154
 2067              	.LVL150:
 2068              	.L161:
 2069              	.LBB41:
2521:FreeRTOS/tasks.c **** 		}
 2070              		.loc 1 2521 4 is_stmt 1 view .LVU564
2521:FreeRTOS/tasks.c **** 		}
 2071              		.loc 1 2521 4 view .LVU565
2521:FreeRTOS/tasks.c **** 		}
 2072              		.loc 1 2521 4 view .LVU566
 2073 0036 2C4A     		ldr	r2, .L164+20
 2074 0038 1168     		ldr	r1, [r2]
 2075              	.LVL151:
2521:FreeRTOS/tasks.c **** 		}
 2076              		.loc 1 2521 4 view .LVU567
 2077 003a 2C4B     		ldr	r3, .L164+24
 2078 003c 1868     		ldr	r0, [r3]
 2079 003e 1060     		str	r0, [r2]
2521:FreeRTOS/tasks.c **** 		}
 2080              		.loc 1 2521 4 view .LVU568
 2081 0040 1960     		str	r1, [r3]
2521:FreeRTOS/tasks.c **** 		}
 2082              		.loc 1 2521 4 view .LVU569
 2083 0042 2B4A     		ldr	r2, .L164+28
 2084 0044 1368     		ldr	r3, [r2]
 2085 0046 0133     		adds	r3, r3, #1
 2086 0048 1360     		str	r3, [r2]
2521:FreeRTOS/tasks.c **** 		}
 2087              		.loc 1 2521 4 view .LVU570
 2088 004a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2089              	.LVL152:
2521:FreeRTOS/tasks.c **** 		}
 2090              		.loc 1 2521 4 is_stmt 0 view .LVU571
 2091              	.LBE41:
2521:FreeRTOS/tasks.c **** 		}
 2092              		.loc 1 2521 30 is_stmt 1 view .LVU572
 2093 004e E1E7     		b	.L146
 2094              	.LVL153:
 2095              	.L157:
2598:FreeRTOS/tasks.c **** 						}
 2096              		.loc 1 2598 24 is_stmt 0 view .LVU573
 2097 0050 0127     		movs	r7, #1
 2098              	.LVL154:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 135


 2099              	.L147:
2534:FreeRTOS/tasks.c **** 			{
 2100              		.loc 1 2534 4 is_stmt 1 view .LVU574
2536:FreeRTOS/tasks.c **** 				{
 2101              		.loc 1 2536 5 view .LVU575
2536:FreeRTOS/tasks.c **** 				{
 2102              		.loc 1 2536 9 is_stmt 0 view .LVU576
 2103 0052 254B     		ldr	r3, .L164+20
 2104 0054 1B68     		ldr	r3, [r3]
 2105 0056 1B68     		ldr	r3, [r3]
2536:FreeRTOS/tasks.c **** 				{
 2106              		.loc 1 2536 48 view .LVU577
 2107 0058 43B3     		cbz	r3, .L162
2552:FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2108              		.loc 1 2552 6 is_stmt 1 view .LVU578
2552:FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2109              		.loc 1 2552 26 is_stmt 0 view .LVU579
 2110 005a 234B     		ldr	r3, .L164+20
 2111 005c 1B68     		ldr	r3, [r3]
 2112 005e DB68     		ldr	r3, [r3, #12]
2552:FreeRTOS/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2113              		.loc 1 2552 12 view .LVU580
 2114 0060 DC68     		ldr	r4, [r3, #12]
 2115              	.LVL155:
2553:FreeRTOS/tasks.c **** 
 2116              		.loc 1 2553 6 is_stmt 1 view .LVU581
2553:FreeRTOS/tasks.c **** 
 2117              		.loc 1 2553 17 is_stmt 0 view .LVU582
 2118 0062 6368     		ldr	r3, [r4, #4]
 2119              	.LVL156:
2555:FreeRTOS/tasks.c **** 					{
 2120              		.loc 1 2555 6 is_stmt 1 view .LVU583
2555:FreeRTOS/tasks.c **** 					{
 2121              		.loc 1 2555 8 is_stmt 0 view .LVU584
 2122 0064 9E42     		cmp	r6, r3
 2123 0066 26D3     		bcc	.L163
2567:FreeRTOS/tasks.c **** 					}
 2124              		.loc 1 2567 31 is_stmt 1 view .LVU585
2571:FreeRTOS/tasks.c **** 
 2125              		.loc 1 2571 6 view .LVU586
2571:FreeRTOS/tasks.c **** 
 2126              		.loc 1 2571 15 is_stmt 0 view .LVU587
 2127 0068 251D     		adds	r5, r4, #4
 2128 006a 2846     		mov	r0, r5
 2129 006c FFF7FEFF 		bl	uxListRemove
 2130              	.LVL157:
2575:FreeRTOS/tasks.c **** 					{
 2131              		.loc 1 2575 6 is_stmt 1 view .LVU588
2575:FreeRTOS/tasks.c **** 					{
 2132              		.loc 1 2575 10 is_stmt 0 view .LVU589
 2133 0070 A36A     		ldr	r3, [r4, #40]
2575:FreeRTOS/tasks.c **** 					{
 2134              		.loc 1 2575 8 view .LVU590
 2135 0072 1BB1     		cbz	r3, .L151
2577:FreeRTOS/tasks.c **** 					}
 2136              		.loc 1 2577 7 is_stmt 1 view .LVU591
2577:FreeRTOS/tasks.c **** 					}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 136


 2137              		.loc 1 2577 16 is_stmt 0 view .LVU592
 2138 0074 04F11800 		add	r0, r4, #24
 2139 0078 FFF7FEFF 		bl	uxListRemove
 2140              	.LVL158:
 2141              	.L151:
2581:FreeRTOS/tasks.c **** 					}
 2142              		.loc 1 2581 31 is_stmt 1 view .LVU593
2586:FreeRTOS/tasks.c **** 
 2143              		.loc 1 2586 6 view .LVU594
2586:FreeRTOS/tasks.c **** 
 2144              		.loc 1 2586 6 view .LVU595
 2145 007c E36A     		ldr	r3, [r4, #44]
 2146 007e 0122     		movs	r2, #1
 2147 0080 9A40     		lsls	r2, r2, r3
 2148 0082 1C49     		ldr	r1, .L164+32
 2149 0084 0868     		ldr	r0, [r1]
 2150 0086 0243     		orrs	r2, r2, r0
 2151 0088 0A60     		str	r2, [r1]
2586:FreeRTOS/tasks.c **** 
 2152              		.loc 1 2586 6 view .LVU596
 2153 008a 03EB8303 		add	r3, r3, r3, lsl #2
 2154 008e 9A00     		lsls	r2, r3, #2
 2155 0090 2946     		mov	r1, r5
 2156 0092 1448     		ldr	r0, .L164+16
 2157 0094 1044     		add	r0, r0, r2
 2158 0096 FFF7FEFF 		bl	vListInsertEnd
 2159              	.LVL159:
2586:FreeRTOS/tasks.c **** 
 2160              		.loc 1 2586 36 view .LVU597
2596:FreeRTOS/tasks.c **** 						{
 2161              		.loc 1 2596 7 view .LVU598
2596:FreeRTOS/tasks.c **** 						{
 2162              		.loc 1 2596 16 is_stmt 0 view .LVU599
 2163 009a E26A     		ldr	r2, [r4, #44]
2596:FreeRTOS/tasks.c **** 						{
 2164              		.loc 1 2596 44 view .LVU600
 2165 009c 104B     		ldr	r3, .L164+12
 2166 009e 1B68     		ldr	r3, [r3]
 2167 00a0 DB6A     		ldr	r3, [r3, #44]
2596:FreeRTOS/tasks.c **** 						{
 2168              		.loc 1 2596 9 view .LVU601
 2169 00a2 9A42     		cmp	r2, r3
 2170 00a4 D4D2     		bcs	.L157
 2171 00a6 D4E7     		b	.L147
 2172              	.LVL160:
 2173              	.L156:
2596:FreeRTOS/tasks.c **** 						{
 2174              		.loc 1 2596 9 view .LVU602
 2175              	.LBE42:
2503:FreeRTOS/tasks.c **** 
 2176              		.loc 1 2503 12 view .LVU603
 2177 00a8 0027     		movs	r7, #0
 2178 00aa D2E7     		b	.L147
 2179              	.LVL161:
 2180              	.L162:
 2181              	.LBB43:
2543:FreeRTOS/tasks.c **** 					break;
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 137


 2182              		.loc 1 2543 6 is_stmt 1 view .LVU604
2543:FreeRTOS/tasks.c **** 					break;
 2183              		.loc 1 2543 27 is_stmt 0 view .LVU605
 2184 00ac 0B4B     		ldr	r3, .L164+8
 2185 00ae 4FF0FF32 		mov	r2, #-1
 2186 00b2 1A60     		str	r2, [r3]
2544:FreeRTOS/tasks.c **** 				}
 2187              		.loc 1 2544 6 is_stmt 1 view .LVU606
 2188 00b4 B3E7     		b	.L148
 2189              	.LVL162:
 2190              	.L163:
2562:FreeRTOS/tasks.c **** 						break;
 2191              		.loc 1 2562 7 view .LVU607
2562:FreeRTOS/tasks.c **** 						break;
 2192              		.loc 1 2562 28 is_stmt 0 view .LVU608
 2193 00b6 094A     		ldr	r2, .L164+8
 2194 00b8 1360     		str	r3, [r2]
2563:FreeRTOS/tasks.c **** 					}
 2195              		.loc 1 2563 7 is_stmt 1 view .LVU609
 2196 00ba B0E7     		b	.L148
 2197              	.LVL163:
 2198              	.L145:
2563:FreeRTOS/tasks.c **** 					}
 2199              		.loc 1 2563 7 is_stmt 0 view .LVU610
 2200              	.LBE43:
2643:FreeRTOS/tasks.c **** 
 2201              		.loc 1 2643 3 is_stmt 1 view .LVU611
 2202 00bc 0E4A     		ldr	r2, .L164+36
 2203 00be 1368     		ldr	r3, [r2]
 2204 00c0 0133     		adds	r3, r3, #1
 2205 00c2 1360     		str	r3, [r2]
2503:FreeRTOS/tasks.c **** 
 2206              		.loc 1 2503 12 is_stmt 0 view .LVU612
 2207 00c4 0027     		movs	r7, #0
 2208              	.LVL164:
 2209              	.L154:
2656:FreeRTOS/tasks.c **** 		{
 2210              		.loc 1 2656 3 is_stmt 1 view .LVU613
2656:FreeRTOS/tasks.c **** 		{
 2211              		.loc 1 2656 21 is_stmt 0 view .LVU614
 2212 00c6 0D4B     		ldr	r3, .L164+40
 2213 00c8 1B68     		ldr	r3, [r3]
2656:FreeRTOS/tasks.c **** 		{
 2214              		.loc 1 2656 5 view .LVU615
 2215 00ca 03B1     		cbz	r3, .L144
2658:FreeRTOS/tasks.c **** 		}
 2216              		.loc 1 2658 20 view .LVU616
 2217 00cc 0127     		movs	r7, #1
 2218              	.LVL165:
2662:FreeRTOS/tasks.c **** 		}
 2219              		.loc 1 2662 28 is_stmt 1 view .LVU617
2667:FreeRTOS/tasks.c **** }
 2220              		.loc 1 2667 2 view .LVU618
 2221              	.L144:
2668:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2222              		.loc 1 2668 1 is_stmt 0 view .LVU619
 2223 00ce 3846     		mov	r0, r7
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 138


 2224 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2225              	.L165:
 2226 00d2 00BF     		.align	2
 2227              	.L164:
 2228 00d4 00000000 		.word	.LANCHOR16
 2229 00d8 00000000 		.word	.LANCHOR14
 2230 00dc 00000000 		.word	.LANCHOR3
 2231 00e0 00000000 		.word	.LANCHOR10
 2232 00e4 00000000 		.word	.LANCHOR4
 2233 00e8 00000000 		.word	.LANCHOR2
 2234 00ec 00000000 		.word	.LANCHOR8
 2235 00f0 00000000 		.word	.LANCHOR18
 2236 00f4 00000000 		.word	.LANCHOR13
 2237 00f8 00000000 		.word	.LANCHOR19
 2238 00fc 00000000 		.word	.LANCHOR20
 2239              		.cfi_endproc
 2240              	.LFE55:
 2242              		.section	.text.xTaskResumeAll,"ax",%progbits
 2243              		.align	1
 2244              		.global	xTaskResumeAll
 2245              		.syntax unified
 2246              		.thumb
 2247              		.thumb_func
 2249              	xTaskResumeAll:
 2250              	.LFB50:
2018:FreeRTOS/tasks.c **** TCB_t *pxTCB = NULL;
 2251              		.loc 1 2018 1 is_stmt 1 view -0
 2252              		.cfi_startproc
 2253              		@ args = 0, pretend = 0, frame = 0
 2254              		@ frame_needed = 0, uses_anonymous_args = 0
 2255 0000 38B5     		push	{r3, r4, r5, lr}
 2256              	.LCFI21:
 2257              		.cfi_def_cfa_offset 16
 2258              		.cfi_offset 3, -16
 2259              		.cfi_offset 4, -12
 2260              		.cfi_offset 5, -8
 2261              		.cfi_offset 14, -4
2019:FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2262              		.loc 1 2019 1 view .LVU621
 2263              	.LVL166:
2020:FreeRTOS/tasks.c **** 
 2264              		.loc 1 2020 1 view .LVU622
2024:FreeRTOS/tasks.c **** 
 2265              		.loc 1 2024 38 view .LVU623
2031:FreeRTOS/tasks.c **** 	{
 2266              		.loc 1 2031 2 view .LVU624
 2267 0002 FFF7FEFF 		bl	vPortEnterCritical
 2268              	.LVL167:
2033:FreeRTOS/tasks.c **** 
 2269              		.loc 1 2033 3 view .LVU625
 2270 0006 2E4B     		ldr	r3, .L180
 2271 0008 1A68     		ldr	r2, [r3]
 2272 000a 013A     		subs	r2, r2, #1
 2273 000c 1A60     		str	r2, [r3]
2035:FreeRTOS/tasks.c **** 		{
 2274              		.loc 1 2035 3 view .LVU626
2035:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 139


 2275              		.loc 1 2035 28 is_stmt 0 view .LVU627
 2276 000e 1B68     		ldr	r3, [r3]
2035:FreeRTOS/tasks.c **** 		{
 2277              		.loc 1 2035 5 view .LVU628
 2278 0010 002B     		cmp	r3, #0
 2279 0012 4FD1     		bne	.L175
2037:FreeRTOS/tasks.c **** 			{
 2280              		.loc 1 2037 4 is_stmt 1 view .LVU629
2037:FreeRTOS/tasks.c **** 			{
 2281              		.loc 1 2037 31 is_stmt 0 view .LVU630
 2282 0014 2B4B     		ldr	r3, .L180+4
 2283 0016 1B68     		ldr	r3, [r3]
2037:FreeRTOS/tasks.c **** 			{
 2284              		.loc 1 2037 6 view .LVU631
 2285 0018 0BB9     		cbnz	r3, .L176
2020:FreeRTOS/tasks.c **** 
 2286              		.loc 1 2020 12 view .LVU632
 2287 001a 0024     		movs	r4, #0
 2288 001c 4BE0     		b	.L167
 2289              	.L176:
2019:FreeRTOS/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2290              		.loc 1 2019 8 view .LVU633
 2291 001e 0024     		movs	r4, #0
 2292              	.LVL168:
 2293              	.L168:
2056:FreeRTOS/tasks.c **** 					}
 2294              		.loc 1 2056 31 is_stmt 1 view .LVU634
2041:FreeRTOS/tasks.c **** 				{
 2295              		.loc 1 2041 10 view .LVU635
2041:FreeRTOS/tasks.c **** 				{
 2296              		.loc 1 2041 12 is_stmt 0 view .LVU636
 2297 0020 294B     		ldr	r3, .L180+8
 2298 0022 1B68     		ldr	r3, [r3]
2041:FreeRTOS/tasks.c **** 				{
 2299              		.loc 1 2041 10 view .LVU637
 2300 0024 1BB3     		cbz	r3, .L178
2043:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2301              		.loc 1 2043 6 is_stmt 1 view .LVU638
2043:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2302              		.loc 1 2043 26 is_stmt 0 view .LVU639
 2303 0026 284B     		ldr	r3, .L180+8
 2304 0028 DB68     		ldr	r3, [r3, #12]
2043:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2305              		.loc 1 2043 12 view .LVU640
 2306 002a DC68     		ldr	r4, [r3, #12]
 2307              	.LVL169:
2044:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2308              		.loc 1 2044 6 is_stmt 1 view .LVU641
2044:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2309              		.loc 1 2044 15 is_stmt 0 view .LVU642
 2310 002c 04F11800 		add	r0, r4, #24
 2311 0030 FFF7FEFF 		bl	uxListRemove
 2312              	.LVL170:
2045:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2313              		.loc 1 2045 6 is_stmt 1 view .LVU643
2045:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2314              		.loc 1 2045 15 is_stmt 0 view .LVU644
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 140


 2315 0034 251D     		adds	r5, r4, #4
 2316 0036 2846     		mov	r0, r5
 2317 0038 FFF7FEFF 		bl	uxListRemove
 2318              	.LVL171:
2046:FreeRTOS/tasks.c **** 
 2319              		.loc 1 2046 6 is_stmt 1 view .LVU645
2046:FreeRTOS/tasks.c **** 
 2320              		.loc 1 2046 6 view .LVU646
 2321 003c E06A     		ldr	r0, [r4, #44]
 2322 003e 0123     		movs	r3, #1
 2323 0040 8340     		lsls	r3, r3, r0
 2324 0042 224A     		ldr	r2, .L180+12
 2325 0044 1168     		ldr	r1, [r2]
 2326 0046 0B43     		orrs	r3, r3, r1
 2327 0048 1360     		str	r3, [r2]
2046:FreeRTOS/tasks.c **** 
 2328              		.loc 1 2046 6 view .LVU647
 2329 004a 00EB8000 		add	r0, r0, r0, lsl #2
 2330 004e 2946     		mov	r1, r5
 2331 0050 1F4B     		ldr	r3, .L180+16
 2332 0052 03EB8000 		add	r0, r3, r0, lsl #2
 2333 0056 FFF7FEFF 		bl	vListInsertEnd
 2334              	.LVL172:
2046:FreeRTOS/tasks.c **** 
 2335              		.loc 1 2046 36 view .LVU648
2050:FreeRTOS/tasks.c **** 					{
 2336              		.loc 1 2050 6 view .LVU649
2050:FreeRTOS/tasks.c **** 					{
 2337              		.loc 1 2050 15 is_stmt 0 view .LVU650
 2338 005a E26A     		ldr	r2, [r4, #44]
2050:FreeRTOS/tasks.c **** 					{
 2339              		.loc 1 2050 43 view .LVU651
 2340 005c 1D4B     		ldr	r3, .L180+20
 2341 005e 1B68     		ldr	r3, [r3]
 2342 0060 DB6A     		ldr	r3, [r3, #44]
2050:FreeRTOS/tasks.c **** 					{
 2343              		.loc 1 2050 8 view .LVU652
 2344 0062 9A42     		cmp	r2, r3
 2345 0064 DCD3     		bcc	.L168
2052:FreeRTOS/tasks.c **** 					}
 2346              		.loc 1 2052 7 is_stmt 1 view .LVU653
2052:FreeRTOS/tasks.c **** 					}
 2347              		.loc 1 2052 21 is_stmt 0 view .LVU654
 2348 0066 1C4B     		ldr	r3, .L180+24
 2349 0068 0122     		movs	r2, #1
 2350 006a 1A60     		str	r2, [r3]
 2351 006c D8E7     		b	.L168
 2352              	.L178:
2060:FreeRTOS/tasks.c **** 				{
 2353              		.loc 1 2060 5 is_stmt 1 view .LVU655
2060:FreeRTOS/tasks.c **** 				{
 2354              		.loc 1 2060 7 is_stmt 0 view .LVU656
 2355 006e 0CB1     		cbz	r4, .L171
2068:FreeRTOS/tasks.c **** 				}
 2356              		.loc 1 2068 6 is_stmt 1 view .LVU657
 2357 0070 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2358              	.LVL173:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 141


 2359              	.L171:
 2360              	.LBB44:
2076:FreeRTOS/tasks.c **** 
 2361              		.loc 1 2076 6 view .LVU658
2076:FreeRTOS/tasks.c **** 
 2362              		.loc 1 2076 18 is_stmt 0 view .LVU659
 2363 0074 194B     		ldr	r3, .L180+28
 2364 0076 1C68     		ldr	r4, [r3]
 2365              	.LVL174:
2078:FreeRTOS/tasks.c **** 					{
 2366              		.loc 1 2078 6 is_stmt 1 view .LVU660
2078:FreeRTOS/tasks.c **** 					{
 2367              		.loc 1 2078 8 is_stmt 0 view .LVU661
 2368 0078 84B9     		cbnz	r4, .L174
 2369              	.L172:
2097:FreeRTOS/tasks.c **** 					}
 2370              		.loc 1 2097 31 is_stmt 1 view .LVU662
 2371              	.LBE44:
2101:FreeRTOS/tasks.c **** 				{
 2372              		.loc 1 2101 5 view .LVU663
2101:FreeRTOS/tasks.c **** 				{
 2373              		.loc 1 2101 23 is_stmt 0 view .LVU664
 2374 007a 174B     		ldr	r3, .L180+24
 2375 007c 1C68     		ldr	r4, [r3]
 2376              	.LVL175:
2101:FreeRTOS/tasks.c **** 				{
 2377              		.loc 1 2101 7 view .LVU665
 2378 007e D4B1     		cbz	r4, .L167
2105:FreeRTOS/tasks.c **** 					}
 2379              		.loc 1 2105 7 is_stmt 1 view .LVU666
 2380              	.LVL176:
2108:FreeRTOS/tasks.c **** 				}
 2381              		.loc 1 2108 6 view .LVU667
 2382 0080 4FF0E023 		mov	r3, #-536813568
 2383 0084 4FF08052 		mov	r2, #268435456
 2384 0088 C3F8042D 		str	r2, [r3, #3332]
2108:FreeRTOS/tasks.c **** 				}
 2385              		.loc 1 2108 6 view .LVU668
 2386              		.syntax unified
 2387              	@ 2108 "FreeRTOS/tasks.c" 1
 2388 008c BFF34F8F 		dsb
 2389              	@ 0 "" 2
2108:FreeRTOS/tasks.c **** 				}
 2390              		.loc 1 2108 6 view .LVU669
 2391              	@ 2108 "FreeRTOS/tasks.c" 1
 2392 0090 BFF36F8F 		isb
 2393              	@ 0 "" 2
2108:FreeRTOS/tasks.c **** 				}
 2394              		.loc 1 2108 37 view .LVU670
2105:FreeRTOS/tasks.c **** 					}
 2395              		.loc 1 2105 23 is_stmt 0 view .LVU671
 2396              		.thumb
 2397              		.syntax unified
 2398 0094 0124     		movs	r4, #1
 2399 0096 0EE0     		b	.L167
 2400              	.LVL177:
 2401              	.L173:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 142


 2402              	.LBB45:
2088:FreeRTOS/tasks.c **** 							}
 2403              		.loc 1 2088 33 is_stmt 1 view .LVU672
2090:FreeRTOS/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2404              		.loc 1 2090 8 view .LVU673
2091:FreeRTOS/tasks.c **** 
 2405              		.loc 1 2091 14 view .LVU674
2091:FreeRTOS/tasks.c **** 
 2406              		.loc 1 2091 7 is_stmt 0 view .LVU675
 2407 0098 013C     		subs	r4, r4, #1
 2408              	.LVL178:
2091:FreeRTOS/tasks.c **** 
 2409              		.loc 1 2091 7 view .LVU676
 2410 009a 07D0     		beq	.L179
 2411              	.L174:
2080:FreeRTOS/tasks.c **** 						{
 2412              		.loc 1 2080 7 is_stmt 1 view .LVU677
2082:FreeRTOS/tasks.c **** 							{
 2413              		.loc 1 2082 8 view .LVU678
2082:FreeRTOS/tasks.c **** 							{
 2414              		.loc 1 2082 12 is_stmt 0 view .LVU679
 2415 009c FFF7FEFF 		bl	xTaskIncrementTick
 2416              	.LVL179:
2082:FreeRTOS/tasks.c **** 							{
 2417              		.loc 1 2082 10 view .LVU680
 2418 00a0 0028     		cmp	r0, #0
 2419 00a2 F9D0     		beq	.L173
2084:FreeRTOS/tasks.c **** 							}
 2420              		.loc 1 2084 9 is_stmt 1 view .LVU681
2084:FreeRTOS/tasks.c **** 							}
 2421              		.loc 1 2084 23 is_stmt 0 view .LVU682
 2422 00a4 0C4B     		ldr	r3, .L180+24
 2423 00a6 0122     		movs	r2, #1
 2424 00a8 1A60     		str	r2, [r3]
 2425 00aa F5E7     		b	.L173
 2426              	.L179:
2093:FreeRTOS/tasks.c **** 					}
 2427              		.loc 1 2093 7 is_stmt 1 view .LVU683
2093:FreeRTOS/tasks.c **** 					}
 2428              		.loc 1 2093 21 is_stmt 0 view .LVU684
 2429 00ac 0B4B     		ldr	r3, .L180+28
 2430 00ae 0022     		movs	r2, #0
 2431 00b0 1A60     		str	r2, [r3]
 2432 00b2 E2E7     		b	.L172
 2433              	.LVL180:
 2434              	.L175:
2093:FreeRTOS/tasks.c **** 					}
 2435              		.loc 1 2093 21 view .LVU685
 2436              	.LBE45:
2020:FreeRTOS/tasks.c **** 
 2437              		.loc 1 2020 12 view .LVU686
 2438 00b4 0024     		movs	r4, #0
 2439              	.LVL181:
 2440              	.L167:
2118:FreeRTOS/tasks.c **** 		}
 2441              		.loc 1 2118 28 is_stmt 1 view .LVU687
2121:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 143


 2442              		.loc 1 2121 2 view .LVU688
 2443 00b6 FFF7FEFF 		bl	vPortExitCritical
 2444              	.LVL182:
2123:FreeRTOS/tasks.c **** }
 2445              		.loc 1 2123 2 view .LVU689
2124:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2446              		.loc 1 2124 1 is_stmt 0 view .LVU690
 2447 00ba 2046     		mov	r0, r4
 2448 00bc 38BD     		pop	{r3, r4, r5, pc}
 2449              	.LVL183:
 2450              	.L181:
2124:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2451              		.loc 1 2124 1 view .LVU691
 2452 00be 00BF     		.align	2
 2453              	.L180:
 2454 00c0 00000000 		.word	.LANCHOR16
 2455 00c4 00000000 		.word	.LANCHOR9
 2456 00c8 00000000 		.word	.LANCHOR1
 2457 00cc 00000000 		.word	.LANCHOR13
 2458 00d0 00000000 		.word	.LANCHOR4
 2459 00d4 00000000 		.word	.LANCHOR10
 2460 00d8 00000000 		.word	.LANCHOR20
 2461 00dc 00000000 		.word	.LANCHOR19
 2462              		.cfi_endproc
 2463              	.LFE50:
 2465              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2466              		.align	1
 2467              		.global	vTaskDelayUntil
 2468              		.syntax unified
 2469              		.thumb
 2470              		.thumb_func
 2472              	vTaskDelayUntil:
 2473              	.LVL184:
 2474              	.LFB38:
1141:FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 2475              		.loc 1 1141 2 is_stmt 1 view -0
 2476              		.cfi_startproc
 2477              		@ args = 0, pretend = 0, frame = 0
 2478              		@ frame_needed = 0, uses_anonymous_args = 0
1141:FreeRTOS/tasks.c **** 	TickType_t xTimeToWake;
 2479              		.loc 1 1141 2 is_stmt 0 view .LVU693
 2480 0000 38B5     		push	{r3, r4, r5, lr}
 2481              	.LCFI22:
 2482              		.cfi_def_cfa_offset 16
 2483              		.cfi_offset 3, -16
 2484              		.cfi_offset 4, -12
 2485              		.cfi_offset 5, -8
 2486              		.cfi_offset 14, -4
 2487 0002 0546     		mov	r5, r0
 2488 0004 0C46     		mov	r4, r1
1142:FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2489              		.loc 1 1142 2 is_stmt 1 view .LVU694
1143:FreeRTOS/tasks.c **** 
 2490              		.loc 1 1143 2 view .LVU695
 2491              	.LVL185:
1145:FreeRTOS/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2492              		.loc 1 1145 37 view .LVU696
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 144


1146:FreeRTOS/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2493              		.loc 1 1146 42 view .LVU697
1147:FreeRTOS/tasks.c **** 
 2494              		.loc 1 1147 44 view .LVU698
1149:FreeRTOS/tasks.c **** 		{
 2495              		.loc 1 1149 3 view .LVU699
 2496 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2497              	.LVL186:
 2498              	.LBB46:
1153:FreeRTOS/tasks.c **** 
 2499              		.loc 1 1153 4 view .LVU700
1153:FreeRTOS/tasks.c **** 
 2500              		.loc 1 1153 21 is_stmt 0 view .LVU701
 2501 000a 144B     		ldr	r3, .L192
 2502 000c 1868     		ldr	r0, [r3]
 2503              	.LVL187:
1156:FreeRTOS/tasks.c **** 
 2504              		.loc 1 1156 4 is_stmt 1 view .LVU702
1156:FreeRTOS/tasks.c **** 
 2505              		.loc 1 1156 18 is_stmt 0 view .LVU703
 2506 000e 2A68     		ldr	r2, [r5]
1156:FreeRTOS/tasks.c **** 
 2507              		.loc 1 1156 16 view .LVU704
 2508 0010 1444     		add	r4, r4, r2
 2509              	.LVL188:
1158:FreeRTOS/tasks.c **** 			{
 2510              		.loc 1 1158 4 is_stmt 1 view .LVU705
1158:FreeRTOS/tasks.c **** 			{
 2511              		.loc 1 1158 6 is_stmt 0 view .LVU706
 2512 0012 8242     		cmp	r2, r0
 2513 0014 09D9     		bls	.L183
1165:FreeRTOS/tasks.c **** 				{
 2514              		.loc 1 1165 5 is_stmt 1 view .LVU707
1165:FreeRTOS/tasks.c **** 				{
 2515              		.loc 1 1165 7 is_stmt 0 view .LVU708
 2516 0016 A242     		cmp	r2, r4
 2517 0018 01D8     		bhi	.L184
1190:FreeRTOS/tasks.c **** 
 2518              		.loc 1 1190 4 is_stmt 1 view .LVU709
1190:FreeRTOS/tasks.c **** 
 2519              		.loc 1 1190 24 is_stmt 0 view .LVU710
 2520 001a 2C60     		str	r4, [r5]
1192:FreeRTOS/tasks.c **** 			{
 2521              		.loc 1 1192 4 is_stmt 1 view .LVU711
 2522 001c 0EE0     		b	.L185
 2523              	.L184:
1165:FreeRTOS/tasks.c **** 				{
 2524              		.loc 1 1165 47 is_stmt 0 discriminator 1 view .LVU712
 2525 001e A042     		cmp	r0, r4
 2526 0020 01D3     		bcc	.L186
1190:FreeRTOS/tasks.c **** 
 2527              		.loc 1 1190 4 is_stmt 1 view .LVU713
1190:FreeRTOS/tasks.c **** 
 2528              		.loc 1 1190 24 is_stmt 0 view .LVU714
 2529 0022 2C60     		str	r4, [r5]
1192:FreeRTOS/tasks.c **** 			{
 2530              		.loc 1 1192 4 is_stmt 1 view .LVU715
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 145


 2531 0024 0AE0     		b	.L185
 2532              	.L186:
1167:FreeRTOS/tasks.c **** 				}
 2533              		.loc 1 1167 6 view .LVU716
 2534              	.LVL189:
1190:FreeRTOS/tasks.c **** 
 2535              		.loc 1 1190 4 view .LVU717
1190:FreeRTOS/tasks.c **** 
 2536              		.loc 1 1190 24 is_stmt 0 view .LVU718
 2537 0026 2C60     		str	r4, [r5]
1192:FreeRTOS/tasks.c **** 			{
 2538              		.loc 1 1192 4 is_stmt 1 view .LVU719
 2539 0028 04E0     		b	.L187
 2540              	.LVL190:
 2541              	.L183:
1179:FreeRTOS/tasks.c **** 				{
 2542              		.loc 1 1179 5 view .LVU720
1179:FreeRTOS/tasks.c **** 				{
 2543              		.loc 1 1179 7 is_stmt 0 view .LVU721
 2544 002a A242     		cmp	r2, r4
 2545 002c 01D8     		bhi	.L188
1179:FreeRTOS/tasks.c **** 				{
 2546              		.loc 1 1179 47 discriminator 1 view .LVU722
 2547 002e A042     		cmp	r0, r4
 2548 0030 12D2     		bcs	.L189
 2549              	.L188:
1181:FreeRTOS/tasks.c **** 				}
 2550              		.loc 1 1181 6 is_stmt 1 view .LVU723
 2551              	.LVL191:
1190:FreeRTOS/tasks.c **** 
 2552              		.loc 1 1190 4 view .LVU724
1190:FreeRTOS/tasks.c **** 
 2553              		.loc 1 1190 24 is_stmt 0 view .LVU725
 2554 0032 2C60     		str	r4, [r5]
1192:FreeRTOS/tasks.c **** 			{
 2555              		.loc 1 1192 4 is_stmt 1 view .LVU726
 2556              	.L187:
1194:FreeRTOS/tasks.c **** 
 2557              		.loc 1 1194 41 view .LVU727
1198:FreeRTOS/tasks.c **** 			}
 2558              		.loc 1 1198 5 view .LVU728
 2559 0034 0021     		movs	r1, #0
 2560 0036 201A     		subs	r0, r4, r0
 2561              	.LVL192:
1198:FreeRTOS/tasks.c **** 			}
 2562              		.loc 1 1198 5 is_stmt 0 view .LVU729
 2563 0038 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2564              	.LVL193:
 2565              	.L185:
1202:FreeRTOS/tasks.c **** 			}
 2566              		.loc 1 1202 29 is_stmt 1 view .LVU730
 2567              	.LBE46:
1205:FreeRTOS/tasks.c **** 
 2568              		.loc 1 1205 3 view .LVU731
1205:FreeRTOS/tasks.c **** 
 2569              		.loc 1 1205 21 is_stmt 0 view .LVU732
 2570 003c FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 146


 2571              	.LVL194:
1209:FreeRTOS/tasks.c **** 		{
 2572              		.loc 1 1209 3 is_stmt 1 view .LVU733
1209:FreeRTOS/tasks.c **** 		{
 2573              		.loc 1 1209 5 is_stmt 0 view .LVU734
 2574 0040 48B9     		cbnz	r0, .L182
1211:FreeRTOS/tasks.c **** 		}
 2575              		.loc 1 1211 4 is_stmt 1 view .LVU735
 2576 0042 4FF0E023 		mov	r3, #-536813568
 2577 0046 4FF08052 		mov	r2, #268435456
 2578 004a C3F8042D 		str	r2, [r3, #3332]
1211:FreeRTOS/tasks.c **** 		}
 2579              		.loc 1 1211 4 view .LVU736
 2580              		.syntax unified
 2581              	@ 1211 "FreeRTOS/tasks.c" 1
 2582 004e BFF34F8F 		dsb
 2583              	@ 0 "" 2
1211:FreeRTOS/tasks.c **** 		}
 2584              		.loc 1 1211 4 view .LVU737
 2585              	@ 1211 "FreeRTOS/tasks.c" 1
 2586 0052 BFF36F8F 		isb
 2587              	@ 0 "" 2
1211:FreeRTOS/tasks.c **** 		}
 2588              		.loc 1 1211 26 view .LVU738
1215:FreeRTOS/tasks.c **** 		}
 2589              		.loc 1 1215 28 view .LVU739
 2590              		.thumb
 2591              		.syntax unified
 2592              	.L182:
1217:FreeRTOS/tasks.c **** 
 2593              		.loc 1 1217 2 is_stmt 0 view .LVU740
 2594 0056 38BD     		pop	{r3, r4, r5, pc}
 2595              	.LVL195:
 2596              	.L189:
 2597              	.LBB47:
1190:FreeRTOS/tasks.c **** 
 2598              		.loc 1 1190 4 is_stmt 1 view .LVU741
1190:FreeRTOS/tasks.c **** 
 2599              		.loc 1 1190 24 is_stmt 0 view .LVU742
 2600 0058 2C60     		str	r4, [r5]
1192:FreeRTOS/tasks.c **** 			{
 2601              		.loc 1 1192 4 is_stmt 1 view .LVU743
 2602 005a EFE7     		b	.L185
 2603              	.L193:
 2604              		.align	2
 2605              	.L192:
 2606 005c 00000000 		.word	.LANCHOR14
 2607              	.LBE47:
 2608              		.cfi_endproc
 2609              	.LFE38:
 2611              		.section	.text.vTaskDelay,"ax",%progbits
 2612              		.align	1
 2613              		.global	vTaskDelay
 2614              		.syntax unified
 2615              		.thumb
 2616              		.thumb_func
 2618              	vTaskDelay:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 147


 2619              	.LVL196:
 2620              	.LFB39:
1225:FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2621              		.loc 1 1225 2 view -0
 2622              		.cfi_startproc
 2623              		@ args = 0, pretend = 0, frame = 0
 2624              		@ frame_needed = 0, uses_anonymous_args = 0
1225:FreeRTOS/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2625              		.loc 1 1225 2 is_stmt 0 view .LVU745
 2626 0000 10B5     		push	{r4, lr}
 2627              	.LCFI23:
 2628              		.cfi_def_cfa_offset 8
 2629              		.cfi_offset 4, -8
 2630              		.cfi_offset 14, -4
1226:FreeRTOS/tasks.c **** 
 2631              		.loc 1 1226 2 is_stmt 1 view .LVU746
 2632              	.LVL197:
1229:FreeRTOS/tasks.c **** 		{
 2633              		.loc 1 1229 3 view .LVU747
1229:FreeRTOS/tasks.c **** 		{
 2634              		.loc 1 1229 5 is_stmt 0 view .LVU748
 2635 0002 50B9     		cbnz	r0, .L198
 2636              	.LVL198:
 2637              	.L195:
1256:FreeRTOS/tasks.c **** 		}
 2638              		.loc 1 1256 4 is_stmt 1 view .LVU749
 2639 0004 4FF0E023 		mov	r3, #-536813568
 2640 0008 4FF08052 		mov	r2, #268435456
 2641 000c C3F8042D 		str	r2, [r3, #3332]
1256:FreeRTOS/tasks.c **** 		}
 2642              		.loc 1 1256 4 view .LVU750
 2643              		.syntax unified
 2644              	@ 1256 "FreeRTOS/tasks.c" 1
 2645 0010 BFF34F8F 		dsb
 2646              	@ 0 "" 2
1256:FreeRTOS/tasks.c **** 		}
 2647              		.loc 1 1256 4 view .LVU751
 2648              	@ 1256 "FreeRTOS/tasks.c" 1
 2649 0014 BFF36F8F 		isb
 2650              	@ 0 "" 2
1256:FreeRTOS/tasks.c **** 		}
 2651              		.loc 1 1256 26 view .LVU752
1260:FreeRTOS/tasks.c **** 		}
 2652              		.loc 1 1260 28 view .LVU753
 2653              		.thumb
 2654              		.syntax unified
 2655              	.L194:
1262:FreeRTOS/tasks.c **** 
 2656              		.loc 1 1262 2 is_stmt 0 view .LVU754
 2657 0018 10BD     		pop	{r4, pc}
 2658              	.LVL199:
 2659              	.L198:
1262:FreeRTOS/tasks.c **** 
 2660              		.loc 1 1262 2 view .LVU755
 2661 001a 0446     		mov	r4, r0
1231:FreeRTOS/tasks.c **** 			vTaskSuspendAll();
 2662              		.loc 1 1231 45 is_stmt 1 view .LVU756
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 148


1232:FreeRTOS/tasks.c **** 			{
 2663              		.loc 1 1232 4 view .LVU757
 2664 001c FFF7FEFF 		bl	vTaskSuspendAll
 2665              	.LVL200:
1234:FreeRTOS/tasks.c **** 
 2666              		.loc 1 1234 22 view .LVU758
1243:FreeRTOS/tasks.c **** 			}
 2667              		.loc 1 1243 5 view .LVU759
 2668 0020 0021     		movs	r1, #0
 2669 0022 2046     		mov	r0, r4
 2670 0024 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2671              	.LVL201:
1245:FreeRTOS/tasks.c **** 		}
 2672              		.loc 1 1245 4 view .LVU760
1245:FreeRTOS/tasks.c **** 		}
 2673              		.loc 1 1245 22 is_stmt 0 view .LVU761
 2674 0028 FFF7FEFF 		bl	xTaskResumeAll
 2675              	.LVL202:
1249:FreeRTOS/tasks.c **** 		}
 2676              		.loc 1 1249 28 is_stmt 1 view .LVU762
1254:FreeRTOS/tasks.c **** 		{
 2677              		.loc 1 1254 3 view .LVU763
1254:FreeRTOS/tasks.c **** 		{
 2678              		.loc 1 1254 5 is_stmt 0 view .LVU764
 2679 002c 0028     		cmp	r0, #0
 2680 002e F3D1     		bne	.L194
1254:FreeRTOS/tasks.c **** 		{
 2681              		.loc 1 1254 5 view .LVU765
 2682 0030 E8E7     		b	.L195
 2683              		.cfi_endproc
 2684              	.LFE39:
 2686              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2687              		.align	1
 2688              		.syntax unified
 2689              		.thumb
 2690              		.thumb_func
 2692              	prvCheckTasksWaitingTermination:
 2693              	.LFB66:
3366:FreeRTOS/tasks.c **** 
 2694              		.loc 1 3366 1 is_stmt 1 view -0
 2695              		.cfi_startproc
 2696              		@ args = 0, pretend = 0, frame = 0
 2697              		@ frame_needed = 0, uses_anonymous_args = 0
 2698              	.LBB48:
3372:FreeRTOS/tasks.c **** 
 2699              		.loc 1 3372 3 view .LVU767
3376:FreeRTOS/tasks.c **** 		{
 2700              		.loc 1 3376 3 view .LVU768
3401:FreeRTOS/tasks.c **** 			}
 2701              		.loc 1 3401 29 view .LVU769
3376:FreeRTOS/tasks.c **** 		{
 2702              		.loc 1 3376 8 view .LVU770
3376:FreeRTOS/tasks.c **** 		{
 2703              		.loc 1 3376 39 is_stmt 0 view .LVU771
 2704 0000 134B     		ldr	r3, .L208
 2705 0002 1B68     		ldr	r3, [r3]
3376:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 149


 2706              		.loc 1 3376 8 view .LVU772
 2707 0004 13B3     		cbz	r3, .L206
 2708              	.LBE48:
3366:FreeRTOS/tasks.c **** 
 2709              		.loc 1 3366 1 view .LVU773
 2710 0006 10B5     		push	{r4, lr}
 2711              	.LCFI24:
 2712              		.cfi_def_cfa_offset 8
 2713              		.cfi_offset 4, -8
 2714              		.cfi_offset 14, -4
 2715              	.L202:
 2716              	.LBB50:
3378:FreeRTOS/tasks.c **** 			{
 2717              		.loc 1 3378 4 is_stmt 1 view .LVU774
 2718 0008 FFF7FEFF 		bl	vTaskSuspendAll
 2719              	.LVL203:
3380:FreeRTOS/tasks.c **** 			}
 2720              		.loc 1 3380 5 view .LVU775
3380:FreeRTOS/tasks.c **** 			}
 2721              		.loc 1 3380 20 is_stmt 0 view .LVU776
 2722 000c 114B     		ldr	r3, .L208+4
 2723 000e 1C68     		ldr	r4, [r3]
 2724              	.LVL204:
3382:FreeRTOS/tasks.c **** 
 2725              		.loc 1 3382 4 is_stmt 1 view .LVU777
3382:FreeRTOS/tasks.c **** 
 2726              		.loc 1 3382 13 is_stmt 0 view .LVU778
 2727 0010 FFF7FEFF 		bl	xTaskResumeAll
 2728              	.LVL205:
3384:FreeRTOS/tasks.c **** 			{
 2729              		.loc 1 3384 4 is_stmt 1 view .LVU779
3384:FreeRTOS/tasks.c **** 			{
 2730              		.loc 1 3384 6 is_stmt 0 view .LVU780
 2731 0014 24B9     		cbnz	r4, .L207
 2732              	.LVL206:
 2733              	.L201:
3401:FreeRTOS/tasks.c **** 			}
 2734              		.loc 1 3401 29 is_stmt 1 view .LVU781
3376:FreeRTOS/tasks.c **** 		{
 2735              		.loc 1 3376 8 view .LVU782
3376:FreeRTOS/tasks.c **** 		{
 2736              		.loc 1 3376 39 is_stmt 0 view .LVU783
 2737 0016 0E4B     		ldr	r3, .L208
 2738 0018 1B68     		ldr	r3, [r3]
3376:FreeRTOS/tasks.c **** 		{
 2739              		.loc 1 3376 8 view .LVU784
 2740 001a 002B     		cmp	r3, #0
 2741 001c F4D1     		bne	.L202
 2742              	.LBE50:
3406:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2743              		.loc 1 3406 1 view .LVU785
 2744 001e 10BD     		pop	{r4, pc}
 2745              	.LVL207:
 2746              	.L207:
 2747              	.LBB51:
 2748              	.LBB49:
3386:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 150


 2749              		.loc 1 3386 5 is_stmt 1 view .LVU786
3388:FreeRTOS/tasks.c **** 				{
 2750              		.loc 1 3388 5 view .LVU787
 2751 0020 FFF7FEFF 		bl	vPortEnterCritical
 2752              	.LVL208:
3390:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2753              		.loc 1 3390 6 view .LVU788
3390:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2754              		.loc 1 3390 26 is_stmt 0 view .LVU789
 2755 0024 0B4B     		ldr	r3, .L208+4
 2756 0026 DB68     		ldr	r3, [r3, #12]
3390:FreeRTOS/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2757              		.loc 1 3390 12 view .LVU790
 2758 0028 DC68     		ldr	r4, [r3, #12]
 2759              	.LVL209:
3391:FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 2760              		.loc 1 3391 6 is_stmt 1 view .LVU791
3391:FreeRTOS/tasks.c **** 					--uxCurrentNumberOfTasks;
 2761              		.loc 1 3391 15 is_stmt 0 view .LVU792
 2762 002a 201D     		adds	r0, r4, #4
 2763 002c FFF7FEFF 		bl	uxListRemove
 2764              	.LVL210:
3392:FreeRTOS/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2765              		.loc 1 3392 6 is_stmt 1 view .LVU793
 2766 0030 094A     		ldr	r2, .L208+8
 2767 0032 1368     		ldr	r3, [r2]
 2768 0034 013B     		subs	r3, r3, #1
 2769 0036 1360     		str	r3, [r2]
3393:FreeRTOS/tasks.c **** 				}
 2770              		.loc 1 3393 6 view .LVU794
 2771 0038 054A     		ldr	r2, .L208
 2772 003a 1368     		ldr	r3, [r2]
 2773 003c 013B     		subs	r3, r3, #1
 2774 003e 1360     		str	r3, [r2]
3395:FreeRTOS/tasks.c **** 
 2775              		.loc 1 3395 5 view .LVU795
 2776 0040 FFF7FEFF 		bl	vPortExitCritical
 2777              	.LVL211:
3397:FreeRTOS/tasks.c **** 			}
 2778              		.loc 1 3397 5 view .LVU796
 2779 0044 2046     		mov	r0, r4
 2780 0046 FFF7FEFF 		bl	prvDeleteTCB
 2781              	.LVL212:
 2782              	.LBE49:
 2783 004a E4E7     		b	.L201
 2784              	.LVL213:
 2785              	.L206:
 2786              	.LCFI25:
 2787              		.cfi_def_cfa_offset 0
 2788              		.cfi_restore 4
 2789              		.cfi_restore 14
3397:FreeRTOS/tasks.c **** 			}
 2790              		.loc 1 3397 5 is_stmt 0 view .LVU797
 2791 004c 7047     		bx	lr
 2792              	.L209:
 2793 004e 00BF     		.align	2
 2794              	.L208:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 151


 2795 0050 00000000 		.word	.LANCHOR15
 2796 0054 00000000 		.word	.LANCHOR7
 2797 0058 00000000 		.word	.LANCHOR9
 2798              	.LBE51:
 2799              		.cfi_endproc
 2800              	.LFE66:
 2802              		.section	.text.prvIdleTask,"ax",%progbits
 2803              		.align	1
 2804              		.syntax unified
 2805              		.thumb
 2806              		.thumb_func
 2808              	prvIdleTask:
 2809              	.LFB64:
3132:FreeRTOS/tasks.c **** 	/* Stop warnings. */
 2810              		.loc 1 3132 1 is_stmt 1 view -0
 2811              		.cfi_startproc
 2812              		@ Volatile: function does not return.
 2813              		@ args = 0, pretend = 0, frame = 0
 2814              		@ frame_needed = 0, uses_anonymous_args = 0
 2815              	.LVL214:
3132:FreeRTOS/tasks.c **** 	/* Stop warnings. */
 2816              		.loc 1 3132 1 is_stmt 0 view .LVU799
 2817 0000 08B5     		push	{r3, lr}
 2818              	.LCFI26:
 2819              		.cfi_def_cfa_offset 8
 2820              		.cfi_offset 3, -8
 2821              		.cfi_offset 14, -4
 2822              	.LVL215:
 2823              	.L211:
3134:FreeRTOS/tasks.c **** 
 2824              		.loc 1 3134 2 is_stmt 1 view .LVU800
3139:FreeRTOS/tasks.c **** 	{
 2825              		.loc 1 3139 2 view .LVU801
3143:FreeRTOS/tasks.c **** 
 2826              		.loc 1 3143 3 view .LVU802
 2827 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2828              	.LVL216:
3166:FreeRTOS/tasks.c **** 			{
 2829              		.loc 1 3166 4 view .LVU803
3166:FreeRTOS/tasks.c **** 			{
 2830              		.loc 1 3166 8 is_stmt 0 view .LVU804
 2831 0006 074B     		ldr	r3, .L214
 2832 0008 1B68     		ldr	r3, [r3]
3166:FreeRTOS/tasks.c **** 			{
 2833              		.loc 1 3166 6 view .LVU805
 2834 000a 012B     		cmp	r3, #1
 2835 000c F9D9     		bls	.L211
3168:FreeRTOS/tasks.c **** 			}
 2836              		.loc 1 3168 5 is_stmt 1 view .LVU806
 2837 000e 4FF0E023 		mov	r3, #-536813568
 2838 0012 4FF08052 		mov	r2, #268435456
 2839 0016 C3F8042D 		str	r2, [r3, #3332]
3168:FreeRTOS/tasks.c **** 			}
 2840              		.loc 1 3168 5 view .LVU807
 2841              		.syntax unified
 2842              	@ 3168 "FreeRTOS/tasks.c" 1
 2843 001a BFF34F8F 		dsb
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 152


 2844              	@ 0 "" 2
3168:FreeRTOS/tasks.c **** 			}
 2845              		.loc 1 3168 5 view .LVU808
 2846              	@ 3168 "FreeRTOS/tasks.c" 1
 2847 001e BFF36F8F 		isb
 2848              	@ 0 "" 2
3168:FreeRTOS/tasks.c **** 			}
 2849              		.loc 1 3168 16 view .LVU809
 2850              		.thumb
 2851              		.syntax unified
 2852 0022 EEE7     		b	.L211
 2853              	.L215:
 2854              		.align	2
 2855              	.L214:
 2856 0024 00000000 		.word	.LANCHOR4
 2857              		.cfi_endproc
 2858              	.LFE64:
 2860              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2861              		.align	1
 2862              		.global	vTaskSwitchContext
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2867              	vTaskSwitchContext:
 2868              	.LFB56:
2762:FreeRTOS/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2869              		.loc 1 2762 1 view -0
 2870              		.cfi_startproc
 2871              		@ args = 0, pretend = 0, frame = 0
 2872              		@ frame_needed = 0, uses_anonymous_args = 0
 2873              		@ link register save eliminated.
2763:FreeRTOS/tasks.c **** 	{
 2874              		.loc 1 2763 2 view .LVU811
2763:FreeRTOS/tasks.c **** 	{
 2875              		.loc 1 2763 27 is_stmt 0 view .LVU812
 2876 0000 184B     		ldr	r3, .L221
 2877 0002 1B68     		ldr	r3, [r3]
2763:FreeRTOS/tasks.c **** 	{
 2878              		.loc 1 2763 4 view .LVU813
 2879 0004 1BB1     		cbz	r3, .L217
2767:FreeRTOS/tasks.c **** 	}
 2880              		.loc 1 2767 3 is_stmt 1 view .LVU814
2767:FreeRTOS/tasks.c **** 	}
 2881              		.loc 1 2767 17 is_stmt 0 view .LVU815
 2882 0006 184B     		ldr	r3, .L221+4
 2883 0008 0122     		movs	r2, #1
 2884 000a 1A60     		str	r2, [r3]
 2885 000c 7047     		bx	lr
 2886              	.L217:
2771:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2887              		.loc 1 2771 3 is_stmt 1 view .LVU816
2771:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2888              		.loc 1 2771 17 is_stmt 0 view .LVU817
 2889 000e 164B     		ldr	r3, .L221+4
 2890 0010 0022     		movs	r2, #0
 2891 0012 1A60     		str	r2, [r3]
2772:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 153


 2892              		.loc 1 2772 27 is_stmt 1 view .LVU818
2802:FreeRTOS/tasks.c **** 
 2893              		.loc 1 2802 33 view .LVU819
 2894              	.LBB52:
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2895              		.loc 1 2806 3 view .LVU820
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2896              		.loc 1 2806 3 view .LVU821
 2897 0014 154B     		ldr	r3, .L221+8
 2898 0016 1B68     		ldr	r3, [r3]
 2899              	.LVL217:
 2900              	.LBB53:
 2901              	.LBI53:
 172:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	{
 2902              		.loc 2 172 59 view .LVU822
 2903              	.LBB54:
 174:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 2904              		.loc 2 174 2 view .LVU823
 176:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		return ucReturn;
 2905              		.loc 2 176 3 view .LVU824
 2906              		.syntax unified
 2907              	@ 176 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 2908 0018 B3FA83F3 		clz r3, r3
 2909              	@ 0 "" 2
 2910              	.LVL218:
 176:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		return ucReturn;
 2911              		.loc 2 176 3 is_stmt 0 view .LVU825
 2912              		.thumb
 2913              		.syntax unified
 2914 001c DBB2     		uxtb	r3, r3
 2915              	.LVL219:
 177:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	}
 2916              		.loc 2 177 3 is_stmt 1 view .LVU826
 177:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	}
 2917              		.loc 2 177 3 is_stmt 0 view .LVU827
 2918              	.LBE54:
 2919              	.LBE53:
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2920              		.loc 1 2806 3 view .LVU828
 2921 001e C3F11F03 		rsb	r3, r3, #31
 2922              	.LVL220:
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2923              		.loc 1 2806 3 is_stmt 1 view .LVU829
 2924              	.LBB55:
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2925              		.loc 1 2806 3 view .LVU830
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2926              		.loc 1 2806 3 view .LVU831
 2927 0022 1349     		ldr	r1, .L221+12
 2928 0024 03EB8300 		add	r0, r3, r3, lsl #2
 2929 0028 8200     		lsls	r2, r0, #2
 2930 002a 0A44     		add	r2, r2, r1
 2931 002c 5068     		ldr	r0, [r2, #4]
 2932 002e 4068     		ldr	r0, [r0, #4]
 2933 0030 5060     		str	r0, [r2, #4]
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2934              		.loc 1 2806 3 view .LVU832
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 154


 2935 0032 03EB830C 		add	ip, r3, r3, lsl #2
 2936 0036 4FEA8C02 		lsl	r2, ip, #2
 2937 003a 0832     		adds	r2, r2, #8
 2938 003c 1144     		add	r1, r1, r2
 2939 003e 8842     		cmp	r0, r1
 2940 0040 09D0     		beq	.L220
 2941              	.L219:
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2942              		.loc 1 2806 3 discriminator 3 view .LVU833
 2943 0042 03EB8303 		add	r3, r3, r3, lsl #2
 2944              	.LVL221:
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2945              		.loc 1 2806 3 is_stmt 0 discriminator 3 view .LVU834
 2946 0046 9A00     		lsls	r2, r3, #2
 2947 0048 094B     		ldr	r3, .L221+12
 2948 004a 1344     		add	r3, r3, r2
 2949 004c 5B68     		ldr	r3, [r3, #4]
 2950 004e DA68     		ldr	r2, [r3, #12]
 2951 0050 084B     		ldr	r3, .L221+16
 2952 0052 1A60     		str	r2, [r3]
 2953              	.LBE55:
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2954              		.loc 1 2806 3 is_stmt 1 discriminator 3 view .LVU835
 2955              	.LBE52:
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2956              		.loc 1 2806 37 discriminator 3 view .LVU836
2807:FreeRTOS/tasks.c **** 
 2957              		.loc 1 2807 26 discriminator 3 view .LVU837
2817:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 2958              		.loc 1 2817 1 is_stmt 0 discriminator 3 view .LVU838
 2959 0054 7047     		bx	lr
 2960              	.LVL222:
 2961              	.L220:
 2962              	.LBB57:
 2963              	.LBB56:
2806:FreeRTOS/tasks.c **** 		traceTASK_SWITCHED_IN();
 2964              		.loc 1 2806 3 is_stmt 1 discriminator 1 view .LVU839
 2965 0056 4068     		ldr	r0, [r0, #4]
 2966 0058 6246     		mov	r2, ip
 2967 005a 9100     		lsls	r1, r2, #2
 2968 005c 044A     		ldr	r2, .L221+12
 2969 005e 0A44     		add	r2, r2, r1
 2970 0060 5060     		str	r0, [r2, #4]
 2971 0062 EEE7     		b	.L219
 2972              	.L222:
 2973              		.align	2
 2974              	.L221:
 2975 0064 00000000 		.word	.LANCHOR16
 2976 0068 00000000 		.word	.LANCHOR20
 2977 006c 00000000 		.word	.LANCHOR13
 2978 0070 00000000 		.word	.LANCHOR4
 2979 0074 00000000 		.word	.LANCHOR10
 2980              	.LBE56:
 2981              	.LBE57:
 2982              		.cfi_endproc
 2983              	.LFE56:
 2985              		.section	.text.vTaskSuspend,"ax",%progbits
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 155


 2986              		.align	1
 2987              		.global	vTaskSuspend
 2988              		.syntax unified
 2989              		.thumb
 2990              		.thumb_func
 2992              	vTaskSuspend:
 2993              	.LVL223:
 2994              	.LFB43:
1567:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 2995              		.loc 1 1567 2 view -0
 2996              		.cfi_startproc
 2997              		@ args = 0, pretend = 0, frame = 0
 2998              		@ frame_needed = 0, uses_anonymous_args = 0
1567:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 2999              		.loc 1 1567 2 is_stmt 0 view .LVU841
 3000 0000 38B5     		push	{r3, r4, r5, lr}
 3001              	.LCFI27:
 3002              		.cfi_def_cfa_offset 16
 3003              		.cfi_offset 3, -16
 3004              		.cfi_offset 4, -12
 3005              		.cfi_offset 5, -8
 3006              		.cfi_offset 14, -4
 3007 0002 0446     		mov	r4, r0
1568:FreeRTOS/tasks.c **** 
 3008              		.loc 1 1568 2 is_stmt 1 view .LVU842
1570:FreeRTOS/tasks.c **** 		{
 3009              		.loc 1 1570 3 view .LVU843
 3010 0004 FFF7FEFF 		bl	vPortEnterCritical
 3011              	.LVL224:
1574:FreeRTOS/tasks.c **** 
 3012              		.loc 1 1574 4 view .LVU844
1574:FreeRTOS/tasks.c **** 
 3013              		.loc 1 1574 12 is_stmt 0 view .LVU845
 3014 0008 34B3     		cbz	r4, .L232
 3015              	.LVL225:
 3016              	.L224:
1576:FreeRTOS/tasks.c **** 
 3017              		.loc 1 1576 30 is_stmt 1 discriminator 4 view .LVU846
1580:FreeRTOS/tasks.c **** 			{
 3018              		.loc 1 1580 4 discriminator 4 view .LVU847
1580:FreeRTOS/tasks.c **** 			{
 3019              		.loc 1 1580 8 is_stmt 0 discriminator 4 view .LVU848
 3020 000a 251D     		adds	r5, r4, #4
 3021 000c 2846     		mov	r0, r5
 3022 000e FFF7FEFF 		bl	uxListRemove
 3023              	.LVL226:
1580:FreeRTOS/tasks.c **** 			{
 3024              		.loc 1 1580 6 discriminator 4 view .LVU849
 3025 0012 68B9     		cbnz	r0, .L225
1582:FreeRTOS/tasks.c **** 			}
 3026              		.loc 1 1582 5 is_stmt 1 view .LVU850
 3027 0014 E36A     		ldr	r3, [r4, #44]
 3028 0016 03EB8301 		add	r1, r3, r3, lsl #2
 3029 001a 224A     		ldr	r2, .L235
 3030 001c 52F82120 		ldr	r2, [r2, r1, lsl #2]
 3031 0020 32B9     		cbnz	r2, .L225
1582:FreeRTOS/tasks.c **** 			}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 156


 3032              		.loc 1 1582 5 discriminator 1 view .LVU851
 3033 0022 0122     		movs	r2, #1
 3034 0024 9A40     		lsls	r2, r2, r3
 3035 0026 2049     		ldr	r1, .L235+4
 3036 0028 0B68     		ldr	r3, [r1]
 3037 002a 23EA0203 		bic	r3, r3, r2
 3038 002e 0B60     		str	r3, [r1]
 3039              	.L225:
1586:FreeRTOS/tasks.c **** 			}
 3040              		.loc 1 1586 29 view .LVU852
1590:FreeRTOS/tasks.c **** 			{
 3041              		.loc 1 1590 4 view .LVU853
1590:FreeRTOS/tasks.c **** 			{
 3042              		.loc 1 1590 8 is_stmt 0 view .LVU854
 3043 0030 A36A     		ldr	r3, [r4, #40]
1590:FreeRTOS/tasks.c **** 			{
 3044              		.loc 1 1590 6 view .LVU855
 3045 0032 1BB1     		cbz	r3, .L226
1592:FreeRTOS/tasks.c **** 			}
 3046              		.loc 1 1592 5 is_stmt 1 view .LVU856
1592:FreeRTOS/tasks.c **** 			}
 3047              		.loc 1 1592 14 is_stmt 0 view .LVU857
 3048 0034 04F11800 		add	r0, r4, #24
 3049 0038 FFF7FEFF 		bl	uxListRemove
 3050              	.LVL227:
 3051              	.L226:
1596:FreeRTOS/tasks.c **** 			}
 3052              		.loc 1 1596 29 is_stmt 1 view .LVU858
1599:FreeRTOS/tasks.c **** 		}
 3053              		.loc 1 1599 4 view .LVU859
 3054 003c 2946     		mov	r1, r5
 3055 003e 1B48     		ldr	r0, .L235+8
 3056 0040 FFF7FEFF 		bl	vListInsertEnd
 3057              	.LVL228:
1601:FreeRTOS/tasks.c **** 
 3058              		.loc 1 1601 3 view .LVU860
 3059 0044 FFF7FEFF 		bl	vPortExitCritical
 3060              	.LVL229:
1603:FreeRTOS/tasks.c **** 		{
 3061              		.loc 1 1603 3 view .LVU861
1603:FreeRTOS/tasks.c **** 		{
 3062              		.loc 1 1603 25 is_stmt 0 view .LVU862
 3063 0048 194B     		ldr	r3, .L235+12
 3064 004a 1B68     		ldr	r3, [r3]
1603:FreeRTOS/tasks.c **** 		{
 3065              		.loc 1 1603 5 view .LVU863
 3066 004c 3BB9     		cbnz	r3, .L233
 3067              	.L227:
1615:FreeRTOS/tasks.c **** 		}
 3068              		.loc 1 1615 28 is_stmt 1 view .LVU864
1618:FreeRTOS/tasks.c **** 		{
 3069              		.loc 1 1618 3 view .LVU865
1618:FreeRTOS/tasks.c **** 		{
 3070              		.loc 1 1618 13 is_stmt 0 view .LVU866
 3071 004e 194B     		ldr	r3, .L235+16
 3072 0050 1B68     		ldr	r3, [r3]
1618:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 157


 3073              		.loc 1 1618 5 view .LVU867
 3074 0052 A342     		cmp	r3, r4
 3075 0054 0AD0     		beq	.L234
 3076              	.L223:
1649:FreeRTOS/tasks.c **** 
 3077              		.loc 1 1649 2 view .LVU868
 3078 0056 38BD     		pop	{r3, r4, r5, pc}
 3079              	.LVL230:
 3080              	.L232:
1574:FreeRTOS/tasks.c **** 
 3081              		.loc 1 1574 12 discriminator 1 view .LVU869
 3082 0058 164B     		ldr	r3, .L235+16
 3083 005a 1C68     		ldr	r4, [r3]
 3084              	.LVL231:
1574:FreeRTOS/tasks.c **** 
 3085              		.loc 1 1574 12 discriminator 1 view .LVU870
 3086 005c D5E7     		b	.L224
 3087              	.LVL232:
 3088              	.L233:
1607:FreeRTOS/tasks.c **** 			{
 3089              		.loc 1 1607 4 is_stmt 1 view .LVU871
 3090 005e FFF7FEFF 		bl	vPortEnterCritical
 3091              	.LVL233:
1609:FreeRTOS/tasks.c **** 			}
 3092              		.loc 1 1609 5 view .LVU872
 3093 0062 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3094              	.LVL234:
1611:FreeRTOS/tasks.c **** 		}
 3095              		.loc 1 1611 4 view .LVU873
 3096 0066 FFF7FEFF 		bl	vPortExitCritical
 3097              	.LVL235:
 3098 006a F0E7     		b	.L227
 3099              	.L234:
1620:FreeRTOS/tasks.c **** 			{
 3100              		.loc 1 1620 4 view .LVU874
1620:FreeRTOS/tasks.c **** 			{
 3101              		.loc 1 1620 26 is_stmt 0 view .LVU875
 3102 006c 104B     		ldr	r3, .L235+12
 3103 006e 1B68     		ldr	r3, [r3]
1620:FreeRTOS/tasks.c **** 			{
 3104              		.loc 1 1620 6 view .LVU876
 3105 0070 53B1     		cbz	r3, .L229
1623:FreeRTOS/tasks.c **** 				portYIELD_WITHIN_API();
 3106              		.loc 1 1623 46 is_stmt 1 view .LVU877
1624:FreeRTOS/tasks.c **** 			}
 3107              		.loc 1 1624 5 view .LVU878
 3108 0072 4FF0E023 		mov	r3, #-536813568
 3109 0076 4FF08052 		mov	r2, #268435456
 3110 007a C3F8042D 		str	r2, [r3, #3332]
1624:FreeRTOS/tasks.c **** 			}
 3111              		.loc 1 1624 5 view .LVU879
 3112              		.syntax unified
 3113              	@ 1624 "FreeRTOS/tasks.c" 1
 3114 007e BFF34F8F 		dsb
 3115              	@ 0 "" 2
1624:FreeRTOS/tasks.c **** 			}
 3116              		.loc 1 1624 5 view .LVU880
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 158


 3117              	@ 1624 "FreeRTOS/tasks.c" 1
 3118 0082 BFF36F8F 		isb
 3119              	@ 0 "" 2
1624:FreeRTOS/tasks.c **** 			}
 3120              		.loc 1 1624 27 view .LVU881
 3121              		.thumb
 3122              		.syntax unified
 3123 0086 E6E7     		b	.L223
 3124              	.L229:
1631:FreeRTOS/tasks.c **** 				{
 3125              		.loc 1 1631 5 view .LVU882
1631:FreeRTOS/tasks.c **** 				{
 3126              		.loc 1 1631 9 is_stmt 0 view .LVU883
 3127 0088 084B     		ldr	r3, .L235+8
 3128 008a 1A68     		ldr	r2, [r3]
1631:FreeRTOS/tasks.c **** 				{
 3129              		.loc 1 1631 56 view .LVU884
 3130 008c 0A4B     		ldr	r3, .L235+20
 3131 008e 1B68     		ldr	r3, [r3]
1631:FreeRTOS/tasks.c **** 				{
 3132              		.loc 1 1631 7 view .LVU885
 3133 0090 9A42     		cmp	r2, r3
 3134 0092 03D1     		bne	.L230
1637:FreeRTOS/tasks.c **** 				}
 3135              		.loc 1 1637 6 is_stmt 1 view .LVU886
1637:FreeRTOS/tasks.c **** 				}
 3136              		.loc 1 1637 19 is_stmt 0 view .LVU887
 3137 0094 074B     		ldr	r3, .L235+16
 3138 0096 0022     		movs	r2, #0
 3139 0098 1A60     		str	r2, [r3]
 3140 009a DCE7     		b	.L223
 3141              	.L230:
1641:FreeRTOS/tasks.c **** 				}
 3142              		.loc 1 1641 6 is_stmt 1 view .LVU888
 3143 009c FFF7FEFF 		bl	vTaskSwitchContext
 3144              	.LVL236:
1647:FreeRTOS/tasks.c **** 		}
 3145              		.loc 1 1647 28 view .LVU889
1649:FreeRTOS/tasks.c **** 
 3146              		.loc 1 1649 2 is_stmt 0 view .LVU890
 3147 00a0 D9E7     		b	.L223
 3148              	.L236:
 3149 00a2 00BF     		.align	2
 3150              	.L235:
 3151 00a4 00000000 		.word	.LANCHOR4
 3152 00a8 00000000 		.word	.LANCHOR13
 3153 00ac 00000000 		.word	.LANCHOR0
 3154 00b0 00000000 		.word	.LANCHOR11
 3155 00b4 00000000 		.word	.LANCHOR10
 3156 00b8 00000000 		.word	.LANCHOR9
 3157              		.cfi_endproc
 3158              	.LFE43:
 3160              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3161              		.align	1
 3162              		.global	vTaskPlaceOnEventList
 3163              		.syntax unified
 3164              		.thumb
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 159


 3165              		.thumb_func
 3167              	vTaskPlaceOnEventList:
 3168              	.LVL237:
 3169              	.LFB57:
2821:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 3170              		.loc 1 2821 1 is_stmt 1 view -0
 3171              		.cfi_startproc
 3172              		@ args = 0, pretend = 0, frame = 0
 3173              		@ frame_needed = 0, uses_anonymous_args = 0
2821:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 3174              		.loc 1 2821 1 is_stmt 0 view .LVU892
 3175 0000 10B5     		push	{r4, lr}
 3176              	.LCFI28:
 3177              		.cfi_def_cfa_offset 8
 3178              		.cfi_offset 4, -8
 3179              		.cfi_offset 14, -4
 3180 0002 0C46     		mov	r4, r1
2822:FreeRTOS/tasks.c **** 
 3181              		.loc 1 2822 29 is_stmt 1 view .LVU893
2831:FreeRTOS/tasks.c **** 
 3182              		.loc 1 2831 2 view .LVU894
2831:FreeRTOS/tasks.c **** 
 3183              		.loc 1 2831 43 is_stmt 0 view .LVU895
 3184 0004 044B     		ldr	r3, .L239
 3185 0006 1968     		ldr	r1, [r3]
 3186              	.LVL238:
2831:FreeRTOS/tasks.c **** 
 3187              		.loc 1 2831 2 view .LVU896
 3188 0008 1831     		adds	r1, r1, #24
 3189 000a FFF7FEFF 		bl	vListInsert
 3190              	.LVL239:
2833:FreeRTOS/tasks.c **** }
 3191              		.loc 1 2833 2 is_stmt 1 view .LVU897
 3192 000e 0121     		movs	r1, #1
 3193 0010 2046     		mov	r0, r4
 3194 0012 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3195              	.LVL240:
2834:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3196              		.loc 1 2834 1 is_stmt 0 view .LVU898
 3197 0016 10BD     		pop	{r4, pc}
 3198              	.LVL241:
 3199              	.L240:
2834:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3200              		.loc 1 2834 1 view .LVU899
 3201              		.align	2
 3202              	.L239:
 3203 0018 00000000 		.word	.LANCHOR10
 3204              		.cfi_endproc
 3205              	.LFE57:
 3207              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3208              		.align	1
 3209              		.global	vTaskPlaceOnUnorderedEventList
 3210              		.syntax unified
 3211              		.thumb
 3212              		.thumb_func
 3214              	vTaskPlaceOnUnorderedEventList:
 3215              	.LVL242:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 160


 3216              	.LFB58:
2838:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 3217              		.loc 1 2838 1 is_stmt 1 view -0
 3218              		.cfi_startproc
 3219              		@ args = 0, pretend = 0, frame = 0
 3220              		@ frame_needed = 0, uses_anonymous_args = 0
2838:FreeRTOS/tasks.c **** 	configASSERT( pxEventList );
 3221              		.loc 1 2838 1 is_stmt 0 view .LVU901
 3222 0000 10B5     		push	{r4, lr}
 3223              	.LCFI29:
 3224              		.cfi_def_cfa_offset 8
 3225              		.cfi_offset 4, -8
 3226              		.cfi_offset 14, -4
 3227 0002 1446     		mov	r4, r2
2839:FreeRTOS/tasks.c **** 
 3228              		.loc 1 2839 29 is_stmt 1 view .LVU902
2843:FreeRTOS/tasks.c **** 
 3229              		.loc 1 2843 43 view .LVU903
2848:FreeRTOS/tasks.c **** 
 3230              		.loc 1 2848 2 view .LVU904
 3231 0004 064B     		ldr	r3, .L243
 3232 0006 1A68     		ldr	r2, [r3]
 3233              	.LVL243:
2848:FreeRTOS/tasks.c **** 
 3234              		.loc 1 2848 2 is_stmt 0 view .LVU905
 3235 0008 41F00041 		orr	r1, r1, #-2147483648
 3236              	.LVL244:
2848:FreeRTOS/tasks.c **** 
 3237              		.loc 1 2848 2 view .LVU906
 3238 000c 9161     		str	r1, [r2, #24]
2855:FreeRTOS/tasks.c **** 
 3239              		.loc 1 2855 2 is_stmt 1 view .LVU907
2855:FreeRTOS/tasks.c **** 
 3240              		.loc 1 2855 46 is_stmt 0 view .LVU908
 3241 000e 1968     		ldr	r1, [r3]
2855:FreeRTOS/tasks.c **** 
 3242              		.loc 1 2855 2 view .LVU909
 3243 0010 1831     		adds	r1, r1, #24
 3244 0012 FFF7FEFF 		bl	vListInsertEnd
 3245              	.LVL245:
2857:FreeRTOS/tasks.c **** }
 3246              		.loc 1 2857 2 is_stmt 1 view .LVU910
 3247 0016 0121     		movs	r1, #1
 3248 0018 2046     		mov	r0, r4
 3249 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3250              	.LVL246:
2858:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3251              		.loc 1 2858 1 is_stmt 0 view .LVU911
 3252 001e 10BD     		pop	{r4, pc}
 3253              	.LVL247:
 3254              	.L244:
2858:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3255              		.loc 1 2858 1 view .LVU912
 3256              		.align	2
 3257              	.L243:
 3258 0020 00000000 		.word	.LANCHOR10
 3259              		.cfi_endproc
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 161


 3260              	.LFE58:
 3262              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3263              		.align	1
 3264              		.global	xTaskRemoveFromEventList
 3265              		.syntax unified
 3266              		.thumb
 3267              		.thumb_func
 3269              	xTaskRemoveFromEventList:
 3270              	.LVL248:
 3271              	.LFB59:
2895:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 3272              		.loc 1 2895 1 is_stmt 1 view -0
 3273              		.cfi_startproc
 3274              		@ args = 0, pretend = 0, frame = 0
 3275              		@ frame_needed = 0, uses_anonymous_args = 0
2895:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 3276              		.loc 1 2895 1 is_stmt 0 view .LVU914
 3277 0000 38B5     		push	{r3, r4, r5, lr}
 3278              	.LCFI30:
 3279              		.cfi_def_cfa_offset 16
 3280              		.cfi_offset 3, -16
 3281              		.cfi_offset 4, -12
 3282              		.cfi_offset 5, -8
 3283              		.cfi_offset 14, -4
2896:FreeRTOS/tasks.c **** BaseType_t xReturn;
 3284              		.loc 1 2896 1 is_stmt 1 view .LVU915
2897:FreeRTOS/tasks.c **** 
 3285              		.loc 1 2897 1 view .LVU916
2912:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3286              		.loc 1 2912 2 view .LVU917
2912:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3287              		.loc 1 2912 31 is_stmt 0 view .LVU918
 3288 0002 C368     		ldr	r3, [r0, #12]
2912:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3289              		.loc 1 2912 17 view .LVU919
 3290 0004 DC68     		ldr	r4, [r3, #12]
 3291              	.LVL249:
2913:FreeRTOS/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3292              		.loc 1 2913 32 is_stmt 1 view .LVU920
2914:FreeRTOS/tasks.c **** 
 3293              		.loc 1 2914 2 view .LVU921
2914:FreeRTOS/tasks.c **** 
 3294              		.loc 1 2914 11 is_stmt 0 view .LVU922
 3295 0006 04F11805 		add	r5, r4, #24
 3296 000a 2846     		mov	r0, r5
 3297              	.LVL250:
2914:FreeRTOS/tasks.c **** 
 3298              		.loc 1 2914 11 view .LVU923
 3299 000c FFF7FEFF 		bl	uxListRemove
 3300              	.LVL251:
2916:FreeRTOS/tasks.c **** 	{
 3301              		.loc 1 2916 2 is_stmt 1 view .LVU924
2916:FreeRTOS/tasks.c **** 	{
 3302              		.loc 1 2916 27 is_stmt 0 view .LVU925
 3303 0010 134B     		ldr	r3, .L251
 3304 0012 1B68     		ldr	r3, [r3]
2916:FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 162


 3305              		.loc 1 2916 4 view .LVU926
 3306 0014 E3B9     		cbnz	r3, .L246
2918:FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3307              		.loc 1 2918 3 is_stmt 1 view .LVU927
2918:FreeRTOS/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3308              		.loc 1 2918 12 is_stmt 0 view .LVU928
 3309 0016 251D     		adds	r5, r4, #4
 3310 0018 2846     		mov	r0, r5
 3311 001a FFF7FEFF 		bl	uxListRemove
 3312              	.LVL252:
2919:FreeRTOS/tasks.c **** 	}
 3313              		.loc 1 2919 3 is_stmt 1 view .LVU929
2919:FreeRTOS/tasks.c **** 	}
 3314              		.loc 1 2919 3 view .LVU930
 3315 001e E06A     		ldr	r0, [r4, #44]
 3316 0020 0123     		movs	r3, #1
 3317 0022 8340     		lsls	r3, r3, r0
 3318 0024 0F4A     		ldr	r2, .L251+4
 3319 0026 1168     		ldr	r1, [r2]
 3320 0028 0B43     		orrs	r3, r3, r1
 3321 002a 1360     		str	r3, [r2]
2919:FreeRTOS/tasks.c **** 	}
 3322              		.loc 1 2919 3 view .LVU931
 3323 002c 00EB8000 		add	r0, r0, r0, lsl #2
 3324 0030 2946     		mov	r1, r5
 3325 0032 0D4B     		ldr	r3, .L251+8
 3326 0034 03EB8000 		add	r0, r3, r0, lsl #2
 3327 0038 FFF7FEFF 		bl	vListInsertEnd
 3328              	.LVL253:
2919:FreeRTOS/tasks.c **** 	}
 3329              		.loc 1 2919 42 view .LVU932
 3330              	.L247:
2928:FreeRTOS/tasks.c **** 	{
 3331              		.loc 1 2928 2 view .LVU933
2928:FreeRTOS/tasks.c **** 	{
 3332              		.loc 1 2928 20 is_stmt 0 view .LVU934
 3333 003c E26A     		ldr	r2, [r4, #44]
2928:FreeRTOS/tasks.c **** 	{
 3334              		.loc 1 2928 47 view .LVU935
 3335 003e 0B4B     		ldr	r3, .L251+12
 3336 0040 1B68     		ldr	r3, [r3]
 3337 0042 DB6A     		ldr	r3, [r3, #44]
2928:FreeRTOS/tasks.c **** 	{
 3338              		.loc 1 2928 4 view .LVU936
 3339 0044 9A42     		cmp	r2, r3
 3340 0046 08D9     		bls	.L249
2933:FreeRTOS/tasks.c **** 
 3341              		.loc 1 2933 3 is_stmt 1 view .LVU937
 3342              	.LVL254:
2937:FreeRTOS/tasks.c **** 	}
 3343              		.loc 1 2937 3 view .LVU938
2937:FreeRTOS/tasks.c **** 	}
 3344              		.loc 1 2937 17 is_stmt 0 view .LVU939
 3345 0048 0120     		movs	r0, #1
 3346 004a 094B     		ldr	r3, .L251+16
 3347 004c 1860     		str	r0, [r3]
 3348              	.LVL255:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 163


 3349              	.L245:
2959:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3350              		.loc 1 2959 1 view .LVU940
 3351 004e 38BD     		pop	{r3, r4, r5, pc}
 3352              	.LVL256:
 3353              	.L246:
2925:FreeRTOS/tasks.c **** 	}
 3354              		.loc 1 2925 3 is_stmt 1 view .LVU941
 3355 0050 2946     		mov	r1, r5
 3356 0052 0848     		ldr	r0, .L251+20
 3357 0054 FFF7FEFF 		bl	vListInsertEnd
 3358              	.LVL257:
 3359 0058 F0E7     		b	.L247
 3360              	.L249:
2941:FreeRTOS/tasks.c **** 	}
 3361              		.loc 1 2941 11 is_stmt 0 view .LVU942
 3362 005a 0020     		movs	r0, #0
 3363              	.LVL258:
2958:FreeRTOS/tasks.c **** }
 3364              		.loc 1 2958 2 is_stmt 1 view .LVU943
2958:FreeRTOS/tasks.c **** }
 3365              		.loc 1 2958 9 is_stmt 0 view .LVU944
 3366 005c F7E7     		b	.L245
 3367              	.L252:
 3368 005e 00BF     		.align	2
 3369              	.L251:
 3370 0060 00000000 		.word	.LANCHOR16
 3371 0064 00000000 		.word	.LANCHOR13
 3372 0068 00000000 		.word	.LANCHOR4
 3373 006c 00000000 		.word	.LANCHOR10
 3374 0070 00000000 		.word	.LANCHOR20
 3375 0074 00000000 		.word	.LANCHOR1
 3376              		.cfi_endproc
 3377              	.LFE59:
 3379              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3380              		.align	1
 3381              		.global	xTaskRemoveFromUnorderedEventList
 3382              		.syntax unified
 3383              		.thumb
 3384              		.thumb_func
 3386              	xTaskRemoveFromUnorderedEventList:
 3387              	.LVL259:
 3388              	.LFB60:
2963:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 3389              		.loc 1 2963 1 is_stmt 1 view -0
 3390              		.cfi_startproc
 3391              		@ args = 0, pretend = 0, frame = 0
 3392              		@ frame_needed = 0, uses_anonymous_args = 0
2963:FreeRTOS/tasks.c **** TCB_t *pxUnblockedTCB;
 3393              		.loc 1 2963 1 is_stmt 0 view .LVU946
 3394 0000 38B5     		push	{r3, r4, r5, lr}
 3395              	.LCFI31:
 3396              		.cfi_def_cfa_offset 16
 3397              		.cfi_offset 3, -16
 3398              		.cfi_offset 4, -12
 3399              		.cfi_offset 5, -8
 3400              		.cfi_offset 14, -4
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 164


2964:FreeRTOS/tasks.c **** BaseType_t xReturn;
 3401              		.loc 1 2964 1 is_stmt 1 view .LVU947
2965:FreeRTOS/tasks.c **** 
 3402              		.loc 1 2965 1 view .LVU948
2969:FreeRTOS/tasks.c **** 
 3403              		.loc 1 2969 49 view .LVU949
2972:FreeRTOS/tasks.c **** 
 3404              		.loc 1 2972 2 view .LVU950
 3405 0002 41F00041 		orr	r1, r1, #-2147483648
 3406              	.LVL260:
2972:FreeRTOS/tasks.c **** 
 3407              		.loc 1 2972 2 is_stmt 0 view .LVU951
 3408 0006 0160     		str	r1, [r0]
2976:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3409              		.loc 1 2976 2 is_stmt 1 view .LVU952
2976:FreeRTOS/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3410              		.loc 1 2976 17 is_stmt 0 view .LVU953
 3411 0008 C468     		ldr	r4, [r0, #12]
 3412              	.LVL261:
2977:FreeRTOS/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3413              		.loc 1 2977 32 is_stmt 1 view .LVU954
2978:FreeRTOS/tasks.c **** 
 3414              		.loc 1 2978 2 view .LVU955
2978:FreeRTOS/tasks.c **** 
 3415              		.loc 1 2978 11 is_stmt 0 view .LVU956
 3416 000a FFF7FEFF 		bl	uxListRemove
 3417              	.LVL262:
2983:FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3418              		.loc 1 2983 2 is_stmt 1 view .LVU957
2983:FreeRTOS/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3419              		.loc 1 2983 11 is_stmt 0 view .LVU958
 3420 000e 251D     		adds	r5, r4, #4
 3421 0010 2846     		mov	r0, r5
 3422 0012 FFF7FEFF 		bl	uxListRemove
 3423              	.LVL263:
2984:FreeRTOS/tasks.c **** 
 3424              		.loc 1 2984 2 is_stmt 1 view .LVU959
2984:FreeRTOS/tasks.c **** 
 3425              		.loc 1 2984 2 view .LVU960
 3426 0016 E06A     		ldr	r0, [r4, #44]
 3427 0018 0123     		movs	r3, #1
 3428 001a 8340     		lsls	r3, r3, r0
 3429 001c 0B4A     		ldr	r2, .L257
 3430 001e 1168     		ldr	r1, [r2]
 3431 0020 0B43     		orrs	r3, r3, r1
 3432 0022 1360     		str	r3, [r2]
2984:FreeRTOS/tasks.c **** 
 3433              		.loc 1 2984 2 view .LVU961
 3434 0024 00EB8000 		add	r0, r0, r0, lsl #2
 3435 0028 2946     		mov	r1, r5
 3436 002a 094B     		ldr	r3, .L257+4
 3437 002c 03EB8000 		add	r0, r3, r0, lsl #2
 3438 0030 FFF7FEFF 		bl	vListInsertEnd
 3439              	.LVL264:
2984:FreeRTOS/tasks.c **** 
 3440              		.loc 1 2984 41 view .LVU962
2986:FreeRTOS/tasks.c **** 	{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 165


 3441              		.loc 1 2986 2 view .LVU963
2986:FreeRTOS/tasks.c **** 	{
 3442              		.loc 1 2986 20 is_stmt 0 view .LVU964
 3443 0034 E26A     		ldr	r2, [r4, #44]
2986:FreeRTOS/tasks.c **** 	{
 3444              		.loc 1 2986 47 view .LVU965
 3445 0036 074B     		ldr	r3, .L257+8
 3446 0038 1B68     		ldr	r3, [r3]
 3447 003a DB6A     		ldr	r3, [r3, #44]
2986:FreeRTOS/tasks.c **** 	{
 3448              		.loc 1 2986 4 view .LVU966
 3449 003c 9A42     		cmp	r2, r3
 3450 003e 03D9     		bls	.L255
2992:FreeRTOS/tasks.c **** 
 3451              		.loc 1 2992 3 is_stmt 1 view .LVU967
 3452              	.LVL265:
2996:FreeRTOS/tasks.c **** 	}
 3453              		.loc 1 2996 3 view .LVU968
2996:FreeRTOS/tasks.c **** 	}
 3454              		.loc 1 2996 17 is_stmt 0 view .LVU969
 3455 0040 0120     		movs	r0, #1
 3456 0042 054B     		ldr	r3, .L257+12
 3457 0044 1860     		str	r0, [r3]
 3458              	.LVL266:
 3459              	.L253:
3004:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3460              		.loc 1 3004 1 view .LVU970
 3461 0046 38BD     		pop	{r3, r4, r5, pc}
 3462              	.LVL267:
 3463              	.L255:
3000:FreeRTOS/tasks.c **** 	}
 3464              		.loc 1 3000 11 view .LVU971
 3465 0048 0020     		movs	r0, #0
 3466              	.LVL268:
3003:FreeRTOS/tasks.c **** }
 3467              		.loc 1 3003 2 is_stmt 1 view .LVU972
3003:FreeRTOS/tasks.c **** }
 3468              		.loc 1 3003 9 is_stmt 0 view .LVU973
 3469 004a FCE7     		b	.L253
 3470              	.L258:
 3471              		.align	2
 3472              	.L257:
 3473 004c 00000000 		.word	.LANCHOR13
 3474 0050 00000000 		.word	.LANCHOR4
 3475 0054 00000000 		.word	.LANCHOR10
 3476 0058 00000000 		.word	.LANCHOR20
 3477              		.cfi_endproc
 3478              	.LFE60:
 3480              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3481              		.align	1
 3482              		.global	vTaskSetTimeOutState
 3483              		.syntax unified
 3484              		.thumb
 3485              		.thumb_func
 3487              	vTaskSetTimeOutState:
 3488              	.LVL269:
 3489              	.LFB61:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 166


3008:FreeRTOS/tasks.c **** 	configASSERT( pxTimeOut );
 3490              		.loc 1 3008 1 is_stmt 1 view -0
 3491              		.cfi_startproc
 3492              		@ args = 0, pretend = 0, frame = 0
 3493              		@ frame_needed = 0, uses_anonymous_args = 0
 3494              		@ link register save eliminated.
3009:FreeRTOS/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3495              		.loc 1 3009 27 view .LVU975
3010:FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3496              		.loc 1 3010 2 view .LVU976
3010:FreeRTOS/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3497              		.loc 1 3010 28 is_stmt 0 view .LVU977
 3498 0000 034B     		ldr	r3, .L260
 3499 0002 1B68     		ldr	r3, [r3]
 3500 0004 0360     		str	r3, [r0]
3011:FreeRTOS/tasks.c **** }
 3501              		.loc 1 3011 2 is_stmt 1 view .LVU978
3011:FreeRTOS/tasks.c **** }
 3502              		.loc 1 3011 29 is_stmt 0 view .LVU979
 3503 0006 034B     		ldr	r3, .L260+4
 3504 0008 1B68     		ldr	r3, [r3]
 3505 000a 4360     		str	r3, [r0, #4]
3012:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3506              		.loc 1 3012 1 view .LVU980
 3507 000c 7047     		bx	lr
 3508              	.L261:
 3509 000e 00BF     		.align	2
 3510              	.L260:
 3511 0010 00000000 		.word	.LANCHOR18
 3512 0014 00000000 		.word	.LANCHOR14
 3513              		.cfi_endproc
 3514              	.LFE61:
 3516              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3517              		.align	1
 3518              		.global	xTaskCheckForTimeOut
 3519              		.syntax unified
 3520              		.thumb
 3521              		.thumb_func
 3523              	xTaskCheckForTimeOut:
 3524              	.LVL270:
 3525              	.LFB62:
3016:FreeRTOS/tasks.c **** BaseType_t xReturn;
 3526              		.loc 1 3016 1 is_stmt 1 view -0
 3527              		.cfi_startproc
 3528              		@ args = 0, pretend = 0, frame = 0
 3529              		@ frame_needed = 0, uses_anonymous_args = 0
3016:FreeRTOS/tasks.c **** BaseType_t xReturn;
 3530              		.loc 1 3016 1 is_stmt 0 view .LVU982
 3531 0000 38B5     		push	{r3, r4, r5, lr}
 3532              	.LCFI32:
 3533              		.cfi_def_cfa_offset 16
 3534              		.cfi_offset 3, -16
 3535              		.cfi_offset 4, -12
 3536              		.cfi_offset 5, -8
 3537              		.cfi_offset 14, -4
 3538 0002 0446     		mov	r4, r0
 3539 0004 0D46     		mov	r5, r1
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 167


3017:FreeRTOS/tasks.c **** 
 3540              		.loc 1 3017 1 is_stmt 1 view .LVU983
3019:FreeRTOS/tasks.c **** 	configASSERT( pxTicksToWait );
 3541              		.loc 1 3019 27 view .LVU984
3020:FreeRTOS/tasks.c **** 
 3542              		.loc 1 3020 31 view .LVU985
3022:FreeRTOS/tasks.c **** 	{
 3543              		.loc 1 3022 2 view .LVU986
 3544 0006 FFF7FEFF 		bl	vPortEnterCritical
 3545              	.LVL271:
 3546              	.LBB58:
3025:FreeRTOS/tasks.c **** 
 3547              		.loc 1 3025 3 view .LVU987
3025:FreeRTOS/tasks.c **** 
 3548              		.loc 1 3025 20 is_stmt 0 view .LVU988
 3549 000a 114B     		ldr	r3, .L270
 3550 000c 1A68     		ldr	r2, [r3]
 3551              	.LVL272:
3039:FreeRTOS/tasks.c **** 			{
 3552              		.loc 1 3039 4 is_stmt 1 view .LVU989
3039:FreeRTOS/tasks.c **** 			{
 3553              		.loc 1 3039 8 is_stmt 0 view .LVU990
 3554 000e 2B68     		ldr	r3, [r5]
3039:FreeRTOS/tasks.c **** 			{
 3555              		.loc 1 3039 6 view .LVU991
 3556 0010 B3F1FF3F 		cmp	r3, #-1
 3557 0014 15D0     		beq	.L265
3049:FreeRTOS/tasks.c **** 		{
 3558              		.loc 1 3049 3 is_stmt 1 view .LVU992
3049:FreeRTOS/tasks.c **** 		{
 3559              		.loc 1 3049 37 is_stmt 0 view .LVU993
 3560 0016 2068     		ldr	r0, [r4]
3049:FreeRTOS/tasks.c **** 		{
 3561              		.loc 1 3049 25 view .LVU994
 3562 0018 0E49     		ldr	r1, .L270+4
 3563 001a 0968     		ldr	r1, [r1]
3049:FreeRTOS/tasks.c **** 		{
 3564              		.loc 1 3049 5 view .LVU995
 3565 001c 8842     		cmp	r0, r1
 3566 001e 02D0     		beq	.L264
3049:FreeRTOS/tasks.c **** 		{
 3567              		.loc 1 3049 89 discriminator 1 view .LVU996
 3568 0020 6168     		ldr	r1, [r4, #4]
3049:FreeRTOS/tasks.c **** 		{
 3569              		.loc 1 3049 56 discriminator 1 view .LVU997
 3570 0022 9142     		cmp	r1, r2
 3571 0024 12D9     		bls	.L266
 3572              	.L264:
3058:FreeRTOS/tasks.c **** 		{
 3573              		.loc 1 3058 8 is_stmt 1 view .LVU998
3058:FreeRTOS/tasks.c **** 		{
 3574              		.loc 1 3058 58 is_stmt 0 view .LVU999
 3575 0026 6168     		ldr	r1, [r4, #4]
3058:FreeRTOS/tasks.c **** 		{
 3576              		.loc 1 3058 14 view .LVU1000
 3577 0028 501A     		subs	r0, r2, r1
3058:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 168


 3578              		.loc 1 3058 10 view .LVU1001
 3579 002a 8342     		cmp	r3, r0
 3580 002c 01D8     		bhi	.L269
3067:FreeRTOS/tasks.c **** 		}
 3581              		.loc 1 3067 12 view .LVU1002
 3582 002e 0124     		movs	r4, #1
 3583              	.LVL273:
3067:FreeRTOS/tasks.c **** 		}
 3584              		.loc 1 3067 12 view .LVU1003
 3585 0030 08E0     		b	.L263
 3586              	.LVL274:
 3587              	.L269:
3061:FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3588              		.loc 1 3061 4 is_stmt 1 view .LVU1004
3061:FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3589              		.loc 1 3061 19 is_stmt 0 view .LVU1005
 3590 0032 8A1A     		subs	r2, r1, r2
 3591              	.LVL275:
3061:FreeRTOS/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3592              		.loc 1 3061 19 view .LVU1006
 3593 0034 1344     		add	r3, r3, r2
 3594 0036 2B60     		str	r3, [r5]
3062:FreeRTOS/tasks.c **** 			xReturn = pdFALSE;
 3595              		.loc 1 3062 4 is_stmt 1 view .LVU1007
 3596 0038 2046     		mov	r0, r4
 3597 003a FFF7FEFF 		bl	vTaskSetTimeOutState
 3598              	.LVL276:
3063:FreeRTOS/tasks.c **** 		}
 3599              		.loc 1 3063 4 view .LVU1008
3063:FreeRTOS/tasks.c **** 		}
 3600              		.loc 1 3063 12 is_stmt 0 view .LVU1009
 3601 003e 0024     		movs	r4, #0
 3602              	.LVL277:
3063:FreeRTOS/tasks.c **** 		}
 3603              		.loc 1 3063 12 view .LVU1010
 3604 0040 00E0     		b	.L263
 3605              	.LVL278:
 3606              	.L265:
3044:FreeRTOS/tasks.c **** 			}
 3607              		.loc 1 3044 13 view .LVU1011
 3608 0042 0024     		movs	r4, #0
 3609              	.LVL279:
 3610              	.L263:
3044:FreeRTOS/tasks.c **** 			}
 3611              		.loc 1 3044 13 view .LVU1012
 3612              	.LBE58:
3070:FreeRTOS/tasks.c **** 
 3613              		.loc 1 3070 2 is_stmt 1 view .LVU1013
 3614 0044 FFF7FEFF 		bl	vPortExitCritical
 3615              	.LVL280:
3072:FreeRTOS/tasks.c **** }
 3616              		.loc 1 3072 2 view .LVU1014
3073:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3617              		.loc 1 3073 1 is_stmt 0 view .LVU1015
 3618 0048 2046     		mov	r0, r4
 3619 004a 38BD     		pop	{r3, r4, r5, pc}
 3620              	.LVL281:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 169


 3621              	.L266:
 3622              	.LBB59:
3056:FreeRTOS/tasks.c **** 		}
 3623              		.loc 1 3056 12 view .LVU1016
 3624 004c 0124     		movs	r4, #1
 3625              	.LVL282:
3056:FreeRTOS/tasks.c **** 		}
 3626              		.loc 1 3056 12 view .LVU1017
 3627 004e F9E7     		b	.L263
 3628              	.L271:
 3629              		.align	2
 3630              	.L270:
 3631 0050 00000000 		.word	.LANCHOR14
 3632 0054 00000000 		.word	.LANCHOR18
 3633              	.LBE59:
 3634              		.cfi_endproc
 3635              	.LFE62:
 3637              		.section	.text.vTaskMissedYield,"ax",%progbits
 3638              		.align	1
 3639              		.global	vTaskMissedYield
 3640              		.syntax unified
 3641              		.thumb
 3642              		.thumb_func
 3644              	vTaskMissedYield:
 3645              	.LFB63:
3077:FreeRTOS/tasks.c **** 	xYieldPending = pdTRUE;
 3646              		.loc 1 3077 1 is_stmt 1 view -0
 3647              		.cfi_startproc
 3648              		@ args = 0, pretend = 0, frame = 0
 3649              		@ frame_needed = 0, uses_anonymous_args = 0
 3650              		@ link register save eliminated.
3078:FreeRTOS/tasks.c **** }
 3651              		.loc 1 3078 2 view .LVU1019
3078:FreeRTOS/tasks.c **** }
 3652              		.loc 1 3078 16 is_stmt 0 view .LVU1020
 3653 0000 014B     		ldr	r3, .L273
 3654 0002 0122     		movs	r2, #1
 3655 0004 1A60     		str	r2, [r3]
3079:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 3656              		.loc 1 3079 1 view .LVU1021
 3657 0006 7047     		bx	lr
 3658              	.L274:
 3659              		.align	2
 3660              	.L273:
 3661 0008 00000000 		.word	.LANCHOR20
 3662              		.cfi_endproc
 3663              	.LFE63:
 3665              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3666              		.align	1
 3667              		.global	xTaskGetCurrentTaskHandle
 3668              		.syntax unified
 3669              		.thumb
 3670              		.thumb_func
 3672              	xTaskGetCurrentTaskHandle:
 3673              	.LFB69:
3662:FreeRTOS/tasks.c **** 	TaskHandle_t xReturn;
 3674              		.loc 1 3662 2 is_stmt 1 view -0
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 170


 3675              		.cfi_startproc
 3676              		@ args = 0, pretend = 0, frame = 0
 3677              		@ frame_needed = 0, uses_anonymous_args = 0
 3678              		@ link register save eliminated.
3663:FreeRTOS/tasks.c **** 
 3679              		.loc 1 3663 2 view .LVU1023
3668:FreeRTOS/tasks.c **** 
 3680              		.loc 1 3668 3 view .LVU1024
3668:FreeRTOS/tasks.c **** 
 3681              		.loc 1 3668 11 is_stmt 0 view .LVU1025
 3682 0000 014B     		ldr	r3, .L276
 3683 0002 1868     		ldr	r0, [r3]
 3684              	.LVL283:
3670:FreeRTOS/tasks.c **** 	}
 3685              		.loc 1 3670 3 is_stmt 1 view .LVU1026
3671:FreeRTOS/tasks.c **** 
 3686              		.loc 1 3671 2 is_stmt 0 view .LVU1027
 3687 0004 7047     		bx	lr
 3688              	.L277:
 3689 0006 00BF     		.align	2
 3690              	.L276:
 3691 0008 00000000 		.word	.LANCHOR10
 3692              		.cfi_endproc
 3693              	.LFE69:
 3695              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3696              		.align	1
 3697              		.global	vTaskPriorityInherit
 3698              		.syntax unified
 3699              		.thumb
 3700              		.thumb_func
 3702              	vTaskPriorityInherit:
 3703              	.LVL284:
 3704              	.LFB70:
3707:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3705              		.loc 1 3707 2 is_stmt 1 view -0
 3706              		.cfi_startproc
 3707              		@ args = 0, pretend = 0, frame = 0
 3708              		@ frame_needed = 0, uses_anonymous_args = 0
3708:FreeRTOS/tasks.c **** 
 3709              		.loc 1 3708 2 view .LVU1029
3712:FreeRTOS/tasks.c **** 		{
 3710              		.loc 1 3712 3 view .LVU1030
3712:FreeRTOS/tasks.c **** 		{
 3711              		.loc 1 3712 5 is_stmt 0 view .LVU1031
 3712 0000 0028     		cmp	r0, #0
 3713 0002 45D0     		beq	.L285
3707:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3714              		.loc 1 3707 2 view .LVU1032
 3715 0004 38B5     		push	{r3, r4, r5, lr}
 3716              	.LCFI33:
 3717              		.cfi_def_cfa_offset 16
 3718              		.cfi_offset 3, -16
 3719              		.cfi_offset 4, -12
 3720              		.cfi_offset 5, -8
 3721              		.cfi_offset 14, -4
 3722 0006 0446     		mov	r4, r0
3717:FreeRTOS/tasks.c **** 			{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 171


 3723              		.loc 1 3717 4 is_stmt 1 view .LVU1033
3717:FreeRTOS/tasks.c **** 			{
 3724              		.loc 1 3717 13 is_stmt 0 view .LVU1034
 3725 0008 C36A     		ldr	r3, [r0, #44]
3717:FreeRTOS/tasks.c **** 			{
 3726              		.loc 1 3717 40 view .LVU1035
 3727 000a 224A     		ldr	r2, .L289
 3728 000c 1268     		ldr	r2, [r2]
 3729 000e D26A     		ldr	r2, [r2, #44]
3717:FreeRTOS/tasks.c **** 			{
 3730              		.loc 1 3717 6 view .LVU1036
 3731 0010 9342     		cmp	r3, r2
 3732 0012 14D2     		bcs	.L278
3722:FreeRTOS/tasks.c **** 				{
 3733              		.loc 1 3722 5 is_stmt 1 view .LVU1037
3722:FreeRTOS/tasks.c **** 				{
 3734              		.loc 1 3722 11 is_stmt 0 view .LVU1038
 3735 0014 8269     		ldr	r2, [r0, #24]
3722:FreeRTOS/tasks.c **** 				{
 3736              		.loc 1 3722 7 view .LVU1039
 3737 0016 002A     		cmp	r2, #0
 3738 0018 05DB     		blt	.L280
3724:FreeRTOS/tasks.c **** 				}
 3739              		.loc 1 3724 6 is_stmt 1 view .LVU1040
 3740 001a 1E4A     		ldr	r2, .L289
 3741 001c 1268     		ldr	r2, [r2]
 3742 001e D26A     		ldr	r2, [r2, #44]
 3743 0020 C2F10502 		rsb	r2, r2, #5
 3744 0024 8261     		str	r2, [r0, #24]
 3745              	.L280:
3728:FreeRTOS/tasks.c **** 				}
 3746              		.loc 1 3728 30 view .LVU1041
3733:FreeRTOS/tasks.c **** 				{
 3747              		.loc 1 3733 5 view .LVU1042
3733:FreeRTOS/tasks.c **** 				{
 3748              		.loc 1 3733 9 is_stmt 0 view .LVU1043
 3749 0026 6169     		ldr	r1, [r4, #20]
 3750 0028 03EB8303 		add	r3, r3, r3, lsl #2
 3751 002c 1A4A     		ldr	r2, .L289+4
 3752 002e 02EB8303 		add	r3, r2, r3, lsl #2
3733:FreeRTOS/tasks.c **** 				{
 3753              		.loc 1 3733 108 view .LVU1044
 3754 0032 9942     		cmp	r1, r3
 3755 0034 04D0     		beq	.L288
3751:FreeRTOS/tasks.c **** 				}
 3756              		.loc 1 3751 6 is_stmt 1 view .LVU1045
3751:FreeRTOS/tasks.c **** 				}
 3757              		.loc 1 3751 38 is_stmt 0 view .LVU1046
 3758 0036 174B     		ldr	r3, .L289
 3759 0038 1B68     		ldr	r3, [r3]
 3760 003a DB6A     		ldr	r3, [r3, #44]
3751:FreeRTOS/tasks.c **** 				}
 3761              		.loc 1 3751 24 view .LVU1047
 3762 003c E362     		str	r3, [r4, #44]
 3763              	.LVL285:
 3764              	.L278:
3765:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 172


 3765              		.loc 1 3765 2 view .LVU1048
 3766 003e 38BD     		pop	{r3, r4, r5, pc}
 3767              	.LVL286:
 3768              	.L288:
3735:FreeRTOS/tasks.c **** 					{
 3769              		.loc 1 3735 6 is_stmt 1 view .LVU1049
3735:FreeRTOS/tasks.c **** 					{
 3770              		.loc 1 3735 10 is_stmt 0 view .LVU1050
 3771 0040 251D     		adds	r5, r4, #4
 3772 0042 2846     		mov	r0, r5
 3773              	.LVL287:
3735:FreeRTOS/tasks.c **** 					{
 3774              		.loc 1 3735 10 view .LVU1051
 3775 0044 FFF7FEFF 		bl	uxListRemove
 3776              	.LVL288:
3735:FreeRTOS/tasks.c **** 					{
 3777              		.loc 1 3735 8 view .LVU1052
 3778 0048 90B1     		cbz	r0, .L282
 3779              	.L283:
3741:FreeRTOS/tasks.c **** 					}
 3780              		.loc 1 3741 31 is_stmt 1 view .LVU1053
3745:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3781              		.loc 1 3745 6 view .LVU1054
3745:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3782              		.loc 1 3745 38 is_stmt 0 view .LVU1055
 3783 004a 124B     		ldr	r3, .L289
 3784 004c 1B68     		ldr	r3, [r3]
 3785 004e D86A     		ldr	r0, [r3, #44]
3745:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3786              		.loc 1 3745 24 view .LVU1056
 3787 0050 E062     		str	r0, [r4, #44]
3746:FreeRTOS/tasks.c **** 				}
 3788              		.loc 1 3746 6 is_stmt 1 view .LVU1057
3746:FreeRTOS/tasks.c **** 				}
 3789              		.loc 1 3746 6 view .LVU1058
 3790 0052 0123     		movs	r3, #1
 3791 0054 8340     		lsls	r3, r3, r0
 3792 0056 114A     		ldr	r2, .L289+8
 3793 0058 1168     		ldr	r1, [r2]
 3794 005a 0B43     		orrs	r3, r3, r1
 3795 005c 1360     		str	r3, [r2]
3746:FreeRTOS/tasks.c **** 				}
 3796              		.loc 1 3746 6 view .LVU1059
 3797 005e 00EB8000 		add	r0, r0, r0, lsl #2
 3798 0062 2946     		mov	r1, r5
 3799 0064 0C4B     		ldr	r3, .L289+4
 3800 0066 03EB8000 		add	r0, r3, r0, lsl #2
 3801 006a FFF7FEFF 		bl	vListInsertEnd
 3802              	.LVL289:
3746:FreeRTOS/tasks.c **** 				}
 3803              		.loc 1 3746 36 view .LVU1060
3763:FreeRTOS/tasks.c **** 		}
 3804              		.loc 1 3763 28 view .LVU1061
3765:FreeRTOS/tasks.c **** 
 3805              		.loc 1 3765 2 is_stmt 0 view .LVU1062
 3806 006e E6E7     		b	.L278
 3807              	.L282:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 173


3737:FreeRTOS/tasks.c **** 					}
 3808              		.loc 1 3737 7 is_stmt 1 view .LVU1063
 3809 0070 E36A     		ldr	r3, [r4, #44]
 3810 0072 03EB8301 		add	r1, r3, r3, lsl #2
 3811 0076 084A     		ldr	r2, .L289+4
 3812 0078 52F82120 		ldr	r2, [r2, r1, lsl #2]
 3813 007c 002A     		cmp	r2, #0
 3814 007e E4D1     		bne	.L283
3737:FreeRTOS/tasks.c **** 					}
 3815              		.loc 1 3737 7 discriminator 1 view .LVU1064
 3816 0080 0122     		movs	r2, #1
 3817 0082 9A40     		lsls	r2, r2, r3
 3818 0084 0549     		ldr	r1, .L289+8
 3819 0086 0B68     		ldr	r3, [r1]
 3820 0088 23EA0203 		bic	r3, r3, r2
 3821 008c 0B60     		str	r3, [r1]
 3822 008e DCE7     		b	.L283
 3823              	.LVL290:
 3824              	.L285:
 3825              	.LCFI34:
 3826              		.cfi_def_cfa_offset 0
 3827              		.cfi_restore 3
 3828              		.cfi_restore 4
 3829              		.cfi_restore 5
 3830              		.cfi_restore 14
3737:FreeRTOS/tasks.c **** 					}
 3831              		.loc 1 3737 7 is_stmt 0 discriminator 1 view .LVU1065
 3832 0090 7047     		bx	lr
 3833              	.L290:
 3834 0092 00BF     		.align	2
 3835              	.L289:
 3836 0094 00000000 		.word	.LANCHOR10
 3837 0098 00000000 		.word	.LANCHOR4
 3838 009c 00000000 		.word	.LANCHOR13
 3839              		.cfi_endproc
 3840              	.LFE70:
 3842              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3843              		.align	1
 3844              		.global	xTaskPriorityDisinherit
 3845              		.syntax unified
 3846              		.thumb
 3847              		.thumb_func
 3849              	xTaskPriorityDisinherit:
 3850              	.LVL291:
 3851              	.LFB71:
3773:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3852              		.loc 1 3773 2 is_stmt 1 view -0
 3853              		.cfi_startproc
 3854              		@ args = 0, pretend = 0, frame = 0
 3855              		@ frame_needed = 0, uses_anonymous_args = 0
3774:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 3856              		.loc 1 3774 2 view .LVU1067
3775:FreeRTOS/tasks.c **** 
 3857              		.loc 1 3775 2 view .LVU1068
3777:FreeRTOS/tasks.c **** 		{
 3858              		.loc 1 3777 3 view .LVU1069
3777:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 174


 3859              		.loc 1 3777 5 is_stmt 0 view .LVU1070
 3860 0000 0028     		cmp	r0, #0
 3861 0002 34D0     		beq	.L294
3773:FreeRTOS/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3862              		.loc 1 3773 2 view .LVU1071
 3863 0004 38B5     		push	{r3, r4, r5, lr}
 3864              	.LCFI35:
 3865              		.cfi_def_cfa_offset 16
 3866              		.cfi_offset 3, -16
 3867              		.cfi_offset 4, -12
 3868              		.cfi_offset 5, -8
 3869              		.cfi_offset 14, -4
 3870 0006 0446     		mov	r4, r0
3783:FreeRTOS/tasks.c **** 
 3871              		.loc 1 3783 41 is_stmt 1 view .LVU1072
3785:FreeRTOS/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3872              		.loc 1 3785 40 view .LVU1073
3786:FreeRTOS/tasks.c **** 
 3873              		.loc 1 3786 4 view .LVU1074
3786:FreeRTOS/tasks.c **** 
 3874              		.loc 1 3786 11 is_stmt 0 view .LVU1075
 3875 0008 836C     		ldr	r3, [r0, #72]
3786:FreeRTOS/tasks.c **** 
 3876              		.loc 1 3786 28 view .LVU1076
 3877 000a 013B     		subs	r3, r3, #1
 3878 000c 8364     		str	r3, [r0, #72]
3790:FreeRTOS/tasks.c **** 			{
 3879              		.loc 1 3790 4 is_stmt 1 view .LVU1077
3790:FreeRTOS/tasks.c **** 			{
 3880              		.loc 1 3790 13 is_stmt 0 view .LVU1078
 3881 000e C16A     		ldr	r1, [r0, #44]
3790:FreeRTOS/tasks.c **** 			{
 3882              		.loc 1 3790 34 view .LVU1079
 3883 0010 426C     		ldr	r2, [r0, #68]
3790:FreeRTOS/tasks.c **** 			{
 3884              		.loc 1 3790 6 view .LVU1080
 3885 0012 9142     		cmp	r1, r2
 3886 0014 2DD0     		beq	.L295
3793:FreeRTOS/tasks.c **** 				{
 3887              		.loc 1 3793 5 is_stmt 1 view .LVU1081
3793:FreeRTOS/tasks.c **** 				{
 3888              		.loc 1 3793 7 is_stmt 0 view .LVU1082
 3889 0016 0BB1     		cbz	r3, .L301
3775:FreeRTOS/tasks.c **** 
 3890              		.loc 1 3775 13 view .LVU1083
 3891 0018 0020     		movs	r0, #0
 3892              	.LVL292:
3842:FreeRTOS/tasks.c **** 		}
 3893              		.loc 1 3842 28 is_stmt 1 view .LVU1084
3845:FreeRTOS/tasks.c **** 	}
 3894              		.loc 1 3845 3 view .LVU1085
 3895              	.L291:
3846:FreeRTOS/tasks.c **** 
 3896              		.loc 1 3846 2 is_stmt 0 view .LVU1086
 3897 001a 38BD     		pop	{r3, r4, r5, pc}
 3898              	.LVL293:
 3899              	.L301:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 175


3800:FreeRTOS/tasks.c **** 					{
 3900              		.loc 1 3800 6 is_stmt 1 view .LVU1087
3800:FreeRTOS/tasks.c **** 					{
 3901              		.loc 1 3800 10 is_stmt 0 view .LVU1088
 3902 001c 051D     		adds	r5, r0, #4
 3903 001e 2846     		mov	r0, r5
 3904              	.LVL294:
3800:FreeRTOS/tasks.c **** 					{
 3905              		.loc 1 3800 10 view .LVU1089
 3906 0020 FFF7FEFF 		bl	uxListRemove
 3907              	.LVL295:
3800:FreeRTOS/tasks.c **** 					{
 3908              		.loc 1 3800 8 view .LVU1090
 3909 0024 68B9     		cbnz	r0, .L293
3802:FreeRTOS/tasks.c **** 					}
 3910              		.loc 1 3802 7 is_stmt 1 view .LVU1091
 3911 0026 E36A     		ldr	r3, [r4, #44]
 3912 0028 03EB8301 		add	r1, r3, r3, lsl #2
 3913 002c 124A     		ldr	r2, .L302
 3914 002e 52F82120 		ldr	r2, [r2, r1, lsl #2]
 3915 0032 32B9     		cbnz	r2, .L293
3802:FreeRTOS/tasks.c **** 					}
 3916              		.loc 1 3802 7 discriminator 1 view .LVU1092
 3917 0034 0122     		movs	r2, #1
 3918 0036 9A40     		lsls	r2, r2, r3
 3919 0038 1049     		ldr	r1, .L302+4
 3920 003a 0B68     		ldr	r3, [r1]
 3921 003c 23EA0203 		bic	r3, r3, r2
 3922 0040 0B60     		str	r3, [r1]
 3923              	.L293:
3806:FreeRTOS/tasks.c **** 					}
 3924              		.loc 1 3806 31 view .LVU1093
3811:FreeRTOS/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 3925              		.loc 1 3811 67 view .LVU1094
3812:FreeRTOS/tasks.c **** 
 3926              		.loc 1 3812 6 view .LVU1095
3812:FreeRTOS/tasks.c **** 
 3927              		.loc 1 3812 31 is_stmt 0 view .LVU1096
 3928 0042 606C     		ldr	r0, [r4, #68]
3812:FreeRTOS/tasks.c **** 
 3929              		.loc 1 3812 24 view .LVU1097
 3930 0044 E062     		str	r0, [r4, #44]
3817:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3931              		.loc 1 3817 6 is_stmt 1 view .LVU1098
 3932 0046 C0F10503 		rsb	r3, r0, #5
 3933 004a A361     		str	r3, [r4, #24]
3818:FreeRTOS/tasks.c **** 
 3934              		.loc 1 3818 6 view .LVU1099
3818:FreeRTOS/tasks.c **** 
 3935              		.loc 1 3818 6 view .LVU1100
 3936 004c 0124     		movs	r4, #1
 3937              	.LVL296:
3818:FreeRTOS/tasks.c **** 
 3938              		.loc 1 3818 6 is_stmt 0 view .LVU1101
 3939 004e 04FA00F3 		lsl	r3, r4, r0
 3940 0052 0A4A     		ldr	r2, .L302+4
 3941 0054 1168     		ldr	r1, [r2]
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 176


 3942 0056 0B43     		orrs	r3, r3, r1
 3943 0058 1360     		str	r3, [r2]
3818:FreeRTOS/tasks.c **** 
 3944              		.loc 1 3818 6 is_stmt 1 view .LVU1102
 3945 005a 00EB8000 		add	r0, r0, r0, lsl #2
 3946 005e 2946     		mov	r1, r5
 3947 0060 054B     		ldr	r3, .L302
 3948 0062 03EB8000 		add	r0, r3, r0, lsl #2
 3949 0066 FFF7FEFF 		bl	vListInsertEnd
 3950              	.LVL297:
3818:FreeRTOS/tasks.c **** 
 3951              		.loc 1 3818 36 view .LVU1103
3828:FreeRTOS/tasks.c **** 				}
 3952              		.loc 1 3828 6 view .LVU1104
3828:FreeRTOS/tasks.c **** 				}
 3953              		.loc 1 3828 14 is_stmt 0 view .LVU1105
 3954 006a 2046     		mov	r0, r4
 3955 006c D5E7     		b	.L291
 3956              	.LVL298:
 3957              	.L294:
 3958              	.LCFI36:
 3959              		.cfi_def_cfa_offset 0
 3960              		.cfi_restore 3
 3961              		.cfi_restore 4
 3962              		.cfi_restore 5
 3963              		.cfi_restore 14
3775:FreeRTOS/tasks.c **** 
 3964              		.loc 1 3775 13 view .LVU1106
 3965 006e 0020     		movs	r0, #0
 3966              	.LVL299:
3846:FreeRTOS/tasks.c **** 
 3967              		.loc 1 3846 2 view .LVU1107
 3968 0070 7047     		bx	lr
 3969              	.LVL300:
 3970              	.L295:
 3971              	.LCFI37:
 3972              		.cfi_def_cfa_offset 16
 3973              		.cfi_offset 3, -16
 3974              		.cfi_offset 4, -12
 3975              		.cfi_offset 5, -8
 3976              		.cfi_offset 14, -4
3775:FreeRTOS/tasks.c **** 
 3977              		.loc 1 3775 13 view .LVU1108
 3978 0072 0020     		movs	r0, #0
 3979              	.LVL301:
3775:FreeRTOS/tasks.c **** 
 3980              		.loc 1 3775 13 view .LVU1109
 3981 0074 D1E7     		b	.L291
 3982              	.L303:
 3983 0076 00BF     		.align	2
 3984              	.L302:
 3985 0078 00000000 		.word	.LANCHOR4
 3986 007c 00000000 		.word	.LANCHOR13
 3987              		.cfi_endproc
 3988              	.LFE71:
 3990              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3991              		.align	1
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 177


 3992              		.global	uxTaskResetEventItemValue
 3993              		.syntax unified
 3994              		.thumb
 3995              		.thumb_func
 3997              	uxTaskResetEventItemValue:
 3998              	.LFB72:
4163:FreeRTOS/tasks.c **** TickType_t uxReturn;
 3999              		.loc 1 4163 1 is_stmt 1 view -0
 4000              		.cfi_startproc
 4001              		@ args = 0, pretend = 0, frame = 0
 4002              		@ frame_needed = 0, uses_anonymous_args = 0
 4003              		@ link register save eliminated.
4164:FreeRTOS/tasks.c **** 
 4004              		.loc 1 4164 1 view .LVU1111
4166:FreeRTOS/tasks.c **** 
 4005              		.loc 1 4166 2 view .LVU1112
4166:FreeRTOS/tasks.c **** 
 4006              		.loc 1 4166 13 is_stmt 0 view .LVU1113
 4007 0000 044A     		ldr	r2, .L305
 4008 0002 1368     		ldr	r3, [r2]
4166:FreeRTOS/tasks.c **** 
 4009              		.loc 1 4166 11 view .LVU1114
 4010 0004 9869     		ldr	r0, [r3, #24]
 4011              	.LVL302:
4170:FreeRTOS/tasks.c **** 
 4012              		.loc 1 4170 2 is_stmt 1 view .LVU1115
 4013 0006 1368     		ldr	r3, [r2]
 4014 0008 DB6A     		ldr	r3, [r3, #44]
 4015 000a 1268     		ldr	r2, [r2]
 4016 000c C3F10503 		rsb	r3, r3, #5
 4017 0010 9361     		str	r3, [r2, #24]
4172:FreeRTOS/tasks.c **** }
 4018              		.loc 1 4172 2 view .LVU1116
4173:FreeRTOS/tasks.c **** /*-----------------------------------------------------------*/
 4019              		.loc 1 4173 1 is_stmt 0 view .LVU1117
 4020 0012 7047     		bx	lr
 4021              	.L306:
 4022              		.align	2
 4023              	.L305:
 4024 0014 00000000 		.word	.LANCHOR10
 4025              		.cfi_endproc
 4026              	.LFE72:
 4028              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4029              		.align	1
 4030              		.global	pvTaskIncrementMutexHeldCount
 4031              		.syntax unified
 4032              		.thumb
 4033              		.thumb_func
 4035              	pvTaskIncrementMutexHeldCount:
 4036              	.LFB73:
4179:FreeRTOS/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4037              		.loc 1 4179 2 is_stmt 1 view -0
 4038              		.cfi_startproc
 4039              		@ args = 0, pretend = 0, frame = 0
 4040              		@ frame_needed = 0, uses_anonymous_args = 0
 4041              		@ link register save eliminated.
4182:FreeRTOS/tasks.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 178


 4042              		.loc 1 4182 3 view .LVU1119
4182:FreeRTOS/tasks.c **** 		{
 4043              		.loc 1 4182 20 is_stmt 0 view .LVU1120
 4044 0000 054B     		ldr	r3, .L309
 4045 0002 1B68     		ldr	r3, [r3]
4182:FreeRTOS/tasks.c **** 		{
 4046              		.loc 1 4182 5 view .LVU1121
 4047 0004 23B1     		cbz	r3, .L308
4184:FreeRTOS/tasks.c **** 		}
 4048              		.loc 1 4184 4 is_stmt 1 view .LVU1122
4184:FreeRTOS/tasks.c **** 		}
 4049              		.loc 1 4184 18 is_stmt 0 view .LVU1123
 4050 0006 044B     		ldr	r3, .L309
 4051 0008 1A68     		ldr	r2, [r3]
 4052 000a 936C     		ldr	r3, [r2, #72]
4184:FreeRTOS/tasks.c **** 		}
 4053              		.loc 1 4184 35 view .LVU1124
 4054 000c 0133     		adds	r3, r3, #1
 4055 000e 9364     		str	r3, [r2, #72]
 4056              	.L308:
4187:FreeRTOS/tasks.c **** 	}
 4057              		.loc 1 4187 3 is_stmt 1 view .LVU1125
4187:FreeRTOS/tasks.c **** 	}
 4058              		.loc 1 4187 10 is_stmt 0 view .LVU1126
 4059 0010 014B     		ldr	r3, .L309
 4060 0012 1868     		ldr	r0, [r3]
4188:FreeRTOS/tasks.c **** 
 4061              		.loc 1 4188 2 view .LVU1127
 4062 0014 7047     		bx	lr
 4063              	.L310:
 4064 0016 00BF     		.align	2
 4065              	.L309:
 4066 0018 00000000 		.word	.LANCHOR10
 4067              		.cfi_endproc
 4068              	.LFE73:
 4070              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4071              		.align	1
 4072              		.global	ulTaskNotifyTake
 4073              		.syntax unified
 4074              		.thumb
 4075              		.thumb_func
 4077              	ulTaskNotifyTake:
 4078              	.LVL303:
 4079              	.LFB74:
4196:FreeRTOS/tasks.c **** 	uint32_t ulReturn;
 4080              		.loc 1 4196 2 is_stmt 1 view -0
 4081              		.cfi_startproc
 4082              		@ args = 0, pretend = 0, frame = 0
 4083              		@ frame_needed = 0, uses_anonymous_args = 0
4196:FreeRTOS/tasks.c **** 	uint32_t ulReturn;
 4084              		.loc 1 4196 2 is_stmt 0 view .LVU1129
 4085 0000 38B5     		push	{r3, r4, r5, lr}
 4086              	.LCFI38:
 4087              		.cfi_def_cfa_offset 16
 4088              		.cfi_offset 3, -16
 4089              		.cfi_offset 4, -12
 4090              		.cfi_offset 5, -8
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 179


 4091              		.cfi_offset 14, -4
 4092 0002 0546     		mov	r5, r0
 4093 0004 0C46     		mov	r4, r1
4197:FreeRTOS/tasks.c **** 
 4094              		.loc 1 4197 2 is_stmt 1 view .LVU1130
4199:FreeRTOS/tasks.c **** 		{
 4095              		.loc 1 4199 3 view .LVU1131
 4096 0006 FFF7FEFF 		bl	vPortEnterCritical
 4097              	.LVL304:
4202:FreeRTOS/tasks.c **** 			{
 4098              		.loc 1 4202 4 view .LVU1132
4202:FreeRTOS/tasks.c **** 			{
 4099              		.loc 1 4202 20 is_stmt 0 view .LVU1133
 4100 000a 1A4B     		ldr	r3, .L317
 4101 000c 1B68     		ldr	r3, [r3]
 4102 000e DB6C     		ldr	r3, [r3, #76]
4202:FreeRTOS/tasks.c **** 			{
 4103              		.loc 1 4202 6 view .LVU1134
 4104 0010 2BB9     		cbnz	r3, .L312
4205:FreeRTOS/tasks.c **** 
 4105              		.loc 1 4205 5 is_stmt 1 view .LVU1135
4205:FreeRTOS/tasks.c **** 
 4106              		.loc 1 4205 17 is_stmt 0 view .LVU1136
 4107 0012 184B     		ldr	r3, .L317
 4108 0014 1B68     		ldr	r3, [r3]
4205:FreeRTOS/tasks.c **** 
 4109              		.loc 1 4205 33 view .LVU1137
 4110 0016 0122     		movs	r2, #1
 4111 0018 83F85020 		strb	r2, [r3, #80]
4207:FreeRTOS/tasks.c **** 				{
 4112              		.loc 1 4207 5 is_stmt 1 view .LVU1138
4207:FreeRTOS/tasks.c **** 				{
 4113              		.loc 1 4207 7 is_stmt 0 view .LVU1139
 4114 001c ACB9     		cbnz	r4, .L316
 4115              	.L312:
4225:FreeRTOS/tasks.c **** 			}
 4116              		.loc 1 4225 29 is_stmt 1 view .LVU1140
4228:FreeRTOS/tasks.c **** 
 4117              		.loc 1 4228 3 view .LVU1141
 4118 001e FFF7FEFF 		bl	vPortExitCritical
 4119              	.LVL305:
4230:FreeRTOS/tasks.c **** 		{
 4120              		.loc 1 4230 3 view .LVU1142
 4121 0022 FFF7FEFF 		bl	vPortEnterCritical
 4122              	.LVL306:
4232:FreeRTOS/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4123              		.loc 1 4232 27 view .LVU1143
4233:FreeRTOS/tasks.c **** 
 4124              		.loc 1 4233 4 view .LVU1144
4233:FreeRTOS/tasks.c **** 
 4125              		.loc 1 4233 27 is_stmt 0 view .LVU1145
 4126 0026 134B     		ldr	r3, .L317
 4127 0028 1B68     		ldr	r3, [r3]
4233:FreeRTOS/tasks.c **** 
 4128              		.loc 1 4233 13 view .LVU1146
 4129 002a DC6C     		ldr	r4, [r3, #76]
 4130              	.LVL307:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 180


4235:FreeRTOS/tasks.c **** 			{
 4131              		.loc 1 4235 4 is_stmt 1 view .LVU1147
4235:FreeRTOS/tasks.c **** 			{
 4132              		.loc 1 4235 6 is_stmt 0 view .LVU1148
 4133 002c 24B1     		cbz	r4, .L313
4237:FreeRTOS/tasks.c **** 				{
 4134              		.loc 1 4237 5 is_stmt 1 view .LVU1149
4237:FreeRTOS/tasks.c **** 				{
 4135              		.loc 1 4237 7 is_stmt 0 view .LVU1150
 4136 002e DDB1     		cbz	r5, .L314
4239:FreeRTOS/tasks.c **** 				}
 4137              		.loc 1 4239 6 is_stmt 1 view .LVU1151
4239:FreeRTOS/tasks.c **** 				}
 4138              		.loc 1 4239 18 is_stmt 0 view .LVU1152
 4139 0030 104B     		ldr	r3, .L317
 4140 0032 1B68     		ldr	r3, [r3]
4239:FreeRTOS/tasks.c **** 				}
 4141              		.loc 1 4239 36 view .LVU1153
 4142 0034 0022     		movs	r2, #0
 4143 0036 DA64     		str	r2, [r3, #76]
 4144              	.L313:
4248:FreeRTOS/tasks.c **** 			}
 4145              		.loc 1 4248 29 is_stmt 1 view .LVU1154
4251:FreeRTOS/tasks.c **** 		}
 4146              		.loc 1 4251 4 view .LVU1155
4251:FreeRTOS/tasks.c **** 		}
 4147              		.loc 1 4251 16 is_stmt 0 view .LVU1156
 4148 0038 0E4B     		ldr	r3, .L317
 4149 003a 1B68     		ldr	r3, [r3]
4251:FreeRTOS/tasks.c **** 		}
 4150              		.loc 1 4251 32 view .LVU1157
 4151 003c 0022     		movs	r2, #0
 4152 003e 83F85020 		strb	r2, [r3, #80]
4253:FreeRTOS/tasks.c **** 
 4153              		.loc 1 4253 3 is_stmt 1 view .LVU1158
 4154 0042 FFF7FEFF 		bl	vPortExitCritical
 4155              	.LVL308:
4255:FreeRTOS/tasks.c **** 	}
 4156              		.loc 1 4255 3 view .LVU1159
4256:FreeRTOS/tasks.c **** 
 4157              		.loc 1 4256 2 is_stmt 0 view .LVU1160
 4158 0046 2046     		mov	r0, r4
 4159 0048 38BD     		pop	{r3, r4, r5, pc}
 4160              	.LVL309:
 4161              	.L316:
4209:FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4162              		.loc 1 4209 6 is_stmt 1 view .LVU1161
 4163 004a 1146     		mov	r1, r2
 4164 004c 2046     		mov	r0, r4
 4165 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4166              	.LVL310:
4210:FreeRTOS/tasks.c **** 
 4167              		.loc 1 4210 35 view .LVU1162
4216:FreeRTOS/tasks.c **** 				}
 4168              		.loc 1 4216 6 view .LVU1163
 4169 0052 4FF0E023 		mov	r3, #-536813568
 4170 0056 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 181


 4171 005a C3F8042D 		str	r2, [r3, #3332]
4216:FreeRTOS/tasks.c **** 				}
 4172              		.loc 1 4216 6 view .LVU1164
 4173              		.syntax unified
 4174              	@ 4216 "FreeRTOS/tasks.c" 1
 4175 005e BFF34F8F 		dsb
 4176              	@ 0 "" 2
4216:FreeRTOS/tasks.c **** 				}
 4177              		.loc 1 4216 6 view .LVU1165
 4178              	@ 4216 "FreeRTOS/tasks.c" 1
 4179 0062 BFF36F8F 		isb
 4180              	@ 0 "" 2
4216:FreeRTOS/tasks.c **** 				}
 4181              		.loc 1 4216 28 view .LVU1166
 4182              		.thumb
 4183              		.syntax unified
 4184 0066 DAE7     		b	.L312
 4185              	.LVL311:
 4186              	.L314:
4243:FreeRTOS/tasks.c **** 				}
 4187              		.loc 1 4243 6 view .LVU1167
4243:FreeRTOS/tasks.c **** 				}
 4188              		.loc 1 4243 18 is_stmt 0 view .LVU1168
 4189 0068 024B     		ldr	r3, .L317
 4190 006a 1B68     		ldr	r3, [r3]
4243:FreeRTOS/tasks.c **** 				}
 4191              		.loc 1 4243 47 view .LVU1169
 4192 006c 621E     		subs	r2, r4, #1
4243:FreeRTOS/tasks.c **** 				}
 4193              		.loc 1 4243 36 view .LVU1170
 4194 006e DA64     		str	r2, [r3, #76]
 4195 0070 E2E7     		b	.L313
 4196              	.L318:
 4197 0072 00BF     		.align	2
 4198              	.L317:
 4199 0074 00000000 		.word	.LANCHOR10
 4200              		.cfi_endproc
 4201              	.LFE74:
 4203              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4204              		.align	1
 4205              		.global	xTaskNotifyWait
 4206              		.syntax unified
 4207              		.thumb
 4208              		.thumb_func
 4210              	xTaskNotifyWait:
 4211              	.LVL312:
 4212              	.LFB75:
4264:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 4213              		.loc 1 4264 2 is_stmt 1 view -0
 4214              		.cfi_startproc
 4215              		@ args = 0, pretend = 0, frame = 0
 4216              		@ frame_needed = 0, uses_anonymous_args = 0
4264:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 4217              		.loc 1 4264 2 is_stmt 0 view .LVU1172
 4218 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4219              	.LCFI39:
 4220              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 182


 4221              		.cfi_offset 3, -24
 4222              		.cfi_offset 4, -20
 4223              		.cfi_offset 5, -16
 4224              		.cfi_offset 6, -12
 4225              		.cfi_offset 7, -8
 4226              		.cfi_offset 14, -4
 4227 0002 0746     		mov	r7, r0
 4228 0004 0E46     		mov	r6, r1
 4229 0006 1446     		mov	r4, r2
 4230 0008 1D46     		mov	r5, r3
4265:FreeRTOS/tasks.c **** 
 4231              		.loc 1 4265 2 is_stmt 1 view .LVU1173
4267:FreeRTOS/tasks.c **** 		{
 4232              		.loc 1 4267 3 view .LVU1174
 4233 000a FFF7FEFF 		bl	vPortEnterCritical
 4234              	.LVL313:
4270:FreeRTOS/tasks.c **** 			{
 4235              		.loc 1 4270 4 view .LVU1175
4270:FreeRTOS/tasks.c **** 			{
 4236              		.loc 1 4270 20 is_stmt 0 view .LVU1176
 4237 000e 214B     		ldr	r3, .L326
 4238 0010 1B68     		ldr	r3, [r3]
 4239 0012 93F85020 		ldrb	r2, [r3, #80]	@ zero_extendqisi2
 4240 0016 D2B2     		uxtb	r2, r2
4270:FreeRTOS/tasks.c **** 			{
 4241              		.loc 1 4270 6 view .LVU1177
 4242 0018 022A     		cmp	r2, #2
 4243 001a 0AD0     		beq	.L320
4275:FreeRTOS/tasks.c **** 
 4244              		.loc 1 4275 5 is_stmt 1 view .LVU1178
4275:FreeRTOS/tasks.c **** 
 4245              		.loc 1 4275 35 is_stmt 0 view .LVU1179
 4246 001c 1D4B     		ldr	r3, .L326
 4247 001e 1A68     		ldr	r2, [r3]
 4248 0020 D06C     		ldr	r0, [r2, #76]
 4249 0022 20EA0707 		bic	r7, r0, r7
 4250              	.LVL314:
4275:FreeRTOS/tasks.c **** 
 4251              		.loc 1 4275 35 view .LVU1180
 4252 0026 D764     		str	r7, [r2, #76]
4278:FreeRTOS/tasks.c **** 
 4253              		.loc 1 4278 5 is_stmt 1 view .LVU1181
4278:FreeRTOS/tasks.c **** 
 4254              		.loc 1 4278 17 is_stmt 0 view .LVU1182
 4255 0028 1B68     		ldr	r3, [r3]
4278:FreeRTOS/tasks.c **** 
 4256              		.loc 1 4278 33 view .LVU1183
 4257 002a 0122     		movs	r2, #1
 4258 002c 83F85020 		strb	r2, [r3, #80]
4280:FreeRTOS/tasks.c **** 				{
 4259              		.loc 1 4280 5 is_stmt 1 view .LVU1184
4280:FreeRTOS/tasks.c **** 				{
 4260              		.loc 1 4280 7 is_stmt 0 view .LVU1185
 4261 0030 FDB9     		cbnz	r5, .L325
 4262              	.L320:
4298:FreeRTOS/tasks.c **** 			}
 4263              		.loc 1 4298 29 is_stmt 1 view .LVU1186
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 183


4301:FreeRTOS/tasks.c **** 
 4264              		.loc 1 4301 3 view .LVU1187
 4265 0032 FFF7FEFF 		bl	vPortExitCritical
 4266              	.LVL315:
4303:FreeRTOS/tasks.c **** 		{
 4267              		.loc 1 4303 3 view .LVU1188
 4268 0036 FFF7FEFF 		bl	vPortEnterCritical
 4269              	.LVL316:
4305:FreeRTOS/tasks.c **** 
 4270              		.loc 1 4305 27 view .LVU1189
4307:FreeRTOS/tasks.c **** 			{
 4271              		.loc 1 4307 4 view .LVU1190
4307:FreeRTOS/tasks.c **** 			{
 4272              		.loc 1 4307 6 is_stmt 0 view .LVU1191
 4273 003a 1CB1     		cbz	r4, .L321
4311:FreeRTOS/tasks.c **** 			}
 4274              		.loc 1 4311 5 is_stmt 1 view .LVU1192
4311:FreeRTOS/tasks.c **** 			}
 4275              		.loc 1 4311 41 is_stmt 0 view .LVU1193
 4276 003c 154B     		ldr	r3, .L326
 4277 003e 1B68     		ldr	r3, [r3]
 4278 0040 DB6C     		ldr	r3, [r3, #76]
4311:FreeRTOS/tasks.c **** 			}
 4279              		.loc 1 4311 27 view .LVU1194
 4280 0042 2360     		str	r3, [r4]
 4281              	.L321:
4318:FreeRTOS/tasks.c **** 			{
 4282              		.loc 1 4318 4 is_stmt 1 view .LVU1195
4318:FreeRTOS/tasks.c **** 			{
 4283              		.loc 1 4318 20 is_stmt 0 view .LVU1196
 4284 0044 134B     		ldr	r3, .L326
 4285 0046 1B68     		ldr	r3, [r3]
 4286 0048 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4287 004c DBB2     		uxtb	r3, r3
4318:FreeRTOS/tasks.c **** 			{
 4288              		.loc 1 4318 6 view .LVU1197
 4289 004e 012B     		cmp	r3, #1
 4290 0050 1ED0     		beq	.L323
4327:FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 4291              		.loc 1 4327 5 is_stmt 1 view .LVU1198
4327:FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 4292              		.loc 1 4327 35 is_stmt 0 view .LVU1199
 4293 0052 104B     		ldr	r3, .L326
 4294 0054 1B68     		ldr	r3, [r3]
 4295 0056 D96C     		ldr	r1, [r3, #76]
 4296 0058 21EA0606 		bic	r6, r1, r6
 4297              	.LVL317:
4327:FreeRTOS/tasks.c **** 				xReturn = pdTRUE;
 4298              		.loc 1 4327 35 view .LVU1200
 4299 005c DE64     		str	r6, [r3, #76]
4328:FreeRTOS/tasks.c **** 			}
 4300              		.loc 1 4328 5 is_stmt 1 view .LVU1201
 4301              	.LVL318:
4328:FreeRTOS/tasks.c **** 			}
 4302              		.loc 1 4328 13 is_stmt 0 view .LVU1202
 4303 005e 0124     		movs	r4, #1
 4304              	.LVL319:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 184


 4305              	.L322:
4331:FreeRTOS/tasks.c **** 		}
 4306              		.loc 1 4331 4 is_stmt 1 view .LVU1203
4331:FreeRTOS/tasks.c **** 		}
 4307              		.loc 1 4331 16 is_stmt 0 view .LVU1204
 4308 0060 0C4B     		ldr	r3, .L326
 4309 0062 1B68     		ldr	r3, [r3]
4331:FreeRTOS/tasks.c **** 		}
 4310              		.loc 1 4331 32 view .LVU1205
 4311 0064 0022     		movs	r2, #0
 4312 0066 83F85020 		strb	r2, [r3, #80]
4333:FreeRTOS/tasks.c **** 
 4313              		.loc 1 4333 3 is_stmt 1 view .LVU1206
 4314 006a FFF7FEFF 		bl	vPortExitCritical
 4315              	.LVL320:
4335:FreeRTOS/tasks.c **** 	}
 4316              		.loc 1 4335 3 view .LVU1207
4336:FreeRTOS/tasks.c **** 
 4317              		.loc 1 4336 2 is_stmt 0 view .LVU1208
 4318 006e 2046     		mov	r0, r4
 4319 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4320              	.LVL321:
 4321              	.L325:
4282:FreeRTOS/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4322              		.loc 1 4282 6 is_stmt 1 view .LVU1209
 4323 0072 1146     		mov	r1, r2
 4324 0074 2846     		mov	r0, r5
 4325 0076 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4326              	.LVL322:
4283:FreeRTOS/tasks.c **** 
 4327              		.loc 1 4283 35 view .LVU1210
4289:FreeRTOS/tasks.c **** 				}
 4328              		.loc 1 4289 6 view .LVU1211
 4329 007a 4FF0E023 		mov	r3, #-536813568
 4330 007e 4FF08052 		mov	r2, #268435456
 4331 0082 C3F8042D 		str	r2, [r3, #3332]
4289:FreeRTOS/tasks.c **** 				}
 4332              		.loc 1 4289 6 view .LVU1212
 4333              		.syntax unified
 4334              	@ 4289 "FreeRTOS/tasks.c" 1
 4335 0086 BFF34F8F 		dsb
 4336              	@ 0 "" 2
4289:FreeRTOS/tasks.c **** 				}
 4337              		.loc 1 4289 6 view .LVU1213
 4338              	@ 4289 "FreeRTOS/tasks.c" 1
 4339 008a BFF36F8F 		isb
 4340              	@ 0 "" 2
4289:FreeRTOS/tasks.c **** 				}
 4341              		.loc 1 4289 28 view .LVU1214
 4342              		.thumb
 4343              		.syntax unified
 4344 008e D0E7     		b	.L320
 4345              	.L323:
4321:FreeRTOS/tasks.c **** 			}
 4346              		.loc 1 4321 13 is_stmt 0 view .LVU1215
 4347 0090 0024     		movs	r4, #0
 4348              	.LVL323:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 185


4321:FreeRTOS/tasks.c **** 			}
 4349              		.loc 1 4321 13 view .LVU1216
 4350 0092 E5E7     		b	.L322
 4351              	.L327:
 4352              		.align	2
 4353              	.L326:
 4354 0094 00000000 		.word	.LANCHOR10
 4355              		.cfi_endproc
 4356              	.LFE75:
 4358              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4359              		.align	1
 4360              		.global	xTaskGenericNotify
 4361              		.syntax unified
 4362              		.thumb
 4363              		.thumb_func
 4365              	xTaskGenericNotify:
 4366              	.LVL324:
 4367              	.LFB76:
4344:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4368              		.loc 1 4344 2 is_stmt 1 view -0
 4369              		.cfi_startproc
 4370              		@ args = 0, pretend = 0, frame = 0
 4371              		@ frame_needed = 0, uses_anonymous_args = 0
4344:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4372              		.loc 1 4344 2 is_stmt 0 view .LVU1218
 4373 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4374              	.LCFI40:
 4375              		.cfi_def_cfa_offset 24
 4376              		.cfi_offset 3, -24
 4377              		.cfi_offset 4, -20
 4378              		.cfi_offset 5, -16
 4379              		.cfi_offset 6, -12
 4380              		.cfi_offset 7, -8
 4381              		.cfi_offset 14, -4
 4382 0002 0446     		mov	r4, r0
 4383 0004 0F46     		mov	r7, r1
 4384 0006 1546     		mov	r5, r2
 4385 0008 1E46     		mov	r6, r3
4345:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4386              		.loc 1 4345 2 is_stmt 1 view .LVU1219
4346:FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4387              		.loc 1 4346 2 view .LVU1220
 4388              	.LVL325:
4347:FreeRTOS/tasks.c **** 
 4389              		.loc 1 4347 2 view .LVU1221
4349:FreeRTOS/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4390              		.loc 1 4349 32 view .LVU1222
4350:FreeRTOS/tasks.c **** 
 4391              		.loc 1 4350 3 view .LVU1223
4352:FreeRTOS/tasks.c **** 		{
 4392              		.loc 1 4352 3 view .LVU1224
 4393 000a FFF7FEFF 		bl	vPortEnterCritical
 4394              	.LVL326:
4354:FreeRTOS/tasks.c **** 			{
 4395              		.loc 1 4354 4 view .LVU1225
4354:FreeRTOS/tasks.c **** 			{
 4396              		.loc 1 4354 6 is_stmt 0 view .LVU1226
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 186


 4397 000e 0EB1     		cbz	r6, .L329
4356:FreeRTOS/tasks.c **** 			}
 4398              		.loc 1 4356 5 is_stmt 1 view .LVU1227
4356:FreeRTOS/tasks.c **** 			}
 4399              		.loc 1 4356 42 is_stmt 0 view .LVU1228
 4400 0010 E36C     		ldr	r3, [r4, #76]
4356:FreeRTOS/tasks.c **** 			}
 4401              		.loc 1 4356 35 view .LVU1229
 4402 0012 3360     		str	r3, [r6]
 4403              	.L329:
4359:FreeRTOS/tasks.c **** 
 4404              		.loc 1 4359 4 is_stmt 1 view .LVU1230
4359:FreeRTOS/tasks.c **** 
 4405              		.loc 1 4359 26 is_stmt 0 view .LVU1231
 4406 0014 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4407 0018 DBB2     		uxtb	r3, r3
 4408              	.LVL327:
4361:FreeRTOS/tasks.c **** 
 4409              		.loc 1 4361 4 is_stmt 1 view .LVU1232
4361:FreeRTOS/tasks.c **** 
 4410              		.loc 1 4361 25 is_stmt 0 view .LVU1233
 4411 001a 0222     		movs	r2, #2
 4412 001c 84F85020 		strb	r2, [r4, #80]
4363:FreeRTOS/tasks.c **** 			{
 4413              		.loc 1 4363 4 is_stmt 1 view .LVU1234
 4414 0020 6A1E     		subs	r2, r5, #1
 4415 0022 032A     		cmp	r2, #3
 4416 0024 1AD8     		bhi	.L337
 4417 0026 DFE802F0 		tbb	[pc, r2]
 4418              	.L332:
 4419 002a 02       		.byte	(.L335-.L332)/2
 4420 002b 0C       		.byte	(.L334-.L332)/2
 4421 002c 11       		.byte	(.L333-.L332)/2
 4422 002d 14       		.byte	(.L331-.L332)/2
 4423              		.p2align 1
 4424              	.L335:
4366:FreeRTOS/tasks.c **** 					break;
 4425              		.loc 1 4366 6 view .LVU1235
4366:FreeRTOS/tasks.c **** 					break;
 4426              		.loc 1 4366 29 is_stmt 0 view .LVU1236
 4427 002e E16C     		ldr	r1, [r4, #76]
 4428 0030 0F43     		orrs	r7, r7, r1
 4429              	.LVL328:
4366:FreeRTOS/tasks.c **** 					break;
 4430              		.loc 1 4366 29 view .LVU1237
 4431 0032 E764     		str	r7, [r4, #76]
4367:FreeRTOS/tasks.c **** 
 4432              		.loc 1 4367 6 is_stmt 1 view .LVU1238
4346:FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4433              		.loc 1 4346 13 is_stmt 0 view .LVU1239
 4434 0034 0125     		movs	r5, #1
 4435              	.L330:
 4436              	.LVL329:
4395:FreeRTOS/tasks.c **** 
 4437              		.loc 1 4395 22 is_stmt 1 view .LVU1240
4399:FreeRTOS/tasks.c **** 			{
 4438              		.loc 1 4399 4 view .LVU1241
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 187


4399:FreeRTOS/tasks.c **** 			{
 4439              		.loc 1 4399 6 is_stmt 0 view .LVU1242
 4440 0036 012B     		cmp	r3, #1
 4441 0038 14D0     		beq	.L340
 4442              	.LVL330:
 4443              	.L336:
4436:FreeRTOS/tasks.c **** 			}
 4444              		.loc 1 4436 29 is_stmt 1 view .LVU1243
4439:FreeRTOS/tasks.c **** 
 4445              		.loc 1 4439 3 view .LVU1244
 4446 003a FFF7FEFF 		bl	vPortExitCritical
 4447              	.LVL331:
4441:FreeRTOS/tasks.c **** 	}
 4448              		.loc 1 4441 3 view .LVU1245
4442:FreeRTOS/tasks.c **** 
 4449              		.loc 1 4442 2 is_stmt 0 view .LVU1246
 4450 003e 2846     		mov	r0, r5
 4451 0040 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4452              	.LVL332:
 4453              	.L334:
4370:FreeRTOS/tasks.c **** 					break;
 4454              		.loc 1 4370 6 is_stmt 1 view .LVU1247
4370:FreeRTOS/tasks.c **** 					break;
 4455              		.loc 1 4370 13 is_stmt 0 view .LVU1248
 4456 0042 E26C     		ldr	r2, [r4, #76]
4370:FreeRTOS/tasks.c **** 					break;
 4457              		.loc 1 4370 32 view .LVU1249
 4458 0044 0132     		adds	r2, r2, #1
 4459 0046 E264     		str	r2, [r4, #76]
4371:FreeRTOS/tasks.c **** 
 4460              		.loc 1 4371 6 is_stmt 1 view .LVU1250
4346:FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4461              		.loc 1 4346 13 is_stmt 0 view .LVU1251
 4462 0048 0125     		movs	r5, #1
4371:FreeRTOS/tasks.c **** 
 4463              		.loc 1 4371 6 view .LVU1252
 4464 004a F4E7     		b	.L330
 4465              	.L333:
4374:FreeRTOS/tasks.c **** 					break;
 4466              		.loc 1 4374 6 is_stmt 1 view .LVU1253
4374:FreeRTOS/tasks.c **** 					break;
 4467              		.loc 1 4374 29 is_stmt 0 view .LVU1254
 4468 004c E764     		str	r7, [r4, #76]
4375:FreeRTOS/tasks.c **** 
 4469              		.loc 1 4375 6 is_stmt 1 view .LVU1255
4346:FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4470              		.loc 1 4346 13 is_stmt 0 view .LVU1256
 4471 004e 0125     		movs	r5, #1
4375:FreeRTOS/tasks.c **** 
 4472              		.loc 1 4375 6 view .LVU1257
 4473 0050 F1E7     		b	.L330
 4474              	.L331:
4378:FreeRTOS/tasks.c **** 					{
 4475              		.loc 1 4378 6 is_stmt 1 view .LVU1258
4378:FreeRTOS/tasks.c **** 					{
 4476              		.loc 1 4378 8 is_stmt 0 view .LVU1259
 4477 0052 022B     		cmp	r3, #2
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 188


 4478 0054 04D0     		beq	.L338
4380:FreeRTOS/tasks.c **** 					}
 4479              		.loc 1 4380 7 is_stmt 1 view .LVU1260
4380:FreeRTOS/tasks.c **** 					}
 4480              		.loc 1 4380 30 is_stmt 0 view .LVU1261
 4481 0056 E764     		str	r7, [r4, #76]
4346:FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4482              		.loc 1 4346 13 view .LVU1262
 4483 0058 0125     		movs	r5, #1
 4484 005a ECE7     		b	.L330
 4485              	.L337:
4363:FreeRTOS/tasks.c **** 			{
 4486              		.loc 1 4363 4 view .LVU1263
 4487 005c 0125     		movs	r5, #1
 4488 005e EAE7     		b	.L330
 4489              	.L338:
4385:FreeRTOS/tasks.c **** 					}
 4490              		.loc 1 4385 15 view .LVU1264
 4491 0060 0025     		movs	r5, #0
 4492 0062 E8E7     		b	.L330
 4493              	.LVL333:
 4494              	.L340:
4401:FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4495              		.loc 1 4401 5 is_stmt 1 view .LVU1265
4401:FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4496              		.loc 1 4401 14 is_stmt 0 view .LVU1266
 4497 0064 261D     		adds	r6, r4, #4
 4498              	.LVL334:
4401:FreeRTOS/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4499              		.loc 1 4401 14 view .LVU1267
 4500 0066 3046     		mov	r0, r6
 4501 0068 FFF7FEFF 		bl	uxListRemove
 4502              	.LVL335:
4402:FreeRTOS/tasks.c **** 
 4503              		.loc 1 4402 5 is_stmt 1 view .LVU1268
4402:FreeRTOS/tasks.c **** 
 4504              		.loc 1 4402 5 view .LVU1269
 4505 006c E06A     		ldr	r0, [r4, #44]
 4506 006e 0123     		movs	r3, #1
 4507 0070 8340     		lsls	r3, r3, r0
 4508 0072 0E4A     		ldr	r2, .L341
 4509 0074 1168     		ldr	r1, [r2]
 4510 0076 0B43     		orrs	r3, r3, r1
 4511 0078 1360     		str	r3, [r2]
4402:FreeRTOS/tasks.c **** 
 4512              		.loc 1 4402 5 view .LVU1270
 4513 007a 00EB8000 		add	r0, r0, r0, lsl #2
 4514 007e 3146     		mov	r1, r6
 4515 0080 0B4B     		ldr	r3, .L341+4
 4516 0082 03EB8000 		add	r0, r3, r0, lsl #2
 4517 0086 FFF7FEFF 		bl	vListInsertEnd
 4518              	.LVL336:
4402:FreeRTOS/tasks.c **** 
 4519              		.loc 1 4402 35 view .LVU1271
4405:FreeRTOS/tasks.c **** 
 4520              		.loc 1 4405 82 view .LVU1272
4423:FreeRTOS/tasks.c **** 				{
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 189


 4521              		.loc 1 4423 5 view .LVU1273
4423:FreeRTOS/tasks.c **** 				{
 4522              		.loc 1 4423 14 is_stmt 0 view .LVU1274
 4523 008a E26A     		ldr	r2, [r4, #44]
4423:FreeRTOS/tasks.c **** 				{
 4524              		.loc 1 4423 41 view .LVU1275
 4525 008c 094B     		ldr	r3, .L341+8
 4526 008e 1B68     		ldr	r3, [r3]
 4527 0090 DB6A     		ldr	r3, [r3, #44]
4423:FreeRTOS/tasks.c **** 				{
 4528              		.loc 1 4423 7 view .LVU1276
 4529 0092 9A42     		cmp	r2, r3
 4530 0094 D1D9     		bls	.L336
4427:FreeRTOS/tasks.c **** 				}
 4531              		.loc 1 4427 6 is_stmt 1 view .LVU1277
 4532 0096 4FF0E023 		mov	r3, #-536813568
 4533 009a 4FF08052 		mov	r2, #268435456
 4534 009e C3F8042D 		str	r2, [r3, #3332]
4427:FreeRTOS/tasks.c **** 				}
 4535              		.loc 1 4427 6 view .LVU1278
 4536              		.syntax unified
 4537              	@ 4427 "FreeRTOS/tasks.c" 1
 4538 00a2 BFF34F8F 		dsb
 4539              	@ 0 "" 2
4427:FreeRTOS/tasks.c **** 				}
 4540              		.loc 1 4427 6 view .LVU1279
 4541              	@ 4427 "FreeRTOS/tasks.c" 1
 4542 00a6 BFF36F8F 		isb
 4543              	@ 0 "" 2
4427:FreeRTOS/tasks.c **** 				}
 4544              		.loc 1 4427 37 view .LVU1280
 4545              		.thumb
 4546              		.syntax unified
 4547 00aa C6E7     		b	.L336
 4548              	.L342:
 4549              		.align	2
 4550              	.L341:
 4551 00ac 00000000 		.word	.LANCHOR13
 4552 00b0 00000000 		.word	.LANCHOR4
 4553 00b4 00000000 		.word	.LANCHOR10
 4554              		.cfi_endproc
 4555              	.LFE76:
 4557              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4558              		.align	1
 4559              		.global	xTaskGenericNotifyFromISR
 4560              		.syntax unified
 4561              		.thumb
 4562              		.thumb_func
 4564              	xTaskGenericNotifyFromISR:
 4565              	.LVL337:
 4566              	.LFB77:
4450:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4567              		.loc 1 4450 2 view -0
 4568              		.cfi_startproc
 4569              		@ args = 4, pretend = 0, frame = 0
 4570              		@ frame_needed = 0, uses_anonymous_args = 0
4450:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 190


 4571              		.loc 1 4450 2 is_stmt 0 view .LVU1282
 4572 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4573              	.LCFI41:
 4574              		.cfi_def_cfa_offset 24
 4575              		.cfi_offset 3, -24
 4576              		.cfi_offset 4, -20
 4577              		.cfi_offset 5, -16
 4578              		.cfi_offset 6, -12
 4579              		.cfi_offset 7, -8
 4580              		.cfi_offset 14, -4
 4581 0002 0446     		mov	r4, r0
4451:FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4582              		.loc 1 4451 2 is_stmt 1 view .LVU1283
4452:FreeRTOS/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4583              		.loc 1 4452 2 view .LVU1284
4453:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4584              		.loc 1 4453 2 view .LVU1285
 4585              	.LVL338:
4454:FreeRTOS/tasks.c **** 
 4586              		.loc 1 4454 2 view .LVU1286
4456:FreeRTOS/tasks.c **** 
 4587              		.loc 1 4456 32 view .LVU1287
4474:FreeRTOS/tasks.c **** 
 4588              		.loc 1 4474 45 view .LVU1288
4476:FreeRTOS/tasks.c **** 
 4589              		.loc 1 4476 3 view .LVU1289
4478:FreeRTOS/tasks.c **** 		{
 4590              		.loc 1 4478 3 view .LVU1290
 4591              	.LBB60:
 4592              	.LBI60:
 249:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 4593              		.loc 2 249 34 view .LVU1291
 4594              	.LBB61:
 251:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 4595              		.loc 2 251 1 view .LVU1292
 253:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 4596              		.loc 2 253 2 view .LVU1293
 4597              		.syntax unified
 4598              	@ 253 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 4599 0004 EFF31185 			mrs r5, basepri											
 4600 0008 4FF05000 		mov r0, #80												
 4601 000c 80F31188 		msr basepri, r0											
 4602 0010 BFF36F8F 		isb														
 4603 0014 BFF34F8F 		dsb														
 4604              	
 4605              	@ 0 "" 2
 4606              	.LVL339:
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 4607              		.loc 2 265 2 view .LVU1294
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 4608              		.loc 2 265 2 is_stmt 0 view .LVU1295
 4609              		.thumb
 4610              		.syntax unified
 4611              	.LBE61:
 4612              	.LBE60:
4480:FreeRTOS/tasks.c **** 			{
 4613              		.loc 1 4480 4 is_stmt 1 view .LVU1296
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 191


4480:FreeRTOS/tasks.c **** 			{
 4614              		.loc 1 4480 6 is_stmt 0 view .LVU1297
 4615 0018 0BB1     		cbz	r3, .L344
4482:FreeRTOS/tasks.c **** 			}
 4616              		.loc 1 4482 5 is_stmt 1 view .LVU1298
4482:FreeRTOS/tasks.c **** 			}
 4617              		.loc 1 4482 42 is_stmt 0 view .LVU1299
 4618 001a E06C     		ldr	r0, [r4, #76]
4482:FreeRTOS/tasks.c **** 			}
 4619              		.loc 1 4482 35 view .LVU1300
 4620 001c 1860     		str	r0, [r3]
 4621              	.L344:
4485:FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4622              		.loc 1 4485 4 is_stmt 1 view .LVU1301
4485:FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4623              		.loc 1 4485 26 is_stmt 0 view .LVU1302
 4624 001e 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4625              	.LVL340:
4485:FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4626              		.loc 1 4485 26 view .LVU1303
 4627 0022 DBB2     		uxtb	r3, r3
 4628              	.LVL341:
4486:FreeRTOS/tasks.c **** 
 4629              		.loc 1 4486 4 is_stmt 1 view .LVU1304
4486:FreeRTOS/tasks.c **** 
 4630              		.loc 1 4486 25 is_stmt 0 view .LVU1305
 4631 0024 0220     		movs	r0, #2
 4632 0026 84F85000 		strb	r0, [r4, #80]
4488:FreeRTOS/tasks.c **** 			{
 4633              		.loc 1 4488 4 is_stmt 1 view .LVU1306
 4634 002a 013A     		subs	r2, r2, #1
 4635              	.LVL342:
4488:FreeRTOS/tasks.c **** 			{
 4636              		.loc 1 4488 4 is_stmt 0 view .LVU1307
 4637 002c 032A     		cmp	r2, #3
 4638 002e 1AD8     		bhi	.L355
 4639 0030 DFE802F0 		tbb	[pc, r2]
 4640              	.L347:
 4641 0034 02       		.byte	(.L350-.L347)/2
 4642 0035 0C       		.byte	(.L349-.L347)/2
 4643 0036 11       		.byte	(.L348-.L347)/2
 4644 0037 14       		.byte	(.L346-.L347)/2
 4645              		.p2align 1
 4646              	.L350:
4491:FreeRTOS/tasks.c **** 					break;
 4647              		.loc 1 4491 6 is_stmt 1 view .LVU1308
4491:FreeRTOS/tasks.c **** 					break;
 4648              		.loc 1 4491 29 is_stmt 0 view .LVU1309
 4649 0038 E26C     		ldr	r2, [r4, #76]
 4650 003a 1143     		orrs	r1, r1, r2
 4651              	.LVL343:
4491:FreeRTOS/tasks.c **** 					break;
 4652              		.loc 1 4491 29 view .LVU1310
 4653 003c E164     		str	r1, [r4, #76]
4492:FreeRTOS/tasks.c **** 
 4654              		.loc 1 4492 6 is_stmt 1 view .LVU1311
4453:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 192


 4655              		.loc 1 4453 13 is_stmt 0 view .LVU1312
 4656 003e 0126     		movs	r6, #1
 4657              	.L345:
 4658              	.LVL344:
4520:FreeRTOS/tasks.c **** 
 4659              		.loc 1 4520 31 is_stmt 1 view .LVU1313
4524:FreeRTOS/tasks.c **** 			{
 4660              		.loc 1 4524 4 view .LVU1314
4524:FreeRTOS/tasks.c **** 			{
 4661              		.loc 1 4524 6 is_stmt 0 view .LVU1315
 4662 0040 012B     		cmp	r3, #1
 4663 0042 14D0     		beq	.L358
 4664              	.LVL345:
 4665              	.L351:
4559:FreeRTOS/tasks.c **** 				}
 4666              		.loc 1 4559 30 is_stmt 1 view .LVU1316
4563:FreeRTOS/tasks.c **** 
 4667              		.loc 1 4563 3 view .LVU1317
 4668              	.LBB62:
 4669              	.LBI62:
 269:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 4670              		.loc 2 269 30 view .LVU1318
 4671              	.LBB63:
 4672              		.loc 2 271 2 view .LVU1319
 4673              		.syntax unified
 4674              	@ 271 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 4675 0044 85F31188 			msr basepri, r5	
 4676              	@ 0 "" 2
 4677              	.LVL346:
 4678              		.loc 2 271 2 is_stmt 0 view .LVU1320
 4679              		.thumb
 4680              		.syntax unified
 4681              	.LBE63:
 4682              	.LBE62:
4565:FreeRTOS/tasks.c **** 	}
 4683              		.loc 1 4565 3 is_stmt 1 view .LVU1321
4566:FreeRTOS/tasks.c **** 
 4684              		.loc 1 4566 2 is_stmt 0 view .LVU1322
 4685 0048 3046     		mov	r0, r6
 4686 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4687              	.LVL347:
 4688              	.L349:
4495:FreeRTOS/tasks.c **** 					break;
 4689              		.loc 1 4495 6 is_stmt 1 view .LVU1323
4495:FreeRTOS/tasks.c **** 					break;
 4690              		.loc 1 4495 13 is_stmt 0 view .LVU1324
 4691 004c E26C     		ldr	r2, [r4, #76]
4495:FreeRTOS/tasks.c **** 					break;
 4692              		.loc 1 4495 32 view .LVU1325
 4693 004e 0132     		adds	r2, r2, #1
 4694 0050 E264     		str	r2, [r4, #76]
4496:FreeRTOS/tasks.c **** 
 4695              		.loc 1 4496 6 is_stmt 1 view .LVU1326
4453:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4696              		.loc 1 4453 13 is_stmt 0 view .LVU1327
 4697 0052 0126     		movs	r6, #1
4496:FreeRTOS/tasks.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 193


 4698              		.loc 1 4496 6 view .LVU1328
 4699 0054 F4E7     		b	.L345
 4700              	.L348:
4499:FreeRTOS/tasks.c **** 					break;
 4701              		.loc 1 4499 6 is_stmt 1 view .LVU1329
4499:FreeRTOS/tasks.c **** 					break;
 4702              		.loc 1 4499 29 is_stmt 0 view .LVU1330
 4703 0056 E164     		str	r1, [r4, #76]
4500:FreeRTOS/tasks.c **** 
 4704              		.loc 1 4500 6 is_stmt 1 view .LVU1331
4453:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4705              		.loc 1 4453 13 is_stmt 0 view .LVU1332
 4706 0058 0126     		movs	r6, #1
4500:FreeRTOS/tasks.c **** 
 4707              		.loc 1 4500 6 view .LVU1333
 4708 005a F1E7     		b	.L345
 4709              	.L346:
4503:FreeRTOS/tasks.c **** 					{
 4710              		.loc 1 4503 6 is_stmt 1 view .LVU1334
4503:FreeRTOS/tasks.c **** 					{
 4711              		.loc 1 4503 8 is_stmt 0 view .LVU1335
 4712 005c 022B     		cmp	r3, #2
 4713 005e 04D0     		beq	.L356
4505:FreeRTOS/tasks.c **** 					}
 4714              		.loc 1 4505 7 is_stmt 1 view .LVU1336
4505:FreeRTOS/tasks.c **** 					}
 4715              		.loc 1 4505 30 is_stmt 0 view .LVU1337
 4716 0060 E164     		str	r1, [r4, #76]
4453:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4717              		.loc 1 4453 13 view .LVU1338
 4718 0062 0126     		movs	r6, #1
 4719 0064 ECE7     		b	.L345
 4720              	.L355:
4488:FreeRTOS/tasks.c **** 			{
 4721              		.loc 1 4488 4 view .LVU1339
 4722 0066 0126     		movs	r6, #1
 4723 0068 EAE7     		b	.L345
 4724              	.L356:
4510:FreeRTOS/tasks.c **** 					}
 4725              		.loc 1 4510 15 view .LVU1340
 4726 006a 0026     		movs	r6, #0
 4727 006c E8E7     		b	.L345
 4728              	.LVL348:
 4729              	.L358:
4527:FreeRTOS/tasks.c **** 
 4730              		.loc 1 4527 82 is_stmt 1 view .LVU1341
4529:FreeRTOS/tasks.c **** 				{
 4731              		.loc 1 4529 5 view .LVU1342
4529:FreeRTOS/tasks.c **** 				{
 4732              		.loc 1 4529 30 is_stmt 0 view .LVU1343
 4733 006e 164B     		ldr	r3, .L359
 4734              	.LVL349:
4529:FreeRTOS/tasks.c **** 				{
 4735              		.loc 1 4529 30 view .LVU1344
 4736 0070 1B68     		ldr	r3, [r3]
4529:FreeRTOS/tasks.c **** 				{
 4737              		.loc 1 4529 7 view .LVU1345
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 194


 4738 0072 F3B9     		cbnz	r3, .L352
4531:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4739              		.loc 1 4531 6 is_stmt 1 view .LVU1346
4531:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4740              		.loc 1 4531 15 is_stmt 0 view .LVU1347
 4741 0074 271D     		adds	r7, r4, #4
 4742 0076 3846     		mov	r0, r7
 4743 0078 FFF7FEFF 		bl	uxListRemove
 4744              	.LVL350:
4532:FreeRTOS/tasks.c **** 				}
 4745              		.loc 1 4532 6 is_stmt 1 view .LVU1348
4532:FreeRTOS/tasks.c **** 				}
 4746              		.loc 1 4532 6 view .LVU1349
 4747 007c E06A     		ldr	r0, [r4, #44]
 4748 007e 0123     		movs	r3, #1
 4749 0080 8340     		lsls	r3, r3, r0
 4750 0082 124A     		ldr	r2, .L359+4
 4751 0084 1168     		ldr	r1, [r2]
 4752 0086 0B43     		orrs	r3, r3, r1
 4753 0088 1360     		str	r3, [r2]
4532:FreeRTOS/tasks.c **** 				}
 4754              		.loc 1 4532 6 view .LVU1350
 4755 008a 00EB8000 		add	r0, r0, r0, lsl #2
 4756 008e 3946     		mov	r1, r7
 4757 0090 0F4B     		ldr	r3, .L359+8
 4758 0092 03EB8000 		add	r0, r3, r0, lsl #2
 4759 0096 FFF7FEFF 		bl	vListInsertEnd
 4760              	.LVL351:
4532:FreeRTOS/tasks.c **** 				}
 4761              		.loc 1 4532 36 view .LVU1351
 4762              	.L353:
4541:FreeRTOS/tasks.c **** 				{
 4763              		.loc 1 4541 5 view .LVU1352
4541:FreeRTOS/tasks.c **** 				{
 4764              		.loc 1 4541 14 is_stmt 0 view .LVU1353
 4765 009a E26A     		ldr	r2, [r4, #44]
4541:FreeRTOS/tasks.c **** 				{
 4766              		.loc 1 4541 41 view .LVU1354
 4767 009c 0D4B     		ldr	r3, .L359+12
 4768 009e 1B68     		ldr	r3, [r3]
 4769 00a0 DB6A     		ldr	r3, [r3, #44]
4541:FreeRTOS/tasks.c **** 				{
 4770              		.loc 1 4541 7 view .LVU1355
 4771 00a2 9A42     		cmp	r2, r3
 4772 00a4 CED9     		bls	.L351
4545:FreeRTOS/tasks.c **** 					{
 4773              		.loc 1 4545 6 is_stmt 1 view .LVU1356
4545:FreeRTOS/tasks.c **** 					{
 4774              		.loc 1 4545 8 is_stmt 0 view .LVU1357
 4775 00a6 069B     		ldr	r3, [sp, #24]
 4776 00a8 4BB1     		cbz	r3, .L354
4547:FreeRTOS/tasks.c **** 					}
 4777              		.loc 1 4547 7 is_stmt 1 view .LVU1358
4547:FreeRTOS/tasks.c **** 					}
 4778              		.loc 1 4547 34 is_stmt 0 view .LVU1359
 4779 00aa 0123     		movs	r3, #1
 4780 00ac 069A     		ldr	r2, [sp, #24]
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 195


 4781 00ae 1360     		str	r3, [r2]
 4782 00b0 C8E7     		b	.L351
 4783              	.L352:
4538:FreeRTOS/tasks.c **** 				}
 4784              		.loc 1 4538 6 is_stmt 1 view .LVU1360
 4785 00b2 04F11801 		add	r1, r4, #24
 4786 00b6 0848     		ldr	r0, .L359+16
 4787 00b8 FFF7FEFF 		bl	vListInsertEnd
 4788              	.LVL352:
 4789 00bc EDE7     		b	.L353
 4790              	.L354:
4554:FreeRTOS/tasks.c **** 					}
 4791              		.loc 1 4554 7 view .LVU1361
4554:FreeRTOS/tasks.c **** 					}
 4792              		.loc 1 4554 21 is_stmt 0 view .LVU1362
 4793 00be 074B     		ldr	r3, .L359+20
 4794 00c0 0122     		movs	r2, #1
 4795 00c2 1A60     		str	r2, [r3]
 4796 00c4 BEE7     		b	.L351
 4797              	.L360:
 4798 00c6 00BF     		.align	2
 4799              	.L359:
 4800 00c8 00000000 		.word	.LANCHOR16
 4801 00cc 00000000 		.word	.LANCHOR13
 4802 00d0 00000000 		.word	.LANCHOR4
 4803 00d4 00000000 		.word	.LANCHOR10
 4804 00d8 00000000 		.word	.LANCHOR1
 4805 00dc 00000000 		.word	.LANCHOR20
 4806              		.cfi_endproc
 4807              	.LFE77:
 4809              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4810              		.align	1
 4811              		.global	vTaskNotifyGiveFromISR
 4812              		.syntax unified
 4813              		.thumb
 4814              		.thumb_func
 4816              	vTaskNotifyGiveFromISR:
 4817              	.LVL353:
 4818              	.LFB78:
4574:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4819              		.loc 1 4574 2 is_stmt 1 view -0
 4820              		.cfi_startproc
 4821              		@ args = 0, pretend = 0, frame = 0
 4822              		@ frame_needed = 0, uses_anonymous_args = 0
4574:FreeRTOS/tasks.c **** 	TCB_t * pxTCB;
 4823              		.loc 1 4574 2 is_stmt 0 view .LVU1364
 4824 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4825              	.LCFI42:
 4826              		.cfi_def_cfa_offset 24
 4827              		.cfi_offset 3, -24
 4828              		.cfi_offset 4, -20
 4829              		.cfi_offset 5, -16
 4830              		.cfi_offset 6, -12
 4831              		.cfi_offset 7, -8
 4832              		.cfi_offset 14, -4
4575:FreeRTOS/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4833              		.loc 1 4575 2 is_stmt 1 view .LVU1365
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 196


4576:FreeRTOS/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4834              		.loc 1 4576 2 view .LVU1366
4577:FreeRTOS/tasks.c **** 
 4835              		.loc 1 4577 2 view .LVU1367
4579:FreeRTOS/tasks.c **** 
 4836              		.loc 1 4579 32 view .LVU1368
4597:FreeRTOS/tasks.c **** 
 4837              		.loc 1 4597 45 view .LVU1369
4599:FreeRTOS/tasks.c **** 
 4838              		.loc 1 4599 3 view .LVU1370
 4839              	.LVL354:
4601:FreeRTOS/tasks.c **** 		{
 4840              		.loc 1 4601 3 view .LVU1371
 4841              	.LBB64:
 4842              	.LBI64:
 249:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 4843              		.loc 2 249 34 view .LVU1372
 4844              	.LBB65:
 251:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 4845              		.loc 2 251 1 view .LVU1373
 253:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 4846              		.loc 2 253 2 view .LVU1374
 4847              		.syntax unified
 4848              	@ 253 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 4849 0002 EFF31185 			mrs r5, basepri											
 4850 0006 4FF05003 		mov r3, #80												
 4851 000a 83F31188 		msr basepri, r3											
 4852 000e BFF36F8F 		isb														
 4853 0012 BFF34F8F 		dsb														
 4854              	
 4855              	@ 0 "" 2
 4856              	.LVL355:
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 4857              		.loc 2 265 2 view .LVU1375
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 4858              		.loc 2 265 2 is_stmt 0 view .LVU1376
 4859              		.thumb
 4860              		.syntax unified
 4861              	.LBE65:
 4862              	.LBE64:
4603:FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4863              		.loc 1 4603 4 is_stmt 1 view .LVU1377
4603:FreeRTOS/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4864              		.loc 1 4603 26 is_stmt 0 view .LVU1378
 4865 0016 90F85030 		ldrb	r3, [r0, #80]	@ zero_extendqisi2
 4866 001a DBB2     		uxtb	r3, r3
 4867              	.LVL356:
4604:FreeRTOS/tasks.c **** 
 4868              		.loc 1 4604 4 is_stmt 1 view .LVU1379
4604:FreeRTOS/tasks.c **** 
 4869              		.loc 1 4604 25 is_stmt 0 view .LVU1380
 4870 001c 0222     		movs	r2, #2
 4871 001e 80F85020 		strb	r2, [r0, #80]
4608:FreeRTOS/tasks.c **** 
 4872              		.loc 1 4608 4 is_stmt 1 view .LVU1381
4608:FreeRTOS/tasks.c **** 
 4873              		.loc 1 4608 11 is_stmt 0 view .LVU1382
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 197


 4874 0022 C26C     		ldr	r2, [r0, #76]
4608:FreeRTOS/tasks.c **** 
 4875              		.loc 1 4608 30 view .LVU1383
 4876 0024 0132     		adds	r2, r2, #1
 4877 0026 C264     		str	r2, [r0, #76]
4610:FreeRTOS/tasks.c **** 
 4878              		.loc 1 4610 36 is_stmt 1 view .LVU1384
4614:FreeRTOS/tasks.c **** 			{
 4879              		.loc 1 4614 4 view .LVU1385
4614:FreeRTOS/tasks.c **** 			{
 4880              		.loc 1 4614 6 is_stmt 0 view .LVU1386
 4881 0028 012B     		cmp	r3, #1
 4882 002a 02D0     		beq	.L367
 4883              	.LVL357:
 4884              	.L362:
4649:FreeRTOS/tasks.c **** 				}
 4885              		.loc 1 4649 30 is_stmt 1 view .LVU1387
4653:FreeRTOS/tasks.c **** 	}
 4886              		.loc 1 4653 3 view .LVU1388
 4887              	.LBB66:
 4888              	.LBI66:
 269:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 4889              		.loc 2 269 30 view .LVU1389
 4890              	.LBB67:
 4891              		.loc 2 271 2 view .LVU1390
 4892              		.syntax unified
 4893              	@ 271 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 4894 002c 85F31188 			msr basepri, r5	
 4895              	@ 0 "" 2
 4896              	.LVL358:
 4897              		.loc 2 271 2 is_stmt 0 view .LVU1391
 4898              		.thumb
 4899              		.syntax unified
 4900              	.LBE67:
 4901              	.LBE66:
4654:FreeRTOS/tasks.c **** 
 4902              		.loc 1 4654 2 view .LVU1392
 4903 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4904              	.LVL359:
 4905              	.L367:
4654:FreeRTOS/tasks.c **** 
 4906              		.loc 1 4654 2 view .LVU1393
 4907 0032 0446     		mov	r4, r0
 4908 0034 0E46     		mov	r6, r1
4617:FreeRTOS/tasks.c **** 
 4909              		.loc 1 4617 82 is_stmt 1 view .LVU1394
4619:FreeRTOS/tasks.c **** 				{
 4910              		.loc 1 4619 5 view .LVU1395
4619:FreeRTOS/tasks.c **** 				{
 4911              		.loc 1 4619 30 is_stmt 0 view .LVU1396
 4912 0036 154B     		ldr	r3, .L368
 4913              	.LVL360:
4619:FreeRTOS/tasks.c **** 				{
 4914              		.loc 1 4619 30 view .LVU1397
 4915 0038 1B68     		ldr	r3, [r3]
4619:FreeRTOS/tasks.c **** 				{
 4916              		.loc 1 4619 7 view .LVU1398
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 198


 4917 003a E3B9     		cbnz	r3, .L363
4621:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4918              		.loc 1 4621 6 is_stmt 1 view .LVU1399
4621:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4919              		.loc 1 4621 15 is_stmt 0 view .LVU1400
 4920 003c 071D     		adds	r7, r0, #4
 4921 003e 3846     		mov	r0, r7
 4922              	.LVL361:
4621:FreeRTOS/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4923              		.loc 1 4621 15 view .LVU1401
 4924 0040 FFF7FEFF 		bl	uxListRemove
 4925              	.LVL362:
4622:FreeRTOS/tasks.c **** 				}
 4926              		.loc 1 4622 6 is_stmt 1 view .LVU1402
4622:FreeRTOS/tasks.c **** 				}
 4927              		.loc 1 4622 6 view .LVU1403
 4928 0044 E06A     		ldr	r0, [r4, #44]
 4929 0046 0123     		movs	r3, #1
 4930 0048 8340     		lsls	r3, r3, r0
 4931 004a 114A     		ldr	r2, .L368+4
 4932 004c 1168     		ldr	r1, [r2]
 4933 004e 0B43     		orrs	r3, r3, r1
 4934 0050 1360     		str	r3, [r2]
4622:FreeRTOS/tasks.c **** 				}
 4935              		.loc 1 4622 6 view .LVU1404
 4936 0052 00EB8000 		add	r0, r0, r0, lsl #2
 4937 0056 3946     		mov	r1, r7
 4938 0058 0E4B     		ldr	r3, .L368+8
 4939 005a 03EB8000 		add	r0, r3, r0, lsl #2
 4940 005e FFF7FEFF 		bl	vListInsertEnd
 4941              	.LVL363:
4622:FreeRTOS/tasks.c **** 				}
 4942              		.loc 1 4622 36 view .LVU1405
 4943              	.L364:
4631:FreeRTOS/tasks.c **** 				{
 4944              		.loc 1 4631 5 view .LVU1406
4631:FreeRTOS/tasks.c **** 				{
 4945              		.loc 1 4631 14 is_stmt 0 view .LVU1407
 4946 0062 E26A     		ldr	r2, [r4, #44]
4631:FreeRTOS/tasks.c **** 				{
 4947              		.loc 1 4631 41 view .LVU1408
 4948 0064 0C4B     		ldr	r3, .L368+12
 4949 0066 1B68     		ldr	r3, [r3]
 4950 0068 DB6A     		ldr	r3, [r3, #44]
4631:FreeRTOS/tasks.c **** 				{
 4951              		.loc 1 4631 7 view .LVU1409
 4952 006a 9A42     		cmp	r2, r3
 4953 006c DED9     		bls	.L362
4635:FreeRTOS/tasks.c **** 					{
 4954              		.loc 1 4635 6 is_stmt 1 view .LVU1410
4635:FreeRTOS/tasks.c **** 					{
 4955              		.loc 1 4635 8 is_stmt 0 view .LVU1411
 4956 006e 46B1     		cbz	r6, .L365
4637:FreeRTOS/tasks.c **** 					}
 4957              		.loc 1 4637 7 is_stmt 1 view .LVU1412
4637:FreeRTOS/tasks.c **** 					}
 4958              		.loc 1 4637 34 is_stmt 0 view .LVU1413
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 199


 4959 0070 0123     		movs	r3, #1
 4960 0072 3360     		str	r3, [r6]
 4961 0074 DAE7     		b	.L362
 4962              	.LVL364:
 4963              	.L363:
4628:FreeRTOS/tasks.c **** 				}
 4964              		.loc 1 4628 6 is_stmt 1 view .LVU1414
 4965 0076 00F11801 		add	r1, r0, #24
 4966              	.LVL365:
4628:FreeRTOS/tasks.c **** 				}
 4967              		.loc 1 4628 6 is_stmt 0 view .LVU1415
 4968 007a 0848     		ldr	r0, .L368+16
 4969              	.LVL366:
4628:FreeRTOS/tasks.c **** 				}
 4970              		.loc 1 4628 6 view .LVU1416
 4971 007c FFF7FEFF 		bl	vListInsertEnd
 4972              	.LVL367:
 4973 0080 EFE7     		b	.L364
 4974              	.L365:
4644:FreeRTOS/tasks.c **** 					}
 4975              		.loc 1 4644 7 is_stmt 1 view .LVU1417
4644:FreeRTOS/tasks.c **** 					}
 4976              		.loc 1 4644 21 is_stmt 0 view .LVU1418
 4977 0082 074B     		ldr	r3, .L368+20
 4978 0084 0122     		movs	r2, #1
 4979 0086 1A60     		str	r2, [r3]
 4980 0088 D0E7     		b	.L362
 4981              	.L369:
 4982 008a 00BF     		.align	2
 4983              	.L368:
 4984 008c 00000000 		.word	.LANCHOR16
 4985 0090 00000000 		.word	.LANCHOR13
 4986 0094 00000000 		.word	.LANCHOR4
 4987 0098 00000000 		.word	.LANCHOR10
 4988 009c 00000000 		.word	.LANCHOR1
 4989 00a0 00000000 		.word	.LANCHOR20
 4990              		.cfi_endproc
 4991              	.LFE78:
 4993              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4994              		.align	1
 4995              		.global	xTaskNotifyStateClear
 4996              		.syntax unified
 4997              		.thumb
 4998              		.thumb_func
 5000              	xTaskNotifyStateClear:
 5001              	.LVL368:
 5002              	.LFB79:
4663:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 5003              		.loc 1 4663 2 is_stmt 1 view -0
 5004              		.cfi_startproc
 5005              		@ args = 0, pretend = 0, frame = 0
 5006              		@ frame_needed = 0, uses_anonymous_args = 0
4663:FreeRTOS/tasks.c **** 	TCB_t *pxTCB;
 5007              		.loc 1 4663 2 is_stmt 0 view .LVU1420
 5008 0000 10B5     		push	{r4, lr}
 5009              	.LCFI43:
 5010              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 200


 5011              		.cfi_offset 4, -8
 5012              		.cfi_offset 14, -4
4664:FreeRTOS/tasks.c **** 	BaseType_t xReturn;
 5013              		.loc 1 4664 2 is_stmt 1 view .LVU1421
4665:FreeRTOS/tasks.c **** 
 5014              		.loc 1 4665 2 view .LVU1422
4669:FreeRTOS/tasks.c **** 
 5015              		.loc 1 4669 3 view .LVU1423
4669:FreeRTOS/tasks.c **** 
 5016              		.loc 1 4669 11 is_stmt 0 view .LVU1424
 5017 0002 0446     		mov	r4, r0
 5018 0004 58B1     		cbz	r0, .L375
 5019              	.LVL369:
 5020              	.L371:
4671:FreeRTOS/tasks.c **** 		{
 5021              		.loc 1 4671 3 is_stmt 1 discriminator 4 view .LVU1425
 5022 0006 FFF7FEFF 		bl	vPortEnterCritical
 5023              	.LVL370:
4673:FreeRTOS/tasks.c **** 			{
 5024              		.loc 1 4673 4 discriminator 4 view .LVU1426
4673:FreeRTOS/tasks.c **** 			{
 5025              		.loc 1 4673 13 is_stmt 0 discriminator 4 view .LVU1427
 5026 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5027 000e DBB2     		uxtb	r3, r3
4673:FreeRTOS/tasks.c **** 			{
 5028              		.loc 1 4673 6 discriminator 4 view .LVU1428
 5029 0010 022B     		cmp	r3, #2
 5030 0012 07D0     		beq	.L376
4680:FreeRTOS/tasks.c **** 			}
 5031              		.loc 1 4680 13 view .LVU1429
 5032 0014 0024     		movs	r4, #0
 5033              	.LVL371:
 5034              	.L372:
4683:FreeRTOS/tasks.c **** 
 5035              		.loc 1 4683 3 is_stmt 1 view .LVU1430
 5036 0016 FFF7FEFF 		bl	vPortExitCritical
 5037              	.LVL372:
4685:FreeRTOS/tasks.c **** 	}
 5038              		.loc 1 4685 3 view .LVU1431
4686:FreeRTOS/tasks.c **** 
 5039              		.loc 1 4686 2 is_stmt 0 view .LVU1432
 5040 001a 2046     		mov	r0, r4
 5041 001c 10BD     		pop	{r4, pc}
 5042              	.LVL373:
 5043              	.L375:
4669:FreeRTOS/tasks.c **** 
 5044              		.loc 1 4669 11 discriminator 1 view .LVU1433
 5045 001e 044B     		ldr	r3, .L377
 5046 0020 1C68     		ldr	r4, [r3]
 5047              	.LVL374:
4669:FreeRTOS/tasks.c **** 
 5048              		.loc 1 4669 11 discriminator 1 view .LVU1434
 5049 0022 F0E7     		b	.L371
 5050              	.LVL375:
 5051              	.L376:
4675:FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 5052              		.loc 1 4675 5 is_stmt 1 view .LVU1435
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 201


4675:FreeRTOS/tasks.c **** 				xReturn = pdPASS;
 5053              		.loc 1 4675 26 is_stmt 0 view .LVU1436
 5054 0024 0023     		movs	r3, #0
 5055 0026 84F85030 		strb	r3, [r4, #80]
4676:FreeRTOS/tasks.c **** 			}
 5056              		.loc 1 4676 5 is_stmt 1 view .LVU1437
 5057              	.LVL376:
4676:FreeRTOS/tasks.c **** 			}
 5058              		.loc 1 4676 13 is_stmt 0 view .LVU1438
 5059 002a 0124     		movs	r4, #1
 5060              	.LVL377:
4676:FreeRTOS/tasks.c **** 			}
 5061              		.loc 1 4676 13 view .LVU1439
 5062 002c F3E7     		b	.L372
 5063              	.L378:
 5064 002e 00BF     		.align	2
 5065              	.L377:
 5066 0030 00000000 		.word	.LANCHOR10
 5067              		.cfi_endproc
 5068              	.LFE79:
 5070              		.global	pxCurrentTCB
 5071              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5072              		.align	2
 5073              		.set	.LANCHOR10,. + 0
 5076              	pxCurrentTCB:
 5077 0000 00000000 		.space	4
 5078              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5079              		.align	2
 5080              		.set	.LANCHOR2,. + 0
 5083              	pxDelayedTaskList:
 5084 0000 00000000 		.space	4
 5085              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5086              		.align	2
 5087              		.set	.LANCHOR8,. + 0
 5090              	pxOverflowDelayedTaskList:
 5091 0000 00000000 		.space	4
 5092              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5093              		.align	2
 5094              		.set	.LANCHOR4,. + 0
 5097              	pxReadyTasksLists:
 5098 0000 00000000 		.space	100
 5098      00000000 
 5098      00000000 
 5098      00000000 
 5098      00000000 
 5099              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5100              		.align	2
 5101              		.set	.LANCHOR9,. + 0
 5104              	uxCurrentNumberOfTasks:
 5105 0000 00000000 		.space	4
 5106              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5107              		.align	2
 5108              		.set	.LANCHOR15,. + 0
 5111              	uxDeletedTasksWaitingCleanUp:
 5112 0000 00000000 		.space	4
 5113              		.section	.bss.uxPendedTicks,"aw",%nobits
 5114              		.align	2
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 202


 5115              		.set	.LANCHOR19,. + 0
 5118              	uxPendedTicks:
 5119 0000 00000000 		.space	4
 5120              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5121              		.align	2
 5122              		.set	.LANCHOR16,. + 0
 5125              	uxSchedulerSuspended:
 5126 0000 00000000 		.space	4
 5127              		.section	.bss.uxTaskNumber,"aw",%nobits
 5128              		.align	2
 5129              		.set	.LANCHOR12,. + 0
 5132              	uxTaskNumber:
 5133 0000 00000000 		.space	4
 5134              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5135              		.align	2
 5136              		.set	.LANCHOR13,. + 0
 5139              	uxTopReadyPriority:
 5140 0000 00000000 		.space	4
 5141              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5142              		.align	2
 5143              		.set	.LANCHOR5,. + 0
 5146              	xDelayedTaskList1:
 5147 0000 00000000 		.space	20
 5147      00000000 
 5147      00000000 
 5147      00000000 
 5147      00000000 
 5148              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5149              		.align	2
 5150              		.set	.LANCHOR6,. + 0
 5153              	xDelayedTaskList2:
 5154 0000 00000000 		.space	20
 5154      00000000 
 5154      00000000 
 5154      00000000 
 5154      00000000 
 5155              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5156              		.align	2
 5157              		.set	.LANCHOR17,. + 0
 5160              	xIdleTaskHandle:
 5161 0000 00000000 		.space	4
 5162              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5163              		.align	2
 5164              		.set	.LANCHOR3,. + 0
 5167              	xNextTaskUnblockTime:
 5168 0000 00000000 		.space	4
 5169              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5170              		.align	2
 5171              		.set	.LANCHOR18,. + 0
 5174              	xNumOfOverflows:
 5175 0000 00000000 		.space	4
 5176              		.section	.bss.xPendingReadyList,"aw",%nobits
 5177              		.align	2
 5178              		.set	.LANCHOR1,. + 0
 5181              	xPendingReadyList:
 5182 0000 00000000 		.space	20
 5182      00000000 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 203


 5182      00000000 
 5182      00000000 
 5182      00000000 
 5183              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5184              		.align	2
 5185              		.set	.LANCHOR11,. + 0
 5188              	xSchedulerRunning:
 5189 0000 00000000 		.space	4
 5190              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5191              		.align	2
 5192              		.set	.LANCHOR0,. + 0
 5195              	xSuspendedTaskList:
 5196 0000 00000000 		.space	20
 5196      00000000 
 5196      00000000 
 5196      00000000 
 5196      00000000 
 5197              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5198              		.align	2
 5199              		.set	.LANCHOR7,. + 0
 5202              	xTasksWaitingTermination:
 5203 0000 00000000 		.space	20
 5203      00000000 
 5203      00000000 
 5203      00000000 
 5203      00000000 
 5204              		.section	.bss.xTickCount,"aw",%nobits
 5205              		.align	2
 5206              		.set	.LANCHOR14,. + 0
 5209              	xTickCount:
 5210 0000 00000000 		.space	4
 5211              		.section	.bss.xYieldPending,"aw",%nobits
 5212              		.align	2
 5213              		.set	.LANCHOR20,. + 0
 5216              	xYieldPending:
 5217 0000 00000000 		.space	4
 5218              		.text
 5219              	.Letext0:
 5220              		.file 3 "e:\\programdata\\gnu arm embedded toolchain\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\st
 5221              		.file 4 "e:\\programdata\\gnu arm embedded toolchain\\arm-none-eabi\\include\\machine\\_default_ty
 5222              		.file 5 "e:\\programdata\\gnu arm embedded toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 5223              		.file 6 "FreeRTOS/include/projdefs.h"
 5224              		.file 7 "FreeRTOS/include/list.h"
 5225              		.file 8 "FreeRTOS/include/task.h"
 5226              		.file 9 "FreeRTOS/include/portable.h"
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 204


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:18     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:23     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:83     .text.prvTaskIsTaskSuspended:00000024 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:89     .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:94     .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:137    .text.prvResetNextTaskUnblockTime:00000024 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:143    .text.prvDeleteTCB:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:148    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:180    .text.prvInitialiseNewTask:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:185    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:330    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:335    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:410    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:422    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:427    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:563    .text.prvAddNewTaskToReadyList:00000090 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:573    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:578    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:698    .text.prvAddCurrentTaskToDelayedList:0000007c $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:709    .text.xTaskCreate:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:715    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:837    .text.vTaskDelete:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:843    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:996    .text.vTaskDelete:000000a4 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1008   .text.uxTaskPriorityGet:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1014   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1060   .text.uxTaskPriorityGet:0000001c $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1065   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1071   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1145   .text.uxTaskPriorityGetFromISR:00000024 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1150   .text.vTaskPrioritySet:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1156   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1377   .text.vTaskPrioritySet:000000c8 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1384   .text.vTaskResume:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1390   .text.vTaskResume:00000000 vTaskResume
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1502   .text.vTaskResume:0000006c $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1509   .text.xTaskResumeFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1515   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1653   .text.xTaskResumeFromISR:00000074 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1662   .rodata.vTaskStartScheduler.str1.4:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1666   .text.vTaskStartScheduler:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1672   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1760   .text.vTaskStartScheduler:0000004c $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2808   .text.prvIdleTask:00000000 prvIdleTask
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1770   .text.vTaskEndScheduler:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1776   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1819   .text.vTaskEndScheduler:00000020 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1824   .text.vTaskSuspendAll:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1830   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1847   .text.vTaskSuspendAll:0000000c $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1852   .text.xTaskGetTickCount:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1858   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1879   .text.xTaskGetTickCount:00000008 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1884   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1890   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 205


C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1914   .text.xTaskGetTickCountFromISR:00000008 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1919   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1925   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1941   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1946   .text.pcTaskGetName:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1952   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1983   .text.pcTaskGetName:00000010 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1988   .text.xTaskIncrementTick:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:1994   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2228   .text.xTaskIncrementTick:000000d4 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2243   .text.xTaskResumeAll:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2249   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2454   .text.xTaskResumeAll:000000c0 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2466   .text.vTaskDelayUntil:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2472   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2606   .text.vTaskDelayUntil:0000005c $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2612   .text.vTaskDelay:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2618   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2687   .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2692   .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2795   .text.prvCheckTasksWaitingTermination:00000050 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2803   .text.prvIdleTask:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2856   .text.prvIdleTask:00000024 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2861   .text.vTaskSwitchContext:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2867   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2975   .text.vTaskSwitchContext:00000064 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2986   .text.vTaskSuspend:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:2992   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3151   .text.vTaskSuspend:000000a4 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3161   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3167   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3203   .text.vTaskPlaceOnEventList:00000018 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3208   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3214   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3258   .text.vTaskPlaceOnUnorderedEventList:00000020 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3263   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3269   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3370   .text.xTaskRemoveFromEventList:00000060 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3380   .text.xTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3386   .text.xTaskRemoveFromUnorderedEventList:00000000 xTaskRemoveFromUnorderedEventList
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3473   .text.xTaskRemoveFromUnorderedEventList:0000004c $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3481   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3487   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3511   .text.vTaskSetTimeOutState:00000010 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3517   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3523   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3631   .text.xTaskCheckForTimeOut:00000050 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3638   .text.vTaskMissedYield:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3644   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3661   .text.vTaskMissedYield:00000008 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3666   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3672   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3691   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3696   .text.vTaskPriorityInherit:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3702   .text.vTaskPriorityInherit:00000000 vTaskPriorityInherit
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3836   .text.vTaskPriorityInherit:00000094 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3843   .text.xTaskPriorityDisinherit:00000000 $t
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 206


C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3849   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3985   .text.xTaskPriorityDisinherit:00000078 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3991   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:3997   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4024   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4029   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4035   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4066   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4071   .text.ulTaskNotifyTake:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4077   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4199   .text.ulTaskNotifyTake:00000074 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4204   .text.xTaskNotifyWait:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4210   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4354   .text.xTaskNotifyWait:00000094 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4359   .text.xTaskGenericNotify:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4365   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4419   .text.xTaskGenericNotify:0000002a $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4423   .text.xTaskGenericNotify:0000002e $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4551   .text.xTaskGenericNotify:000000ac $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4558   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4564   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4641   .text.xTaskGenericNotifyFromISR:00000034 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4645   .text.xTaskGenericNotifyFromISR:00000038 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4800   .text.xTaskGenericNotifyFromISR:000000c8 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4810   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4816   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4984   .text.vTaskNotifyGiveFromISR:0000008c $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:4994   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5000   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5066   .text.xTaskNotifyStateClear:00000030 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5076   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5072   .bss.pxCurrentTCB:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5079   .bss.pxDelayedTaskList:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5083   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5086   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5090   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5093   .bss.pxReadyTasksLists:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5097   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5100   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5104   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5107   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5111   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5114   .bss.uxPendedTicks:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5118   .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5121   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5125   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5128   .bss.uxTaskNumber:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5132   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5135   .bss.uxTopReadyPriority:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5139   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5142   .bss.xDelayedTaskList1:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5146   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5149   .bss.xDelayedTaskList2:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5153   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5156   .bss.xIdleTaskHandle:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5160   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5163   .bss.xNextTaskUnblockTime:00000000 $d
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s 			page 207


C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5167   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5170   .bss.xNumOfOverflows:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5174   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5177   .bss.xPendingReadyList:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5181   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5184   .bss.xSchedulerRunning:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5188   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5191   .bss.xSuspendedTaskList:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5195   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5198   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5202   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5205   .bss.xTickCount:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5209   .bss.xTickCount:00000000 xTickCount
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5212   .bss.xYieldPending:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccvHjmMd.s:5216   .bss.xYieldPending:00000000 xYieldPending

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
xPortStartScheduler
vPortEndScheduler
