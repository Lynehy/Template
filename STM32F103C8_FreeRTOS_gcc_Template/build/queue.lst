ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvIsQueueFull,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	prvIsQueueFull:
  24              	.LVL0:
  25              	.LFB54:
  26              		.file 1 "FreeRTOS/queue.c"
   1:FreeRTOS/queue.c **** /*
   2:FreeRTOS/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:FreeRTOS/queue.c ****     All rights reserved
   4:FreeRTOS/queue.c **** 
   5:FreeRTOS/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/queue.c **** 
   7:FreeRTOS/queue.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/queue.c **** 
   9:FreeRTOS/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/queue.c **** 
  13:FreeRTOS/queue.c ****     ***************************************************************************
  14:FreeRTOS/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/queue.c ****     ***************************************************************************
  19:FreeRTOS/queue.c **** 
  20:FreeRTOS/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/queue.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/queue.c **** 
  25:FreeRTOS/queue.c ****     ***************************************************************************
  26:FreeRTOS/queue.c ****      *                                                                       *
  27:FreeRTOS/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/queue.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/queue.c ****      *                                                                       *
  32:FreeRTOS/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 2


  33:FreeRTOS/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/queue.c ****      *                                                                       *
  37:FreeRTOS/queue.c ****     ***************************************************************************
  38:FreeRTOS/queue.c **** 
  39:FreeRTOS/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/queue.c ****     defined configASSERT()?
  42:FreeRTOS/queue.c **** 
  43:FreeRTOS/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/queue.c ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/queue.c ****     participating in the support forum.
  46:FreeRTOS/queue.c **** 
  47:FreeRTOS/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/queue.c **** 
  52:FreeRTOS/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/queue.c **** 
  56:FreeRTOS/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/queue.c **** 
  59:FreeRTOS/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/queue.c **** 
  63:FreeRTOS/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/queue.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/queue.c **** 
  67:FreeRTOS/queue.c ****     1 tab == 4 spaces!
  68:FreeRTOS/queue.c **** */
  69:FreeRTOS/queue.c **** 
  70:FreeRTOS/queue.c **** #include <stdlib.h>
  71:FreeRTOS/queue.c **** #include <string.h>
  72:FreeRTOS/queue.c **** 
  73:FreeRTOS/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:FreeRTOS/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:FreeRTOS/queue.c **** task.h is included from an application file. */
  76:FreeRTOS/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:FreeRTOS/queue.c **** 
  78:FreeRTOS/queue.c **** #include "FreeRTOS.h"
  79:FreeRTOS/queue.c **** #include "task.h"
  80:FreeRTOS/queue.c **** #include "queue.h"
  81:FreeRTOS/queue.c **** 
  82:FreeRTOS/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:FreeRTOS/queue.c **** 	#include "croutine.h"
  84:FreeRTOS/queue.c **** #endif
  85:FreeRTOS/queue.c **** 
  86:FreeRTOS/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:FreeRTOS/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  88:FreeRTOS/queue.c **** header files above, but not in this file, in order to generate the correct
  89:FreeRTOS/queue.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 3


  90:FreeRTOS/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:FreeRTOS/queue.c **** 
  92:FreeRTOS/queue.c **** 
  93:FreeRTOS/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:FreeRTOS/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:FreeRTOS/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:FreeRTOS/queue.c **** 
  97:FreeRTOS/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:FreeRTOS/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:FreeRTOS/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:FreeRTOS/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:FreeRTOS/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:FreeRTOS/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:FreeRTOS/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:FreeRTOS/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:FreeRTOS/queue.c **** against the coding standard (although an exception to the standard has been
 106:FreeRTOS/queue.c **** permitted where the dual use also significantly changes the type of the
 107:FreeRTOS/queue.c **** structure member). */
 108:FreeRTOS/queue.c **** #define pxMutexHolder					pcTail
 109:FreeRTOS/queue.c **** #define uxQueueType						pcHead
 110:FreeRTOS/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:FreeRTOS/queue.c **** 
 112:FreeRTOS/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:FreeRTOS/queue.c **** zero. */
 114:FreeRTOS/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:FreeRTOS/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:FreeRTOS/queue.c **** 
 117:FreeRTOS/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:FreeRTOS/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:FreeRTOS/queue.c **** 	performed just because a higher priority task has been woken. */
 120:FreeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:FreeRTOS/queue.c **** #else
 122:FreeRTOS/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:FreeRTOS/queue.c **** #endif
 124:FreeRTOS/queue.c **** 
 125:FreeRTOS/queue.c **** /*
 126:FreeRTOS/queue.c ****  * Definition of the queue used by the scheduler.
 127:FreeRTOS/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:FreeRTOS/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:FreeRTOS/queue.c ****  */
 130:FreeRTOS/queue.c **** typedef struct QueueDefinition
 131:FreeRTOS/queue.c **** {
 132:FreeRTOS/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:FreeRTOS/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:FreeRTOS/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:FreeRTOS/queue.c **** 
 136:FreeRTOS/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:FreeRTOS/queue.c **** 	{
 138:FreeRTOS/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:FreeRTOS/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:FreeRTOS/queue.c **** 	} u;
 141:FreeRTOS/queue.c **** 
 142:FreeRTOS/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:FreeRTOS/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:FreeRTOS/queue.c **** 
 145:FreeRTOS/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:FreeRTOS/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 4


 147:FreeRTOS/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:FreeRTOS/queue.c **** 
 149:FreeRTOS/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:FreeRTOS/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:FreeRTOS/queue.c **** 
 152:FreeRTOS/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:FreeRTOS/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:FreeRTOS/queue.c **** 	#endif
 155:FreeRTOS/queue.c **** 
 156:FreeRTOS/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:FreeRTOS/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:FreeRTOS/queue.c **** 	#endif
 159:FreeRTOS/queue.c **** 
 160:FreeRTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:FreeRTOS/queue.c **** 		UBaseType_t uxQueueNumber;
 162:FreeRTOS/queue.c **** 		uint8_t ucQueueType;
 163:FreeRTOS/queue.c **** 	#endif
 164:FreeRTOS/queue.c **** 
 165:FreeRTOS/queue.c **** } xQUEUE;
 166:FreeRTOS/queue.c **** 
 167:FreeRTOS/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:FreeRTOS/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:FreeRTOS/queue.c **** typedef xQUEUE Queue_t;
 170:FreeRTOS/queue.c **** 
 171:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 172:FreeRTOS/queue.c **** 
 173:FreeRTOS/queue.c **** /*
 174:FreeRTOS/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:FreeRTOS/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:FreeRTOS/queue.c ****  */
 177:FreeRTOS/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:FreeRTOS/queue.c **** 
 179:FreeRTOS/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:FreeRTOS/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:FreeRTOS/queue.c **** 	more user friendly. */
 182:FreeRTOS/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:FreeRTOS/queue.c **** 	{
 184:FreeRTOS/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:FreeRTOS/queue.c **** 		QueueHandle_t xHandle;
 186:FreeRTOS/queue.c **** 	} xQueueRegistryItem;
 187:FreeRTOS/queue.c **** 
 188:FreeRTOS/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:FreeRTOS/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:FreeRTOS/queue.c **** 	debuggers. */
 191:FreeRTOS/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:FreeRTOS/queue.c **** 
 193:FreeRTOS/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:FreeRTOS/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:FreeRTOS/queue.c **** 	array position being vacant. */
 196:FreeRTOS/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:FreeRTOS/queue.c **** 
 198:FreeRTOS/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:FreeRTOS/queue.c **** 
 200:FreeRTOS/queue.c **** /*
 201:FreeRTOS/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 202:FreeRTOS/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:FreeRTOS/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 5


 204:FreeRTOS/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:FreeRTOS/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:FreeRTOS/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:FreeRTOS/queue.c ****  */
 208:FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 209:FreeRTOS/queue.c **** 
 210:FreeRTOS/queue.c **** /*
 211:FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:FreeRTOS/queue.c ****  *
 213:FreeRTOS/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:FreeRTOS/queue.c ****  */
 215:FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 216:FreeRTOS/queue.c **** 
 217:FreeRTOS/queue.c **** /*
 218:FreeRTOS/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:FreeRTOS/queue.c ****  *
 220:FreeRTOS/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:FreeRTOS/queue.c ****  */
 222:FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 223:FreeRTOS/queue.c **** 
 224:FreeRTOS/queue.c **** /*
 225:FreeRTOS/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:FreeRTOS/queue.c ****  * back of the queue.
 227:FreeRTOS/queue.c ****  */
 228:FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 229:FreeRTOS/queue.c **** 
 230:FreeRTOS/queue.c **** /*
 231:FreeRTOS/queue.c ****  * Copies an item out of a queue.
 232:FreeRTOS/queue.c ****  */
 233:FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 234:FreeRTOS/queue.c **** 
 235:FreeRTOS/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:FreeRTOS/queue.c **** 	/*
 237:FreeRTOS/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:FreeRTOS/queue.c **** 	 * the queue set that the queue contains data.
 239:FreeRTOS/queue.c **** 	 */
 240:FreeRTOS/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 241:FreeRTOS/queue.c **** #endif
 242:FreeRTOS/queue.c **** 
 243:FreeRTOS/queue.c **** /*
 244:FreeRTOS/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:FreeRTOS/queue.c ****  * dynamically to fill in the structure's members.
 246:FreeRTOS/queue.c ****  */
 247:FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 248:FreeRTOS/queue.c **** 
 249:FreeRTOS/queue.c **** /*
 250:FreeRTOS/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:FreeRTOS/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:FreeRTOS/queue.c ****  * as a mutex.
 253:FreeRTOS/queue.c ****  */
 254:FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:FreeRTOS/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 256:FreeRTOS/queue.c **** #endif
 257:FreeRTOS/queue.c **** 
 258:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 259:FreeRTOS/queue.c **** 
 260:FreeRTOS/queue.c **** /*
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 6


 261:FreeRTOS/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:FreeRTOS/queue.c ****  * accessing the queue event lists.
 263:FreeRTOS/queue.c ****  */
 264:FreeRTOS/queue.c **** #define prvLockQueue( pxQueue )								\
 265:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();									\
 266:FreeRTOS/queue.c **** 	{														\
 267:FreeRTOS/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:FreeRTOS/queue.c **** 		{													\
 269:FreeRTOS/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:FreeRTOS/queue.c **** 		}													\
 271:FreeRTOS/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:FreeRTOS/queue.c **** 		{													\
 273:FreeRTOS/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:FreeRTOS/queue.c **** 		}													\
 275:FreeRTOS/queue.c **** 	}														\
 276:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL()
 277:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 278:FreeRTOS/queue.c **** 
 279:FreeRTOS/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:FreeRTOS/queue.c **** {
 281:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 282:FreeRTOS/queue.c **** 
 283:FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 284:FreeRTOS/queue.c **** 
 285:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
 286:FreeRTOS/queue.c **** 	{
 287:FreeRTOS/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 288:FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 289:FreeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 290:FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 291:FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 292:FreeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 293:FreeRTOS/queue.c **** 
 294:FreeRTOS/queue.c **** 		if( xNewQueue == pdFALSE )
 295:FreeRTOS/queue.c **** 		{
 296:FreeRTOS/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:FreeRTOS/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:FreeRTOS/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:FreeRTOS/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:FreeRTOS/queue.c **** 			it will be possible to write to it. */
 301:FreeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 302:FreeRTOS/queue.c **** 			{
 303:FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 304:FreeRTOS/queue.c **** 				{
 305:FreeRTOS/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 306:FreeRTOS/queue.c **** 				}
 307:FreeRTOS/queue.c **** 				else
 308:FreeRTOS/queue.c **** 				{
 309:FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:FreeRTOS/queue.c **** 				}
 311:FreeRTOS/queue.c **** 			}
 312:FreeRTOS/queue.c **** 			else
 313:FreeRTOS/queue.c **** 			{
 314:FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:FreeRTOS/queue.c **** 			}
 316:FreeRTOS/queue.c **** 		}
 317:FreeRTOS/queue.c **** 		else
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 7


 318:FreeRTOS/queue.c **** 		{
 319:FreeRTOS/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 321:FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 322:FreeRTOS/queue.c **** 		}
 323:FreeRTOS/queue.c **** 	}
 324:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
 325:FreeRTOS/queue.c **** 
 326:FreeRTOS/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:FreeRTOS/queue.c **** 	versions. */
 328:FreeRTOS/queue.c **** 	return pdPASS;
 329:FreeRTOS/queue.c **** }
 330:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 331:FreeRTOS/queue.c **** 
 332:FreeRTOS/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:FreeRTOS/queue.c **** 
 334:FreeRTOS/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:FreeRTOS/queue.c **** 	{
 336:FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 337:FreeRTOS/queue.c **** 
 338:FreeRTOS/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:FreeRTOS/queue.c **** 
 340:FreeRTOS/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:FreeRTOS/queue.c **** 		supplied. */
 342:FreeRTOS/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:FreeRTOS/queue.c **** 
 344:FreeRTOS/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:FreeRTOS/queue.c **** 		should not be provided if the item size is 0. */
 346:FreeRTOS/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:FreeRTOS/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:FreeRTOS/queue.c **** 
 349:FreeRTOS/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:FreeRTOS/queue.c **** 		{
 351:FreeRTOS/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:FreeRTOS/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:FreeRTOS/queue.c **** 			the real queue and semaphore structures. */
 354:FreeRTOS/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:FreeRTOS/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:FreeRTOS/queue.c **** 		}
 357:FreeRTOS/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:FreeRTOS/queue.c **** 
 359:FreeRTOS/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:FreeRTOS/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:FreeRTOS/queue.c **** 		but is already set. */
 362:FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:FreeRTOS/queue.c **** 
 364:FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 365:FreeRTOS/queue.c **** 		{
 366:FreeRTOS/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:FreeRTOS/queue.c **** 			{
 368:FreeRTOS/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:FreeRTOS/queue.c **** 				note this queue was allocated statically in case the queue is
 370:FreeRTOS/queue.c **** 				later deleted. */
 371:FreeRTOS/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:FreeRTOS/queue.c **** 			}
 373:FreeRTOS/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 8


 375:FreeRTOS/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:FreeRTOS/queue.c **** 		}
 377:FreeRTOS/queue.c **** 
 378:FreeRTOS/queue.c **** 		return pxNewQueue;
 379:FreeRTOS/queue.c **** 	}
 380:FreeRTOS/queue.c **** 
 381:FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 383:FreeRTOS/queue.c **** 
 384:FreeRTOS/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:FreeRTOS/queue.c **** 
 386:FreeRTOS/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:FreeRTOS/queue.c **** 	{
 388:FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 389:FreeRTOS/queue.c **** 	size_t xQueueSizeInBytes;
 390:FreeRTOS/queue.c **** 	uint8_t *pucQueueStorage;
 391:FreeRTOS/queue.c **** 
 392:FreeRTOS/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 393:FreeRTOS/queue.c **** 
 394:FreeRTOS/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 395:FreeRTOS/queue.c **** 		{
 396:FreeRTOS/queue.c **** 			/* There is not going to be a queue storage area. */
 397:FreeRTOS/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 398:FreeRTOS/queue.c **** 		}
 399:FreeRTOS/queue.c **** 		else
 400:FreeRTOS/queue.c **** 		{
 401:FreeRTOS/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:FreeRTOS/queue.c **** 			can be in the queue at any time. */
 403:FreeRTOS/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 404:FreeRTOS/queue.c **** 		}
 405:FreeRTOS/queue.c **** 
 406:FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 407:FreeRTOS/queue.c **** 
 408:FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 409:FreeRTOS/queue.c **** 		{
 410:FreeRTOS/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:FreeRTOS/queue.c **** 			storage area. */
 412:FreeRTOS/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 413:FreeRTOS/queue.c **** 
 414:FreeRTOS/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:FreeRTOS/queue.c **** 			{
 416:FreeRTOS/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:FreeRTOS/queue.c **** 				note this task was created dynamically in case it is later
 418:FreeRTOS/queue.c **** 				deleted. */
 419:FreeRTOS/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:FreeRTOS/queue.c **** 			}
 421:FreeRTOS/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:FreeRTOS/queue.c **** 
 423:FreeRTOS/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 424:FreeRTOS/queue.c **** 		}
 425:FreeRTOS/queue.c **** 
 426:FreeRTOS/queue.c **** 		return pxNewQueue;
 427:FreeRTOS/queue.c **** 	}
 428:FreeRTOS/queue.c **** 
 429:FreeRTOS/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 430:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 431:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 9


 432:FreeRTOS/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:FreeRTOS/queue.c **** {
 434:FreeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:FreeRTOS/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:FreeRTOS/queue.c **** 	( void ) ucQueueType;
 437:FreeRTOS/queue.c **** 
 438:FreeRTOS/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 439:FreeRTOS/queue.c **** 	{
 440:FreeRTOS/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:FreeRTOS/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:FreeRTOS/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:FreeRTOS/queue.c **** 		value that is known to be within the memory map. */
 444:FreeRTOS/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 445:FreeRTOS/queue.c **** 	}
 446:FreeRTOS/queue.c **** 	else
 447:FreeRTOS/queue.c **** 	{
 448:FreeRTOS/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:FreeRTOS/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 450:FreeRTOS/queue.c **** 	}
 451:FreeRTOS/queue.c **** 
 452:FreeRTOS/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:FreeRTOS/queue.c **** 	defined. */
 454:FreeRTOS/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 455:FreeRTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 456:FreeRTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 457:FreeRTOS/queue.c **** 
 458:FreeRTOS/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:FreeRTOS/queue.c **** 	{
 460:FreeRTOS/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 461:FreeRTOS/queue.c **** 	}
 462:FreeRTOS/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:FreeRTOS/queue.c **** 
 464:FreeRTOS/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:FreeRTOS/queue.c **** 	{
 466:FreeRTOS/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:FreeRTOS/queue.c **** 	}
 468:FreeRTOS/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:FreeRTOS/queue.c **** 
 470:FreeRTOS/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:FreeRTOS/queue.c **** }
 472:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 473:FreeRTOS/queue.c **** 
 474:FreeRTOS/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:FreeRTOS/queue.c **** 
 476:FreeRTOS/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:FreeRTOS/queue.c **** 	{
 478:FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 479:FreeRTOS/queue.c **** 		{
 480:FreeRTOS/queue.c **** 			/* The queue create function will set all the queue structure members
 481:FreeRTOS/queue.c **** 			correctly for a generic queue, but this function is creating a
 482:FreeRTOS/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:FreeRTOS/queue.c **** 			in particular the information required for priority inheritance. */
 484:FreeRTOS/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 485:FreeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 486:FreeRTOS/queue.c **** 
 487:FreeRTOS/queue.c **** 			/* In case this is a recursive mutex. */
 488:FreeRTOS/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 10


 489:FreeRTOS/queue.c **** 
 490:FreeRTOS/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:FreeRTOS/queue.c **** 
 492:FreeRTOS/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:FreeRTOS/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 494:FreeRTOS/queue.c **** 		}
 495:FreeRTOS/queue.c **** 		else
 496:FreeRTOS/queue.c **** 		{
 497:FreeRTOS/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:FreeRTOS/queue.c **** 		}
 499:FreeRTOS/queue.c **** 	}
 500:FreeRTOS/queue.c **** 
 501:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 502:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 503:FreeRTOS/queue.c **** 
 504:FreeRTOS/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:FreeRTOS/queue.c **** 
 506:FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:FreeRTOS/queue.c **** 	{
 508:FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 509:FreeRTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 510:FreeRTOS/queue.c **** 
 511:FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 512:FreeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 513:FreeRTOS/queue.c **** 
 514:FreeRTOS/queue.c **** 		return pxNewQueue;
 515:FreeRTOS/queue.c **** 	}
 516:FreeRTOS/queue.c **** 
 517:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 518:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 519:FreeRTOS/queue.c **** 
 520:FreeRTOS/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:FreeRTOS/queue.c **** 
 522:FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:FreeRTOS/queue.c **** 	{
 524:FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 525:FreeRTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:FreeRTOS/queue.c **** 
 527:FreeRTOS/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:FreeRTOS/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:FreeRTOS/queue.c **** 		( void ) ucQueueType;
 530:FreeRTOS/queue.c **** 
 531:FreeRTOS/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:FreeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:FreeRTOS/queue.c **** 
 534:FreeRTOS/queue.c **** 		return pxNewQueue;
 535:FreeRTOS/queue.c **** 	}
 536:FreeRTOS/queue.c **** 
 537:FreeRTOS/queue.c **** #endif /* configUSE_MUTEXES */
 538:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 539:FreeRTOS/queue.c **** 
 540:FreeRTOS/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:FreeRTOS/queue.c **** 
 542:FreeRTOS/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:FreeRTOS/queue.c **** 	{
 544:FreeRTOS/queue.c **** 	void *pxReturn;
 545:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 11


 546:FreeRTOS/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:FreeRTOS/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:FreeRTOS/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:FreeRTOS/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:FreeRTOS/queue.c **** 		following critical section exiting and the function returning. */
 551:FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 552:FreeRTOS/queue.c **** 		{
 553:FreeRTOS/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:FreeRTOS/queue.c **** 			{
 555:FreeRTOS/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:FreeRTOS/queue.c **** 			}
 557:FreeRTOS/queue.c **** 			else
 558:FreeRTOS/queue.c **** 			{
 559:FreeRTOS/queue.c **** 				pxReturn = NULL;
 560:FreeRTOS/queue.c **** 			}
 561:FreeRTOS/queue.c **** 		}
 562:FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 563:FreeRTOS/queue.c **** 
 564:FreeRTOS/queue.c **** 		return pxReturn;
 565:FreeRTOS/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:FreeRTOS/queue.c **** 
 567:FreeRTOS/queue.c **** #endif
 568:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 569:FreeRTOS/queue.c **** 
 570:FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:FreeRTOS/queue.c **** 
 572:FreeRTOS/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:FreeRTOS/queue.c **** 	{
 574:FreeRTOS/queue.c **** 	BaseType_t xReturn;
 575:FreeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:FreeRTOS/queue.c **** 
 577:FreeRTOS/queue.c **** 		configASSERT( pxMutex );
 578:FreeRTOS/queue.c **** 
 579:FreeRTOS/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:FreeRTOS/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:FreeRTOS/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:FreeRTOS/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:FreeRTOS/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:FreeRTOS/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:FreeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:FreeRTOS/queue.c **** 		{
 587:FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:FreeRTOS/queue.c **** 
 589:FreeRTOS/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:FreeRTOS/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:FreeRTOS/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:FreeRTOS/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:FreeRTOS/queue.c **** 			uxRecursiveCallCount member. */
 594:FreeRTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:FreeRTOS/queue.c **** 
 596:FreeRTOS/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:FreeRTOS/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:FreeRTOS/queue.c **** 			{
 599:FreeRTOS/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:FreeRTOS/queue.c **** 				task that might be waiting to access the mutex. */
 601:FreeRTOS/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:FreeRTOS/queue.c **** 			}
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 12


 603:FreeRTOS/queue.c **** 			else
 604:FreeRTOS/queue.c **** 			{
 605:FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:FreeRTOS/queue.c **** 			}
 607:FreeRTOS/queue.c **** 
 608:FreeRTOS/queue.c **** 			xReturn = pdPASS;
 609:FreeRTOS/queue.c **** 		}
 610:FreeRTOS/queue.c **** 		else
 611:FreeRTOS/queue.c **** 		{
 612:FreeRTOS/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:FreeRTOS/queue.c **** 			holder. */
 614:FreeRTOS/queue.c **** 			xReturn = pdFAIL;
 615:FreeRTOS/queue.c **** 
 616:FreeRTOS/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:FreeRTOS/queue.c **** 		}
 618:FreeRTOS/queue.c **** 
 619:FreeRTOS/queue.c **** 		return xReturn;
 620:FreeRTOS/queue.c **** 	}
 621:FreeRTOS/queue.c **** 
 622:FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 624:FreeRTOS/queue.c **** 
 625:FreeRTOS/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:FreeRTOS/queue.c **** 
 627:FreeRTOS/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:FreeRTOS/queue.c **** 	{
 629:FreeRTOS/queue.c **** 	BaseType_t xReturn;
 630:FreeRTOS/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:FreeRTOS/queue.c **** 
 632:FreeRTOS/queue.c **** 		configASSERT( pxMutex );
 633:FreeRTOS/queue.c **** 
 634:FreeRTOS/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:FreeRTOS/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:FreeRTOS/queue.c **** 
 637:FreeRTOS/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:FreeRTOS/queue.c **** 
 639:FreeRTOS/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:FreeRTOS/queue.c **** 		{
 641:FreeRTOS/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:FreeRTOS/queue.c **** 			xReturn = pdPASS;
 643:FreeRTOS/queue.c **** 		}
 644:FreeRTOS/queue.c **** 		else
 645:FreeRTOS/queue.c **** 		{
 646:FreeRTOS/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:FreeRTOS/queue.c **** 
 648:FreeRTOS/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:FreeRTOS/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:FreeRTOS/queue.c **** 			before reaching here. */
 651:FreeRTOS/queue.c **** 			if( xReturn != pdFAIL )
 652:FreeRTOS/queue.c **** 			{
 653:FreeRTOS/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:FreeRTOS/queue.c **** 			}
 655:FreeRTOS/queue.c **** 			else
 656:FreeRTOS/queue.c **** 			{
 657:FreeRTOS/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 658:FreeRTOS/queue.c **** 			}
 659:FreeRTOS/queue.c **** 		}
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 13


 660:FreeRTOS/queue.c **** 
 661:FreeRTOS/queue.c **** 		return xReturn;
 662:FreeRTOS/queue.c **** 	}
 663:FreeRTOS/queue.c **** 
 664:FreeRTOS/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 666:FreeRTOS/queue.c **** 
 667:FreeRTOS/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:FreeRTOS/queue.c **** 
 669:FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:FreeRTOS/queue.c **** 	{
 671:FreeRTOS/queue.c **** 	QueueHandle_t xHandle;
 672:FreeRTOS/queue.c **** 
 673:FreeRTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:FreeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:FreeRTOS/queue.c **** 
 676:FreeRTOS/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:FreeRTOS/queue.c **** 
 678:FreeRTOS/queue.c **** 		if( xHandle != NULL )
 679:FreeRTOS/queue.c **** 		{
 680:FreeRTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:FreeRTOS/queue.c **** 
 682:FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:FreeRTOS/queue.c **** 		}
 684:FreeRTOS/queue.c **** 		else
 685:FreeRTOS/queue.c **** 		{
 686:FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:FreeRTOS/queue.c **** 		}
 688:FreeRTOS/queue.c **** 
 689:FreeRTOS/queue.c **** 		return xHandle;
 690:FreeRTOS/queue.c **** 	}
 691:FreeRTOS/queue.c **** 
 692:FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 694:FreeRTOS/queue.c **** 
 695:FreeRTOS/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:FreeRTOS/queue.c **** 
 697:FreeRTOS/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:FreeRTOS/queue.c **** 	{
 699:FreeRTOS/queue.c **** 	QueueHandle_t xHandle;
 700:FreeRTOS/queue.c **** 
 701:FreeRTOS/queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:FreeRTOS/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:FreeRTOS/queue.c **** 
 704:FreeRTOS/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:FreeRTOS/queue.c **** 
 706:FreeRTOS/queue.c **** 		if( xHandle != NULL )
 707:FreeRTOS/queue.c **** 		{
 708:FreeRTOS/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:FreeRTOS/queue.c **** 
 710:FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:FreeRTOS/queue.c **** 		}
 712:FreeRTOS/queue.c **** 		else
 713:FreeRTOS/queue.c **** 		{
 714:FreeRTOS/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 715:FreeRTOS/queue.c **** 		}
 716:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 14


 717:FreeRTOS/queue.c **** 		return xHandle;
 718:FreeRTOS/queue.c **** 	}
 719:FreeRTOS/queue.c **** 
 720:FreeRTOS/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 722:FreeRTOS/queue.c **** 
 723:FreeRTOS/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:FreeRTOS/queue.c **** {
 725:FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 726:FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 727:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 728:FreeRTOS/queue.c **** 
 729:FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 730:FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 731:FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 732:FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:FreeRTOS/queue.c **** 	{
 734:FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 735:FreeRTOS/queue.c **** 	}
 736:FreeRTOS/queue.c **** 	#endif
 737:FreeRTOS/queue.c **** 
 738:FreeRTOS/queue.c **** 
 739:FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
 741:FreeRTOS/queue.c **** 	of execution time efficiency. */
 742:FreeRTOS/queue.c **** 	for( ;; )
 743:FreeRTOS/queue.c **** 	{
 744:FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
 745:FreeRTOS/queue.c **** 		{
 746:FreeRTOS/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:FreeRTOS/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:FreeRTOS/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:FreeRTOS/queue.c **** 			queue is full. */
 750:FreeRTOS/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 751:FreeRTOS/queue.c **** 			{
 752:FreeRTOS/queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:FreeRTOS/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 754:FreeRTOS/queue.c **** 
 755:FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:FreeRTOS/queue.c **** 				{
 757:FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:FreeRTOS/queue.c **** 					{
 759:FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:FreeRTOS/queue.c **** 						{
 761:FreeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:FreeRTOS/queue.c **** 							to the queue set caused a higher priority task to
 763:FreeRTOS/queue.c **** 							unblock. A context switch is required. */
 764:FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:FreeRTOS/queue.c **** 						}
 766:FreeRTOS/queue.c **** 						else
 767:FreeRTOS/queue.c **** 						{
 768:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:FreeRTOS/queue.c **** 						}
 770:FreeRTOS/queue.c **** 					}
 771:FreeRTOS/queue.c **** 					else
 772:FreeRTOS/queue.c **** 					{
 773:FreeRTOS/queue.c **** 						/* If there was a task waiting for data to arrive on the
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 15


 774:FreeRTOS/queue.c **** 						queue then unblock it now. */
 775:FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:FreeRTOS/queue.c **** 						{
 777:FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:FreeRTOS/queue.c **** 							{
 779:FreeRTOS/queue.c **** 								/* The unblocked task has a priority higher than
 780:FreeRTOS/queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:FreeRTOS/queue.c **** 								do this from within the critical section - the
 782:FreeRTOS/queue.c **** 								kernel takes care of that. */
 783:FreeRTOS/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:FreeRTOS/queue.c **** 							}
 785:FreeRTOS/queue.c **** 							else
 786:FreeRTOS/queue.c **** 							{
 787:FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:FreeRTOS/queue.c **** 							}
 789:FreeRTOS/queue.c **** 						}
 790:FreeRTOS/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:FreeRTOS/queue.c **** 						{
 792:FreeRTOS/queue.c **** 							/* This path is a special case that will only get
 793:FreeRTOS/queue.c **** 							executed if the task was holding multiple mutexes
 794:FreeRTOS/queue.c **** 							and the mutexes were given back in an order that is
 795:FreeRTOS/queue.c **** 							different to that in which they were taken. */
 796:FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:FreeRTOS/queue.c **** 						}
 798:FreeRTOS/queue.c **** 						else
 799:FreeRTOS/queue.c **** 						{
 800:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:FreeRTOS/queue.c **** 						}
 802:FreeRTOS/queue.c **** 					}
 803:FreeRTOS/queue.c **** 				}
 804:FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:FreeRTOS/queue.c **** 				{
 806:FreeRTOS/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:FreeRTOS/queue.c **** 					queue then unblock it now. */
 808:FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 809:FreeRTOS/queue.c **** 					{
 810:FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 811:FreeRTOS/queue.c **** 						{
 812:FreeRTOS/queue.c **** 							/* The unblocked task has a priority higher than
 813:FreeRTOS/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:FreeRTOS/queue.c **** 							this from within the critical section - the kernel
 815:FreeRTOS/queue.c **** 							takes care of that. */
 816:FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 817:FreeRTOS/queue.c **** 						}
 818:FreeRTOS/queue.c **** 						else
 819:FreeRTOS/queue.c **** 						{
 820:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:FreeRTOS/queue.c **** 						}
 822:FreeRTOS/queue.c **** 					}
 823:FreeRTOS/queue.c **** 					else if( xYieldRequired != pdFALSE )
 824:FreeRTOS/queue.c **** 					{
 825:FreeRTOS/queue.c **** 						/* This path is a special case that will only get
 826:FreeRTOS/queue.c **** 						executed if the task was holding multiple mutexes and
 827:FreeRTOS/queue.c **** 						the mutexes were given back in an order that is
 828:FreeRTOS/queue.c **** 						different to that in which they were taken. */
 829:FreeRTOS/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 830:FreeRTOS/queue.c **** 					}
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 16


 831:FreeRTOS/queue.c **** 					else
 832:FreeRTOS/queue.c **** 					{
 833:FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:FreeRTOS/queue.c **** 					}
 835:FreeRTOS/queue.c **** 				}
 836:FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:FreeRTOS/queue.c **** 
 838:FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
 839:FreeRTOS/queue.c **** 				return pdPASS;
 840:FreeRTOS/queue.c **** 			}
 841:FreeRTOS/queue.c **** 			else
 842:FreeRTOS/queue.c **** 			{
 843:FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 844:FreeRTOS/queue.c **** 				{
 845:FreeRTOS/queue.c **** 					/* The queue was full and no block time is specified (or
 846:FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
 847:FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
 848:FreeRTOS/queue.c **** 
 849:FreeRTOS/queue.c **** 					/* Return to the original privilege level before exiting
 850:FreeRTOS/queue.c **** 					the function. */
 851:FreeRTOS/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:FreeRTOS/queue.c **** 					return errQUEUE_FULL;
 853:FreeRTOS/queue.c **** 				}
 854:FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 855:FreeRTOS/queue.c **** 				{
 856:FreeRTOS/queue.c **** 					/* The queue was full and a block time was specified so
 857:FreeRTOS/queue.c **** 					configure the timeout structure. */
 858:FreeRTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 859:FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 860:FreeRTOS/queue.c **** 				}
 861:FreeRTOS/queue.c **** 				else
 862:FreeRTOS/queue.c **** 				{
 863:FreeRTOS/queue.c **** 					/* Entry time was already set. */
 864:FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:FreeRTOS/queue.c **** 				}
 866:FreeRTOS/queue.c **** 			}
 867:FreeRTOS/queue.c **** 		}
 868:FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
 869:FreeRTOS/queue.c **** 
 870:FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:FreeRTOS/queue.c **** 		now the critical section has been exited. */
 872:FreeRTOS/queue.c **** 
 873:FreeRTOS/queue.c **** 		vTaskSuspendAll();
 874:FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 875:FreeRTOS/queue.c **** 
 876:FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 878:FreeRTOS/queue.c **** 		{
 879:FreeRTOS/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 880:FreeRTOS/queue.c **** 			{
 881:FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 883:FreeRTOS/queue.c **** 
 884:FreeRTOS/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:FreeRTOS/queue.c **** 				event list.  It is possible	that interrupts occurring now
 886:FreeRTOS/queue.c **** 				remove this task from the event	list again - but as the
 887:FreeRTOS/queue.c **** 				scheduler is suspended the task will go onto the pending
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 17


 888:FreeRTOS/queue.c **** 				ready last instead of the actual ready list. */
 889:FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 890:FreeRTOS/queue.c **** 
 891:FreeRTOS/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:FreeRTOS/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:FreeRTOS/queue.c **** 				task is already in a ready list before it yields - in which
 894:FreeRTOS/queue.c **** 				case the yield will not cause a context switch unless there
 895:FreeRTOS/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 897:FreeRTOS/queue.c **** 				{
 898:FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
 899:FreeRTOS/queue.c **** 				}
 900:FreeRTOS/queue.c **** 			}
 901:FreeRTOS/queue.c **** 			else
 902:FreeRTOS/queue.c **** 			{
 903:FreeRTOS/queue.c **** 				/* Try again. */
 904:FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 905:FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 906:FreeRTOS/queue.c **** 			}
 907:FreeRTOS/queue.c **** 		}
 908:FreeRTOS/queue.c **** 		else
 909:FreeRTOS/queue.c **** 		{
 910:FreeRTOS/queue.c **** 			/* The timeout has expired. */
 911:FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
 912:FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 913:FreeRTOS/queue.c **** 
 914:FreeRTOS/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:FreeRTOS/queue.c **** 			return errQUEUE_FULL;
 916:FreeRTOS/queue.c **** 		}
 917:FreeRTOS/queue.c **** 	}
 918:FreeRTOS/queue.c **** }
 919:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 920:FreeRTOS/queue.c **** 
 921:FreeRTOS/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:FreeRTOS/queue.c **** {
 923:FreeRTOS/queue.c **** BaseType_t xReturn;
 924:FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 926:FreeRTOS/queue.c **** 
 927:FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 928:FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 929:FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 930:FreeRTOS/queue.c **** 
 931:FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 943:FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 18


 945:FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 946:FreeRTOS/queue.c **** 
 947:FreeRTOS/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:FreeRTOS/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:FreeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:FreeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:FreeRTOS/queue.c **** 	post). */
 952:FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 953:FreeRTOS/queue.c **** 	{
 954:FreeRTOS/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 955:FreeRTOS/queue.c **** 		{
 956:FreeRTOS/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 957:FreeRTOS/queue.c **** 
 958:FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:FreeRTOS/queue.c **** 
 960:FreeRTOS/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:FreeRTOS/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:FreeRTOS/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:FreeRTOS/queue.c **** 			called here even though the disinherit function does not check if
 964:FreeRTOS/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:FreeRTOS/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 966:FreeRTOS/queue.c **** 
 967:FreeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:FreeRTOS/queue.c **** 			be done when the queue is unlocked later. */
 969:FreeRTOS/queue.c **** 			if( cTxLock == queueUNLOCKED )
 970:FreeRTOS/queue.c **** 			{
 971:FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:FreeRTOS/queue.c **** 				{
 973:FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:FreeRTOS/queue.c **** 					{
 975:FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:FreeRTOS/queue.c **** 						{
 977:FreeRTOS/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:FreeRTOS/queue.c **** 							to the queue set caused a higher priority task to
 979:FreeRTOS/queue.c **** 							unblock.  A context switch is required. */
 980:FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:FreeRTOS/queue.c **** 							{
 982:FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:FreeRTOS/queue.c **** 							}
 984:FreeRTOS/queue.c **** 							else
 985:FreeRTOS/queue.c **** 							{
 986:FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:FreeRTOS/queue.c **** 							}
 988:FreeRTOS/queue.c **** 						}
 989:FreeRTOS/queue.c **** 						else
 990:FreeRTOS/queue.c **** 						{
 991:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:FreeRTOS/queue.c **** 						}
 993:FreeRTOS/queue.c **** 					}
 994:FreeRTOS/queue.c **** 					else
 995:FreeRTOS/queue.c **** 					{
 996:FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:FreeRTOS/queue.c **** 						{
 998:FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:FreeRTOS/queue.c **** 							{
1000:FreeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1001:FreeRTOS/queue.c **** 								record that a context switch is required. */
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 19


1002:FreeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:FreeRTOS/queue.c **** 								{
1004:FreeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:FreeRTOS/queue.c **** 								}
1006:FreeRTOS/queue.c **** 								else
1007:FreeRTOS/queue.c **** 								{
1008:FreeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:FreeRTOS/queue.c **** 								}
1010:FreeRTOS/queue.c **** 							}
1011:FreeRTOS/queue.c **** 							else
1012:FreeRTOS/queue.c **** 							{
1013:FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:FreeRTOS/queue.c **** 							}
1015:FreeRTOS/queue.c **** 						}
1016:FreeRTOS/queue.c **** 						else
1017:FreeRTOS/queue.c **** 						{
1018:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:FreeRTOS/queue.c **** 						}
1020:FreeRTOS/queue.c **** 					}
1021:FreeRTOS/queue.c **** 				}
1022:FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:FreeRTOS/queue.c **** 				{
1024:FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1025:FreeRTOS/queue.c **** 					{
1026:FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1027:FreeRTOS/queue.c **** 						{
1028:FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:FreeRTOS/queue.c **** 							context	switch is required. */
1030:FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1031:FreeRTOS/queue.c **** 							{
1032:FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1033:FreeRTOS/queue.c **** 							}
1034:FreeRTOS/queue.c **** 							else
1035:FreeRTOS/queue.c **** 							{
1036:FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:FreeRTOS/queue.c **** 							}
1038:FreeRTOS/queue.c **** 						}
1039:FreeRTOS/queue.c **** 						else
1040:FreeRTOS/queue.c **** 						{
1041:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:FreeRTOS/queue.c **** 						}
1043:FreeRTOS/queue.c **** 					}
1044:FreeRTOS/queue.c **** 					else
1045:FreeRTOS/queue.c **** 					{
1046:FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:FreeRTOS/queue.c **** 					}
1048:FreeRTOS/queue.c **** 				}
1049:FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:FreeRTOS/queue.c **** 			}
1051:FreeRTOS/queue.c **** 			else
1052:FreeRTOS/queue.c **** 			{
1053:FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:FreeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1055:FreeRTOS/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1056:FreeRTOS/queue.c **** 			}
1057:FreeRTOS/queue.c **** 
1058:FreeRTOS/queue.c **** 			xReturn = pdPASS;
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 20


1059:FreeRTOS/queue.c **** 		}
1060:FreeRTOS/queue.c **** 		else
1061:FreeRTOS/queue.c **** 		{
1062:FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1064:FreeRTOS/queue.c **** 		}
1065:FreeRTOS/queue.c **** 	}
1066:FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:FreeRTOS/queue.c **** 
1068:FreeRTOS/queue.c **** 	return xReturn;
1069:FreeRTOS/queue.c **** }
1070:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1071:FreeRTOS/queue.c **** 
1072:FreeRTOS/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:FreeRTOS/queue.c **** {
1074:FreeRTOS/queue.c **** BaseType_t xReturn;
1075:FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1077:FreeRTOS/queue.c **** 
1078:FreeRTOS/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:FreeRTOS/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:FreeRTOS/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:FreeRTOS/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:FreeRTOS/queue.c **** 	post). */
1083:FreeRTOS/queue.c **** 
1084:FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1085:FreeRTOS/queue.c **** 
1086:FreeRTOS/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:FreeRTOS/queue.c **** 	if the item size is not 0. */
1088:FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1089:FreeRTOS/queue.c **** 
1090:FreeRTOS/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:FreeRTOS/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:FreeRTOS/queue.c **** 	interrupts, only tasks. */
1093:FreeRTOS/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1094:FreeRTOS/queue.c **** 
1095:FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1110:FreeRTOS/queue.c **** 
1111:FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1112:FreeRTOS/queue.c **** 	{
1113:FreeRTOS/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1114:FreeRTOS/queue.c **** 
1115:FreeRTOS/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 21


1116:FreeRTOS/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:FreeRTOS/queue.c **** 		space'. */
1118:FreeRTOS/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1119:FreeRTOS/queue.c **** 		{
1120:FreeRTOS/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1121:FreeRTOS/queue.c **** 
1122:FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:FreeRTOS/queue.c **** 
1124:FreeRTOS/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:FreeRTOS/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:FreeRTOS/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:FreeRTOS/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:FreeRTOS/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:FreeRTOS/queue.c **** 			messages (semaphores) available. */
1130:FreeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1131:FreeRTOS/queue.c **** 
1132:FreeRTOS/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:FreeRTOS/queue.c **** 			be done when the queue is unlocked later. */
1134:FreeRTOS/queue.c **** 			if( cTxLock == queueUNLOCKED )
1135:FreeRTOS/queue.c **** 			{
1136:FreeRTOS/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:FreeRTOS/queue.c **** 				{
1138:FreeRTOS/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:FreeRTOS/queue.c **** 					{
1140:FreeRTOS/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:FreeRTOS/queue.c **** 						{
1142:FreeRTOS/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:FreeRTOS/queue.c **** 							posting	to the queue set caused a higher priority
1144:FreeRTOS/queue.c **** 							task to	unblock.  A context switch is required. */
1145:FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:FreeRTOS/queue.c **** 							{
1147:FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:FreeRTOS/queue.c **** 							}
1149:FreeRTOS/queue.c **** 							else
1150:FreeRTOS/queue.c **** 							{
1151:FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:FreeRTOS/queue.c **** 							}
1153:FreeRTOS/queue.c **** 						}
1154:FreeRTOS/queue.c **** 						else
1155:FreeRTOS/queue.c **** 						{
1156:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:FreeRTOS/queue.c **** 						}
1158:FreeRTOS/queue.c **** 					}
1159:FreeRTOS/queue.c **** 					else
1160:FreeRTOS/queue.c **** 					{
1161:FreeRTOS/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:FreeRTOS/queue.c **** 						{
1163:FreeRTOS/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:FreeRTOS/queue.c **** 							{
1165:FreeRTOS/queue.c **** 								/* The task waiting has a higher priority so
1166:FreeRTOS/queue.c **** 								record that a context switch is required. */
1167:FreeRTOS/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:FreeRTOS/queue.c **** 								{
1169:FreeRTOS/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:FreeRTOS/queue.c **** 								}
1171:FreeRTOS/queue.c **** 								else
1172:FreeRTOS/queue.c **** 								{
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 22


1173:FreeRTOS/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:FreeRTOS/queue.c **** 								}
1175:FreeRTOS/queue.c **** 							}
1176:FreeRTOS/queue.c **** 							else
1177:FreeRTOS/queue.c **** 							{
1178:FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:FreeRTOS/queue.c **** 							}
1180:FreeRTOS/queue.c **** 						}
1181:FreeRTOS/queue.c **** 						else
1182:FreeRTOS/queue.c **** 						{
1183:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:FreeRTOS/queue.c **** 						}
1185:FreeRTOS/queue.c **** 					}
1186:FreeRTOS/queue.c **** 				}
1187:FreeRTOS/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:FreeRTOS/queue.c **** 				{
1189:FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1190:FreeRTOS/queue.c **** 					{
1191:FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1192:FreeRTOS/queue.c **** 						{
1193:FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:FreeRTOS/queue.c **** 							context	switch is required. */
1195:FreeRTOS/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1196:FreeRTOS/queue.c **** 							{
1197:FreeRTOS/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1198:FreeRTOS/queue.c **** 							}
1199:FreeRTOS/queue.c **** 							else
1200:FreeRTOS/queue.c **** 							{
1201:FreeRTOS/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:FreeRTOS/queue.c **** 							}
1203:FreeRTOS/queue.c **** 						}
1204:FreeRTOS/queue.c **** 						else
1205:FreeRTOS/queue.c **** 						{
1206:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:FreeRTOS/queue.c **** 						}
1208:FreeRTOS/queue.c **** 					}
1209:FreeRTOS/queue.c **** 					else
1210:FreeRTOS/queue.c **** 					{
1211:FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:FreeRTOS/queue.c **** 					}
1213:FreeRTOS/queue.c **** 				}
1214:FreeRTOS/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:FreeRTOS/queue.c **** 			}
1216:FreeRTOS/queue.c **** 			else
1217:FreeRTOS/queue.c **** 			{
1218:FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:FreeRTOS/queue.c **** 				knows that data was posted while it was locked. */
1220:FreeRTOS/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1221:FreeRTOS/queue.c **** 			}
1222:FreeRTOS/queue.c **** 
1223:FreeRTOS/queue.c **** 			xReturn = pdPASS;
1224:FreeRTOS/queue.c **** 		}
1225:FreeRTOS/queue.c **** 		else
1226:FreeRTOS/queue.c **** 		{
1227:FreeRTOS/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1228:FreeRTOS/queue.c **** 			xReturn = errQUEUE_FULL;
1229:FreeRTOS/queue.c **** 		}
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 23


1230:FreeRTOS/queue.c **** 	}
1231:FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:FreeRTOS/queue.c **** 
1233:FreeRTOS/queue.c **** 	return xReturn;
1234:FreeRTOS/queue.c **** }
1235:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1236:FreeRTOS/queue.c **** 
1237:FreeRTOS/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:FreeRTOS/queue.c **** {
1239:FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1240:FreeRTOS/queue.c **** TimeOut_t xTimeOut;
1241:FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1242:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1243:FreeRTOS/queue.c **** 
1244:FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1245:FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1246:FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:FreeRTOS/queue.c **** 	{
1248:FreeRTOS/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1249:FreeRTOS/queue.c **** 	}
1250:FreeRTOS/queue.c **** 	#endif
1251:FreeRTOS/queue.c **** 
1252:FreeRTOS/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:FreeRTOS/queue.c **** 	statements within the function itself.  This is done in the interest
1254:FreeRTOS/queue.c **** 	of execution time efficiency. */
1255:FreeRTOS/queue.c **** 
1256:FreeRTOS/queue.c **** 	for( ;; )
1257:FreeRTOS/queue.c **** 	{
1258:FreeRTOS/queue.c **** 		taskENTER_CRITICAL();
1259:FreeRTOS/queue.c **** 		{
1260:FreeRTOS/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1261:FreeRTOS/queue.c **** 
1262:FreeRTOS/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:FreeRTOS/queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:FreeRTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1265:FreeRTOS/queue.c **** 			{
1266:FreeRTOS/queue.c **** 				/* Remember the read position in case the queue is only being
1267:FreeRTOS/queue.c **** 				peeked. */
1268:FreeRTOS/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1269:FreeRTOS/queue.c **** 
1270:FreeRTOS/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1271:FreeRTOS/queue.c **** 
1272:FreeRTOS/queue.c **** 				if( xJustPeeking == pdFALSE )
1273:FreeRTOS/queue.c **** 				{
1274:FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:FreeRTOS/queue.c **** 
1276:FreeRTOS/queue.c **** 					/* Actually removing data, not just peeking. */
1277:FreeRTOS/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1278:FreeRTOS/queue.c **** 
1279:FreeRTOS/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:FreeRTOS/queue.c **** 					{
1281:FreeRTOS/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1282:FreeRTOS/queue.c **** 						{
1283:FreeRTOS/queue.c **** 							/* Record the information required to implement
1284:FreeRTOS/queue.c **** 							priority inheritance should it become necessary. */
1285:FreeRTOS/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1286:FreeRTOS/queue.c **** 						}
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 24


1287:FreeRTOS/queue.c **** 						else
1288:FreeRTOS/queue.c **** 						{
1289:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:FreeRTOS/queue.c **** 						}
1291:FreeRTOS/queue.c **** 					}
1292:FreeRTOS/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:FreeRTOS/queue.c **** 
1294:FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1295:FreeRTOS/queue.c **** 					{
1296:FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1297:FreeRTOS/queue.c **** 						{
1298:FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1299:FreeRTOS/queue.c **** 						}
1300:FreeRTOS/queue.c **** 						else
1301:FreeRTOS/queue.c **** 						{
1302:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:FreeRTOS/queue.c **** 						}
1304:FreeRTOS/queue.c **** 					}
1305:FreeRTOS/queue.c **** 					else
1306:FreeRTOS/queue.c **** 					{
1307:FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:FreeRTOS/queue.c **** 					}
1309:FreeRTOS/queue.c **** 				}
1310:FreeRTOS/queue.c **** 				else
1311:FreeRTOS/queue.c **** 				{
1312:FreeRTOS/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:FreeRTOS/queue.c **** 
1314:FreeRTOS/queue.c **** 					/* The data is not being removed, so reset the read
1315:FreeRTOS/queue.c **** 					pointer. */
1316:FreeRTOS/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1317:FreeRTOS/queue.c **** 
1318:FreeRTOS/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:FreeRTOS/queue.c **** 					any other tasks waiting for the data. */
1320:FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1321:FreeRTOS/queue.c **** 					{
1322:FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1323:FreeRTOS/queue.c **** 						{
1324:FreeRTOS/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:FreeRTOS/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1326:FreeRTOS/queue.c **** 						}
1327:FreeRTOS/queue.c **** 						else
1328:FreeRTOS/queue.c **** 						{
1329:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:FreeRTOS/queue.c **** 						}
1331:FreeRTOS/queue.c **** 					}
1332:FreeRTOS/queue.c **** 					else
1333:FreeRTOS/queue.c **** 					{
1334:FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:FreeRTOS/queue.c **** 					}
1336:FreeRTOS/queue.c **** 				}
1337:FreeRTOS/queue.c **** 
1338:FreeRTOS/queue.c **** 				taskEXIT_CRITICAL();
1339:FreeRTOS/queue.c **** 				return pdPASS;
1340:FreeRTOS/queue.c **** 			}
1341:FreeRTOS/queue.c **** 			else
1342:FreeRTOS/queue.c **** 			{
1343:FreeRTOS/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 25


1344:FreeRTOS/queue.c **** 				{
1345:FreeRTOS/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:FreeRTOS/queue.c **** 					the block time has expired) so leave now. */
1347:FreeRTOS/queue.c **** 					taskEXIT_CRITICAL();
1348:FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
1350:FreeRTOS/queue.c **** 				}
1351:FreeRTOS/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1352:FreeRTOS/queue.c **** 				{
1353:FreeRTOS/queue.c **** 					/* The queue was empty and a block time was specified so
1354:FreeRTOS/queue.c **** 					configure the timeout structure. */
1355:FreeRTOS/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1356:FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
1357:FreeRTOS/queue.c **** 				}
1358:FreeRTOS/queue.c **** 				else
1359:FreeRTOS/queue.c **** 				{
1360:FreeRTOS/queue.c **** 					/* Entry time was already set. */
1361:FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:FreeRTOS/queue.c **** 				}
1363:FreeRTOS/queue.c **** 			}
1364:FreeRTOS/queue.c **** 		}
1365:FreeRTOS/queue.c **** 		taskEXIT_CRITICAL();
1366:FreeRTOS/queue.c **** 
1367:FreeRTOS/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:FreeRTOS/queue.c **** 		now the critical section has been exited. */
1369:FreeRTOS/queue.c **** 
1370:FreeRTOS/queue.c **** 		vTaskSuspendAll();
1371:FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
1372:FreeRTOS/queue.c **** 
1373:FreeRTOS/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:FreeRTOS/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1375:FreeRTOS/queue.c **** 		{
1376:FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1377:FreeRTOS/queue.c **** 			{
1378:FreeRTOS/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:FreeRTOS/queue.c **** 
1380:FreeRTOS/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:FreeRTOS/queue.c **** 				{
1382:FreeRTOS/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1383:FreeRTOS/queue.c **** 					{
1384:FreeRTOS/queue.c **** 						taskENTER_CRITICAL();
1385:FreeRTOS/queue.c **** 						{
1386:FreeRTOS/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1387:FreeRTOS/queue.c **** 						}
1388:FreeRTOS/queue.c **** 						taskEXIT_CRITICAL();
1389:FreeRTOS/queue.c **** 					}
1390:FreeRTOS/queue.c **** 					else
1391:FreeRTOS/queue.c **** 					{
1392:FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:FreeRTOS/queue.c **** 					}
1394:FreeRTOS/queue.c **** 				}
1395:FreeRTOS/queue.c **** 				#endif
1396:FreeRTOS/queue.c **** 
1397:FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1398:FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1399:FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1400:FreeRTOS/queue.c **** 				{
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 26


1401:FreeRTOS/queue.c **** 					portYIELD_WITHIN_API();
1402:FreeRTOS/queue.c **** 				}
1403:FreeRTOS/queue.c **** 				else
1404:FreeRTOS/queue.c **** 				{
1405:FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:FreeRTOS/queue.c **** 				}
1407:FreeRTOS/queue.c **** 			}
1408:FreeRTOS/queue.c **** 			else
1409:FreeRTOS/queue.c **** 			{
1410:FreeRTOS/queue.c **** 				/* Try again. */
1411:FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
1412:FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
1413:FreeRTOS/queue.c **** 			}
1414:FreeRTOS/queue.c **** 		}
1415:FreeRTOS/queue.c **** 		else
1416:FreeRTOS/queue.c **** 		{
1417:FreeRTOS/queue.c **** 			prvUnlockQueue( pxQueue );
1418:FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
1419:FreeRTOS/queue.c **** 
1420:FreeRTOS/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1421:FreeRTOS/queue.c **** 			{
1422:FreeRTOS/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:FreeRTOS/queue.c **** 				return errQUEUE_EMPTY;
1424:FreeRTOS/queue.c **** 			}
1425:FreeRTOS/queue.c **** 			else
1426:FreeRTOS/queue.c **** 			{
1427:FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:FreeRTOS/queue.c **** 			}
1429:FreeRTOS/queue.c **** 		}
1430:FreeRTOS/queue.c **** 	}
1431:FreeRTOS/queue.c **** }
1432:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1433:FreeRTOS/queue.c **** 
1434:FreeRTOS/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:FreeRTOS/queue.c **** {
1436:FreeRTOS/queue.c **** BaseType_t xReturn;
1437:FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1439:FreeRTOS/queue.c **** 
1440:FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1441:FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1442:FreeRTOS/queue.c **** 
1443:FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1456:FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 27


1458:FreeRTOS/queue.c **** 
1459:FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1460:FreeRTOS/queue.c **** 	{
1461:FreeRTOS/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1462:FreeRTOS/queue.c **** 
1463:FreeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:FreeRTOS/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1465:FreeRTOS/queue.c **** 		{
1466:FreeRTOS/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1467:FreeRTOS/queue.c **** 
1468:FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:FreeRTOS/queue.c **** 
1470:FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1471:FreeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1472:FreeRTOS/queue.c **** 
1473:FreeRTOS/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:FreeRTOS/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:FreeRTOS/queue.c **** 			will know that an ISR has removed data while the queue was
1476:FreeRTOS/queue.c **** 			locked. */
1477:FreeRTOS/queue.c **** 			if( cRxLock == queueUNLOCKED )
1478:FreeRTOS/queue.c **** 			{
1479:FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1480:FreeRTOS/queue.c **** 				{
1481:FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1482:FreeRTOS/queue.c **** 					{
1483:FreeRTOS/queue.c **** 						/* The task waiting has a higher priority than us so
1484:FreeRTOS/queue.c **** 						force a context switch. */
1485:FreeRTOS/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1486:FreeRTOS/queue.c **** 						{
1487:FreeRTOS/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1488:FreeRTOS/queue.c **** 						}
1489:FreeRTOS/queue.c **** 						else
1490:FreeRTOS/queue.c **** 						{
1491:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:FreeRTOS/queue.c **** 						}
1493:FreeRTOS/queue.c **** 					}
1494:FreeRTOS/queue.c **** 					else
1495:FreeRTOS/queue.c **** 					{
1496:FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:FreeRTOS/queue.c **** 					}
1498:FreeRTOS/queue.c **** 				}
1499:FreeRTOS/queue.c **** 				else
1500:FreeRTOS/queue.c **** 				{
1501:FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:FreeRTOS/queue.c **** 				}
1503:FreeRTOS/queue.c **** 			}
1504:FreeRTOS/queue.c **** 			else
1505:FreeRTOS/queue.c **** 			{
1506:FreeRTOS/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:FreeRTOS/queue.c **** 				knows that data was removed while it was locked. */
1508:FreeRTOS/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1509:FreeRTOS/queue.c **** 			}
1510:FreeRTOS/queue.c **** 
1511:FreeRTOS/queue.c **** 			xReturn = pdPASS;
1512:FreeRTOS/queue.c **** 		}
1513:FreeRTOS/queue.c **** 		else
1514:FreeRTOS/queue.c **** 		{
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 28


1515:FreeRTOS/queue.c **** 			xReturn = pdFAIL;
1516:FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:FreeRTOS/queue.c **** 		}
1518:FreeRTOS/queue.c **** 	}
1519:FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:FreeRTOS/queue.c **** 
1521:FreeRTOS/queue.c **** 	return xReturn;
1522:FreeRTOS/queue.c **** }
1523:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1524:FreeRTOS/queue.c **** 
1525:FreeRTOS/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:FreeRTOS/queue.c **** {
1527:FreeRTOS/queue.c **** BaseType_t xReturn;
1528:FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
1530:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1531:FreeRTOS/queue.c **** 
1532:FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1533:FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1534:FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1535:FreeRTOS/queue.c **** 
1536:FreeRTOS/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:FreeRTOS/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:FreeRTOS/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:FreeRTOS/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:FreeRTOS/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:FreeRTOS/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:FreeRTOS/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:FreeRTOS/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:FreeRTOS/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:FreeRTOS/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:FreeRTOS/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:FreeRTOS/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:FreeRTOS/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:FreeRTOS/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:FreeRTOS/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1551:FreeRTOS/queue.c **** 
1552:FreeRTOS/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1553:FreeRTOS/queue.c **** 	{
1554:FreeRTOS/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1556:FreeRTOS/queue.c **** 		{
1557:FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:FreeRTOS/queue.c **** 
1559:FreeRTOS/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:FreeRTOS/queue.c **** 			actually being removed from the queue. */
1561:FreeRTOS/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1562:FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1563:FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1564:FreeRTOS/queue.c **** 
1565:FreeRTOS/queue.c **** 			xReturn = pdPASS;
1566:FreeRTOS/queue.c **** 		}
1567:FreeRTOS/queue.c **** 		else
1568:FreeRTOS/queue.c **** 		{
1569:FreeRTOS/queue.c **** 			xReturn = pdFAIL;
1570:FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:FreeRTOS/queue.c **** 		}
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 29


1572:FreeRTOS/queue.c **** 	}
1573:FreeRTOS/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:FreeRTOS/queue.c **** 
1575:FreeRTOS/queue.c **** 	return xReturn;
1576:FreeRTOS/queue.c **** }
1577:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1578:FreeRTOS/queue.c **** 
1579:FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:FreeRTOS/queue.c **** {
1581:FreeRTOS/queue.c **** UBaseType_t uxReturn;
1582:FreeRTOS/queue.c **** 
1583:FreeRTOS/queue.c **** 	configASSERT( xQueue );
1584:FreeRTOS/queue.c **** 
1585:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1586:FreeRTOS/queue.c **** 	{
1587:FreeRTOS/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1588:FreeRTOS/queue.c **** 	}
1589:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1590:FreeRTOS/queue.c **** 
1591:FreeRTOS/queue.c **** 	return uxReturn;
1592:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1593:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1594:FreeRTOS/queue.c **** 
1595:FreeRTOS/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:FreeRTOS/queue.c **** {
1597:FreeRTOS/queue.c **** UBaseType_t uxReturn;
1598:FreeRTOS/queue.c **** Queue_t *pxQueue;
1599:FreeRTOS/queue.c **** 
1600:FreeRTOS/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1601:FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1602:FreeRTOS/queue.c **** 
1603:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1604:FreeRTOS/queue.c **** 	{
1605:FreeRTOS/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1606:FreeRTOS/queue.c **** 	}
1607:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1608:FreeRTOS/queue.c **** 
1609:FreeRTOS/queue.c **** 	return uxReturn;
1610:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1611:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1612:FreeRTOS/queue.c **** 
1613:FreeRTOS/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:FreeRTOS/queue.c **** {
1615:FreeRTOS/queue.c **** UBaseType_t uxReturn;
1616:FreeRTOS/queue.c **** 
1617:FreeRTOS/queue.c **** 	configASSERT( xQueue );
1618:FreeRTOS/queue.c **** 
1619:FreeRTOS/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1620:FreeRTOS/queue.c **** 
1621:FreeRTOS/queue.c **** 	return uxReturn;
1622:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1623:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1624:FreeRTOS/queue.c **** 
1625:FreeRTOS/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:FreeRTOS/queue.c **** {
1627:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1628:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 30


1629:FreeRTOS/queue.c **** 	configASSERT( pxQueue );
1630:FreeRTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:FreeRTOS/queue.c **** 
1632:FreeRTOS/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:FreeRTOS/queue.c **** 	{
1634:FreeRTOS/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1635:FreeRTOS/queue.c **** 	}
1636:FreeRTOS/queue.c **** 	#endif
1637:FreeRTOS/queue.c **** 
1638:FreeRTOS/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:FreeRTOS/queue.c **** 	{
1640:FreeRTOS/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:FreeRTOS/queue.c **** 		again. */
1642:FreeRTOS/queue.c **** 		vPortFree( pxQueue );
1643:FreeRTOS/queue.c **** 	}
1644:FreeRTOS/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:FreeRTOS/queue.c **** 	{
1646:FreeRTOS/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:FreeRTOS/queue.c **** 		check before attempting to free the memory. */
1648:FreeRTOS/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:FreeRTOS/queue.c **** 		{
1650:FreeRTOS/queue.c **** 			vPortFree( pxQueue );
1651:FreeRTOS/queue.c **** 		}
1652:FreeRTOS/queue.c **** 		else
1653:FreeRTOS/queue.c **** 		{
1654:FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:FreeRTOS/queue.c **** 		}
1656:FreeRTOS/queue.c **** 	}
1657:FreeRTOS/queue.c **** 	#else
1658:FreeRTOS/queue.c **** 	{
1659:FreeRTOS/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:FreeRTOS/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:FreeRTOS/queue.c **** 		( void ) pxQueue;
1662:FreeRTOS/queue.c **** 	}
1663:FreeRTOS/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:FreeRTOS/queue.c **** }
1665:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1666:FreeRTOS/queue.c **** 
1667:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:FreeRTOS/queue.c **** 
1669:FreeRTOS/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:FreeRTOS/queue.c **** 	{
1671:FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1672:FreeRTOS/queue.c **** 	}
1673:FreeRTOS/queue.c **** 
1674:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1676:FreeRTOS/queue.c **** 
1677:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:FreeRTOS/queue.c **** 
1679:FreeRTOS/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:FreeRTOS/queue.c **** 	{
1681:FreeRTOS/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1682:FreeRTOS/queue.c **** 	}
1683:FreeRTOS/queue.c **** 
1684:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 31


1686:FreeRTOS/queue.c **** 
1687:FreeRTOS/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:FreeRTOS/queue.c **** 
1689:FreeRTOS/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:FreeRTOS/queue.c **** 	{
1691:FreeRTOS/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1692:FreeRTOS/queue.c **** 	}
1693:FreeRTOS/queue.c **** 
1694:FreeRTOS/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1696:FreeRTOS/queue.c **** 
1697:FreeRTOS/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:FreeRTOS/queue.c **** {
1699:FreeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
1700:FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
1701:FreeRTOS/queue.c **** 
1702:FreeRTOS/queue.c **** 	/* This function is called from a critical section. */
1703:FreeRTOS/queue.c **** 
1704:FreeRTOS/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1705:FreeRTOS/queue.c **** 
1706:FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1707:FreeRTOS/queue.c **** 	{
1708:FreeRTOS/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:FreeRTOS/queue.c **** 		{
1710:FreeRTOS/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1711:FreeRTOS/queue.c **** 			{
1712:FreeRTOS/queue.c **** 				/* The mutex is no longer being held. */
1713:FreeRTOS/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1714:FreeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1715:FreeRTOS/queue.c **** 			}
1716:FreeRTOS/queue.c **** 			else
1717:FreeRTOS/queue.c **** 			{
1718:FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:FreeRTOS/queue.c **** 			}
1720:FreeRTOS/queue.c **** 		}
1721:FreeRTOS/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:FreeRTOS/queue.c **** 	}
1723:FreeRTOS/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1724:FreeRTOS/queue.c **** 	{
1725:FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
1726:FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1727:FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
1728:FreeRTOS/queue.c **** 		{
1729:FreeRTOS/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1730:FreeRTOS/queue.c **** 		}
1731:FreeRTOS/queue.c **** 		else
1732:FreeRTOS/queue.c **** 		{
1733:FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:FreeRTOS/queue.c **** 		}
1735:FreeRTOS/queue.c **** 	}
1736:FreeRTOS/queue.c **** 	else
1737:FreeRTOS/queue.c **** 	{
1738:FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
1739:FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1740:FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
1741:FreeRTOS/queue.c **** 		{
1742:FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 32


1743:FreeRTOS/queue.c **** 		}
1744:FreeRTOS/queue.c **** 		else
1745:FreeRTOS/queue.c **** 		{
1746:FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:FreeRTOS/queue.c **** 		}
1748:FreeRTOS/queue.c **** 
1749:FreeRTOS/queue.c **** 		if( xPosition == queueOVERWRITE )
1750:FreeRTOS/queue.c **** 		{
1751:FreeRTOS/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1752:FreeRTOS/queue.c **** 			{
1753:FreeRTOS/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:FreeRTOS/queue.c **** 				one from the recorded number of items in the queue so when
1755:FreeRTOS/queue.c **** 				one is added again below the number of recorded items remains
1756:FreeRTOS/queue.c **** 				correct. */
1757:FreeRTOS/queue.c **** 				--uxMessagesWaiting;
1758:FreeRTOS/queue.c **** 			}
1759:FreeRTOS/queue.c **** 			else
1760:FreeRTOS/queue.c **** 			{
1761:FreeRTOS/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:FreeRTOS/queue.c **** 			}
1763:FreeRTOS/queue.c **** 		}
1764:FreeRTOS/queue.c **** 		else
1765:FreeRTOS/queue.c **** 		{
1766:FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:FreeRTOS/queue.c **** 		}
1768:FreeRTOS/queue.c **** 	}
1769:FreeRTOS/queue.c **** 
1770:FreeRTOS/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1771:FreeRTOS/queue.c **** 
1772:FreeRTOS/queue.c **** 	return xReturn;
1773:FreeRTOS/queue.c **** }
1774:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1775:FreeRTOS/queue.c **** 
1776:FreeRTOS/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:FreeRTOS/queue.c **** {
1778:FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1779:FreeRTOS/queue.c **** 	{
1780:FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1781:FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
1782:FreeRTOS/queue.c **** 		{
1783:FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1784:FreeRTOS/queue.c **** 		}
1785:FreeRTOS/queue.c **** 		else
1786:FreeRTOS/queue.c **** 		{
1787:FreeRTOS/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:FreeRTOS/queue.c **** 		}
1789:FreeRTOS/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1790:FreeRTOS/queue.c **** 	}
1791:FreeRTOS/queue.c **** }
1792:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1793:FreeRTOS/queue.c **** 
1794:FreeRTOS/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:FreeRTOS/queue.c **** {
1796:FreeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:FreeRTOS/queue.c **** 
1798:FreeRTOS/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:FreeRTOS/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 33


1800:FreeRTOS/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:FreeRTOS/queue.c **** 	updated. */
1802:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1803:FreeRTOS/queue.c **** 	{
1804:FreeRTOS/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
1805:FreeRTOS/queue.c **** 
1806:FreeRTOS/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:FreeRTOS/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
1808:FreeRTOS/queue.c **** 		{
1809:FreeRTOS/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:FreeRTOS/queue.c **** 			blocked waiting for data to become available? */
1811:FreeRTOS/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:FreeRTOS/queue.c **** 			{
1813:FreeRTOS/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:FreeRTOS/queue.c **** 				{
1815:FreeRTOS/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:FreeRTOS/queue.c **** 					{
1817:FreeRTOS/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:FreeRTOS/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:FreeRTOS/queue.c **** 						A context switch is required. */
1820:FreeRTOS/queue.c **** 						vTaskMissedYield();
1821:FreeRTOS/queue.c **** 					}
1822:FreeRTOS/queue.c **** 					else
1823:FreeRTOS/queue.c **** 					{
1824:FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:FreeRTOS/queue.c **** 					}
1826:FreeRTOS/queue.c **** 				}
1827:FreeRTOS/queue.c **** 				else
1828:FreeRTOS/queue.c **** 				{
1829:FreeRTOS/queue.c **** 					/* Tasks that are removed from the event list will get
1830:FreeRTOS/queue.c **** 					added to the pending ready list as the scheduler is still
1831:FreeRTOS/queue.c **** 					suspended. */
1832:FreeRTOS/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:FreeRTOS/queue.c **** 					{
1834:FreeRTOS/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:FreeRTOS/queue.c **** 						{
1836:FreeRTOS/queue.c **** 							/* The task waiting has a higher priority so record that a
1837:FreeRTOS/queue.c **** 							context	switch is required. */
1838:FreeRTOS/queue.c **** 							vTaskMissedYield();
1839:FreeRTOS/queue.c **** 						}
1840:FreeRTOS/queue.c **** 						else
1841:FreeRTOS/queue.c **** 						{
1842:FreeRTOS/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:FreeRTOS/queue.c **** 						}
1844:FreeRTOS/queue.c **** 					}
1845:FreeRTOS/queue.c **** 					else
1846:FreeRTOS/queue.c **** 					{
1847:FreeRTOS/queue.c **** 						break;
1848:FreeRTOS/queue.c **** 					}
1849:FreeRTOS/queue.c **** 				}
1850:FreeRTOS/queue.c **** 			}
1851:FreeRTOS/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:FreeRTOS/queue.c **** 			{
1853:FreeRTOS/queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:FreeRTOS/queue.c **** 				the pending ready list as the scheduler is still suspended. */
1855:FreeRTOS/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1856:FreeRTOS/queue.c **** 				{
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 34


1857:FreeRTOS/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1858:FreeRTOS/queue.c **** 					{
1859:FreeRTOS/queue.c **** 						/* The task waiting has a higher priority so record that
1860:FreeRTOS/queue.c **** 						a context switch is required. */
1861:FreeRTOS/queue.c **** 						vTaskMissedYield();
1862:FreeRTOS/queue.c **** 					}
1863:FreeRTOS/queue.c **** 					else
1864:FreeRTOS/queue.c **** 					{
1865:FreeRTOS/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:FreeRTOS/queue.c **** 					}
1867:FreeRTOS/queue.c **** 				}
1868:FreeRTOS/queue.c **** 				else
1869:FreeRTOS/queue.c **** 				{
1870:FreeRTOS/queue.c **** 					break;
1871:FreeRTOS/queue.c **** 				}
1872:FreeRTOS/queue.c **** 			}
1873:FreeRTOS/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:FreeRTOS/queue.c **** 
1875:FreeRTOS/queue.c **** 			--cTxLock;
1876:FreeRTOS/queue.c **** 		}
1877:FreeRTOS/queue.c **** 
1878:FreeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
1879:FreeRTOS/queue.c **** 	}
1880:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1881:FreeRTOS/queue.c **** 
1882:FreeRTOS/queue.c **** 	/* Do the same for the Rx lock. */
1883:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1884:FreeRTOS/queue.c **** 	{
1885:FreeRTOS/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
1886:FreeRTOS/queue.c **** 
1887:FreeRTOS/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
1888:FreeRTOS/queue.c **** 		{
1889:FreeRTOS/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1890:FreeRTOS/queue.c **** 			{
1891:FreeRTOS/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1892:FreeRTOS/queue.c **** 				{
1893:FreeRTOS/queue.c **** 					vTaskMissedYield();
1894:FreeRTOS/queue.c **** 				}
1895:FreeRTOS/queue.c **** 				else
1896:FreeRTOS/queue.c **** 				{
1897:FreeRTOS/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:FreeRTOS/queue.c **** 				}
1899:FreeRTOS/queue.c **** 
1900:FreeRTOS/queue.c **** 				--cRxLock;
1901:FreeRTOS/queue.c **** 			}
1902:FreeRTOS/queue.c **** 			else
1903:FreeRTOS/queue.c **** 			{
1904:FreeRTOS/queue.c **** 				break;
1905:FreeRTOS/queue.c **** 			}
1906:FreeRTOS/queue.c **** 		}
1907:FreeRTOS/queue.c **** 
1908:FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
1909:FreeRTOS/queue.c **** 	}
1910:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1911:FreeRTOS/queue.c **** }
1912:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1913:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 35


1914:FreeRTOS/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:FreeRTOS/queue.c **** {
1916:FreeRTOS/queue.c **** BaseType_t xReturn;
1917:FreeRTOS/queue.c **** 
1918:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
1919:FreeRTOS/queue.c **** 	{
1920:FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1921:FreeRTOS/queue.c **** 		{
1922:FreeRTOS/queue.c **** 			xReturn = pdTRUE;
1923:FreeRTOS/queue.c **** 		}
1924:FreeRTOS/queue.c **** 		else
1925:FreeRTOS/queue.c **** 		{
1926:FreeRTOS/queue.c **** 			xReturn = pdFALSE;
1927:FreeRTOS/queue.c **** 		}
1928:FreeRTOS/queue.c **** 	}
1929:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
1930:FreeRTOS/queue.c **** 
1931:FreeRTOS/queue.c **** 	return xReturn;
1932:FreeRTOS/queue.c **** }
1933:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1934:FreeRTOS/queue.c **** 
1935:FreeRTOS/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:FreeRTOS/queue.c **** {
1937:FreeRTOS/queue.c **** BaseType_t xReturn;
1938:FreeRTOS/queue.c **** 
1939:FreeRTOS/queue.c **** 	configASSERT( xQueue );
1940:FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1941:FreeRTOS/queue.c **** 	{
1942:FreeRTOS/queue.c **** 		xReturn = pdTRUE;
1943:FreeRTOS/queue.c **** 	}
1944:FreeRTOS/queue.c **** 	else
1945:FreeRTOS/queue.c **** 	{
1946:FreeRTOS/queue.c **** 		xReturn = pdFALSE;
1947:FreeRTOS/queue.c **** 	}
1948:FreeRTOS/queue.c **** 
1949:FreeRTOS/queue.c **** 	return xReturn;
1950:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1951:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1952:FreeRTOS/queue.c **** 
1953:FreeRTOS/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:FreeRTOS/queue.c **** {
  27              		.loc 1 1954 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		.loc 1 1954 1 is_stmt 0 view .LVU1
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
1955:FreeRTOS/queue.c **** BaseType_t xReturn;
  38              		.loc 1 1955 1 is_stmt 1 view .LVU2
1956:FreeRTOS/queue.c **** 
1957:FreeRTOS/queue.c **** 	taskENTER_CRITICAL();
  39              		.loc 1 1957 2 view .LVU3
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 36


  40 0004 FFF7FEFF 		bl	vPortEnterCritical
  41              	.LVL1:
1958:FreeRTOS/queue.c **** 	{
1959:FreeRTOS/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  42              		.loc 1 1959 3 view .LVU4
  43              		.loc 1 1959 14 is_stmt 0 view .LVU5
  44 0008 A26B     		ldr	r2, [r4, #56]
  45              		.loc 1 1959 44 view .LVU6
  46 000a E36B     		ldr	r3, [r4, #60]
  47              		.loc 1 1959 5 view .LVU7
  48 000c 9A42     		cmp	r2, r3
  49 000e 04D0     		beq	.L5
1960:FreeRTOS/queue.c **** 		{
1961:FreeRTOS/queue.c **** 			xReturn = pdTRUE;
1962:FreeRTOS/queue.c **** 		}
1963:FreeRTOS/queue.c **** 		else
1964:FreeRTOS/queue.c **** 		{
1965:FreeRTOS/queue.c **** 			xReturn = pdFALSE;
  50              		.loc 1 1965 12 view .LVU8
  51 0010 0024     		movs	r4, #0
  52              	.LVL2:
  53              	.L2:
1966:FreeRTOS/queue.c **** 		}
1967:FreeRTOS/queue.c **** 	}
1968:FreeRTOS/queue.c **** 	taskEXIT_CRITICAL();
  54              		.loc 1 1968 2 is_stmt 1 view .LVU9
  55 0012 FFF7FEFF 		bl	vPortExitCritical
  56              	.LVL3:
1969:FreeRTOS/queue.c **** 
1970:FreeRTOS/queue.c **** 	return xReturn;
  57              		.loc 1 1970 2 view .LVU10
1971:FreeRTOS/queue.c **** }
  58              		.loc 1 1971 1 is_stmt 0 view .LVU11
  59 0016 2046     		mov	r0, r4
  60 0018 10BD     		pop	{r4, pc}
  61              	.LVL4:
  62              	.L5:
1961:FreeRTOS/queue.c **** 		}
  63              		.loc 1 1961 12 view .LVU12
  64 001a 0124     		movs	r4, #1
  65              	.LVL5:
1961:FreeRTOS/queue.c **** 		}
  66              		.loc 1 1961 12 view .LVU13
  67 001c F9E7     		b	.L2
  68              		.cfi_endproc
  69              	.LFE54:
  71              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  72              		.align	1
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  77              	prvIsQueueEmpty:
  78              	.LVL6:
  79              	.LFB52:
1915:FreeRTOS/queue.c **** BaseType_t xReturn;
  80              		.loc 1 1915 1 is_stmt 1 view -0
  81              		.cfi_startproc
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 37


  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
1915:FreeRTOS/queue.c **** BaseType_t xReturn;
  84              		.loc 1 1915 1 is_stmt 0 view .LVU15
  85 0000 10B5     		push	{r4, lr}
  86              	.LCFI1:
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 4, -8
  89              		.cfi_offset 14, -4
  90 0002 0446     		mov	r4, r0
1916:FreeRTOS/queue.c **** 
  91              		.loc 1 1916 1 is_stmt 1 view .LVU16
1918:FreeRTOS/queue.c **** 	{
  92              		.loc 1 1918 2 view .LVU17
  93 0004 FFF7FEFF 		bl	vPortEnterCritical
  94              	.LVL7:
1920:FreeRTOS/queue.c **** 		{
  95              		.loc 1 1920 3 view .LVU18
1920:FreeRTOS/queue.c **** 		{
  96              		.loc 1 1920 14 is_stmt 0 view .LVU19
  97 0008 A36B     		ldr	r3, [r4, #56]
1920:FreeRTOS/queue.c **** 		{
  98              		.loc 1 1920 5 view .LVU20
  99 000a 23B9     		cbnz	r3, .L8
1922:FreeRTOS/queue.c **** 		}
 100              		.loc 1 1922 12 view .LVU21
 101 000c 0124     		movs	r4, #1
 102              	.LVL8:
 103              	.L7:
1929:FreeRTOS/queue.c **** 
 104              		.loc 1 1929 2 is_stmt 1 view .LVU22
 105 000e FFF7FEFF 		bl	vPortExitCritical
 106              	.LVL9:
1931:FreeRTOS/queue.c **** }
 107              		.loc 1 1931 2 view .LVU23
1932:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 108              		.loc 1 1932 1 is_stmt 0 view .LVU24
 109 0012 2046     		mov	r0, r4
 110 0014 10BD     		pop	{r4, pc}
 111              	.LVL10:
 112              	.L8:
1926:FreeRTOS/queue.c **** 		}
 113              		.loc 1 1926 12 view .LVU25
 114 0016 0024     		movs	r4, #0
 115              	.LVL11:
1926:FreeRTOS/queue.c **** 		}
 116              		.loc 1 1926 12 view .LVU26
 117 0018 F9E7     		b	.L7
 118              		.cfi_endproc
 119              	.LFE52:
 121              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 122              		.align	1
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 127              	prvCopyDataToQueue:
 128              	.LVL12:
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 38


 129              	.LFB49:
1698:FreeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
 130              		.loc 1 1698 1 is_stmt 1 view -0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
1698:FreeRTOS/queue.c **** BaseType_t xReturn = pdFALSE;
 134              		.loc 1 1698 1 is_stmt 0 view .LVU28
 135 0000 70B5     		push	{r4, r5, r6, lr}
 136              	.LCFI2:
 137              		.cfi_def_cfa_offset 16
 138              		.cfi_offset 4, -16
 139              		.cfi_offset 5, -12
 140              		.cfi_offset 6, -8
 141              		.cfi_offset 14, -4
 142 0002 0446     		mov	r4, r0
 143 0004 1546     		mov	r5, r2
1699:FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 144              		.loc 1 1699 1 is_stmt 1 view .LVU29
 145              	.LVL13:
1700:FreeRTOS/queue.c **** 
 146              		.loc 1 1700 1 view .LVU30
1704:FreeRTOS/queue.c **** 
 147              		.loc 1 1704 2 view .LVU31
1704:FreeRTOS/queue.c **** 
 148              		.loc 1 1704 20 is_stmt 0 view .LVU32
 149 0006 866B     		ldr	r6, [r0, #56]
 150              	.LVL14:
1706:FreeRTOS/queue.c **** 	{
 151              		.loc 1 1706 2 is_stmt 1 view .LVU33
1706:FreeRTOS/queue.c **** 	{
 152              		.loc 1 1706 13 is_stmt 0 view .LVU34
 153 0008 026C     		ldr	r2, [r0, #64]
 154              	.LVL15:
1706:FreeRTOS/queue.c **** 	{
 155              		.loc 1 1706 4 view .LVU35
 156 000a 5AB9     		cbnz	r2, .L11
1710:FreeRTOS/queue.c **** 			{
 157              		.loc 1 1710 4 is_stmt 1 view .LVU36
1710:FreeRTOS/queue.c **** 			{
 158              		.loc 1 1710 15 is_stmt 0 view .LVU37
 159 000c 0368     		ldr	r3, [r0]
1710:FreeRTOS/queue.c **** 			{
 160              		.loc 1 1710 6 view .LVU38
 161 000e 1BB1     		cbz	r3, .L20
1699:FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 162              		.loc 1 1699 12 view .LVU39
 163 0010 0020     		movs	r0, #0
 164              	.LVL16:
 165              	.L12:
1766:FreeRTOS/queue.c **** 		}
 166              		.loc 1 1766 28 is_stmt 1 view .LVU40
1770:FreeRTOS/queue.c **** 
 167              		.loc 1 1770 2 view .LVU41
1770:FreeRTOS/queue.c **** 
 168              		.loc 1 1770 49 is_stmt 0 view .LVU42
 169 0012 0136     		adds	r6, r6, #1
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 39


 170              	.LVL17:
1770:FreeRTOS/queue.c **** 
 171              		.loc 1 1770 29 view .LVU43
 172 0014 A663     		str	r6, [r4, #56]
1772:FreeRTOS/queue.c **** }
 173              		.loc 1 1772 2 is_stmt 1 view .LVU44
1773:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 174              		.loc 1 1773 1 is_stmt 0 view .LVU45
 175 0016 70BD     		pop	{r4, r5, r6, pc}
 176              	.LVL18:
 177              	.L20:
1713:FreeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 178              		.loc 1 1713 5 is_stmt 1 view .LVU46
1713:FreeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 179              		.loc 1 1713 15 is_stmt 0 view .LVU47
 180 0018 4068     		ldr	r0, [r0, #4]
 181              	.LVL19:
1713:FreeRTOS/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 182              		.loc 1 1713 15 view .LVU48
 183 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 184              	.LVL20:
1714:FreeRTOS/queue.c **** 			}
 185              		.loc 1 1714 5 is_stmt 1 view .LVU49
1714:FreeRTOS/queue.c **** 			}
 186              		.loc 1 1714 28 is_stmt 0 view .LVU50
 187 001e 0023     		movs	r3, #0
 188 0020 6360     		str	r3, [r4, #4]
 189 0022 F6E7     		b	.L12
 190              	.LVL21:
 191              	.L11:
1723:FreeRTOS/queue.c **** 	{
 192              		.loc 1 1723 7 is_stmt 1 view .LVU51
1723:FreeRTOS/queue.c **** 	{
 193              		.loc 1 1723 9 is_stmt 0 view .LVU52
 194 0024 6DB9     		cbnz	r5, .L13
1725:FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 195              		.loc 1 1725 3 is_stmt 1 view .LVU53
1725:FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 196              		.loc 1 1725 12 is_stmt 0 view .LVU54
 197 0026 8068     		ldr	r0, [r0, #8]
 198              	.LVL22:
1725:FreeRTOS/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 199              		.loc 1 1725 12 view .LVU55
 200 0028 FFF7FEFF 		bl	memcpy
 201              	.LVL23:
1726:FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 202              		.loc 1 1726 3 is_stmt 1 view .LVU56
1726:FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 203              		.loc 1 1726 32 is_stmt 0 view .LVU57
 204 002c 226C     		ldr	r2, [r4, #64]
1726:FreeRTOS/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 205              		.loc 1 1726 22 view .LVU58
 206 002e A368     		ldr	r3, [r4, #8]
 207 0030 1344     		add	r3, r3, r2
 208 0032 A360     		str	r3, [r4, #8]
1727:FreeRTOS/queue.c **** 		{
 209              		.loc 1 1727 3 is_stmt 1 view .LVU59
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 40


1727:FreeRTOS/queue.c **** 		{
 210              		.loc 1 1727 36 is_stmt 0 view .LVU60
 211 0034 6268     		ldr	r2, [r4, #4]
1727:FreeRTOS/queue.c **** 		{
 212              		.loc 1 1727 5 view .LVU61
 213 0036 9342     		cmp	r3, r2
 214 0038 19D3     		bcc	.L16
1729:FreeRTOS/queue.c **** 		}
 215              		.loc 1 1729 4 is_stmt 1 view .LVU62
1729:FreeRTOS/queue.c **** 		}
 216              		.loc 1 1729 32 is_stmt 0 view .LVU63
 217 003a 2368     		ldr	r3, [r4]
1729:FreeRTOS/queue.c **** 		}
 218              		.loc 1 1729 23 view .LVU64
 219 003c A360     		str	r3, [r4, #8]
1699:FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 220              		.loc 1 1699 12 view .LVU65
 221 003e 2846     		mov	r0, r5
 222 0040 E7E7     		b	.L12
 223              	.LVL24:
 224              	.L13:
1738:FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 225              		.loc 1 1738 3 is_stmt 1 view .LVU66
1738:FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 226              		.loc 1 1738 12 is_stmt 0 view .LVU67
 227 0042 C068     		ldr	r0, [r0, #12]
 228              	.LVL25:
1738:FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 229              		.loc 1 1738 12 view .LVU68
 230 0044 FFF7FEFF 		bl	memcpy
 231              	.LVL26:
1739:FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 232              		.loc 1 1739 3 is_stmt 1 view .LVU69
1739:FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 233              		.loc 1 1739 35 is_stmt 0 view .LVU70
 234 0048 226C     		ldr	r2, [r4, #64]
1739:FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 235              		.loc 1 1739 25 view .LVU71
 236 004a 5142     		rsbs	r1, r2, #0
 237 004c E368     		ldr	r3, [r4, #12]
 238 004e 9B1A     		subs	r3, r3, r2
 239 0050 E360     		str	r3, [r4, #12]
1740:FreeRTOS/queue.c **** 		{
 240              		.loc 1 1740 3 is_stmt 1 view .LVU72
1740:FreeRTOS/queue.c **** 		{
 241              		.loc 1 1740 38 is_stmt 0 view .LVU73
 242 0052 2268     		ldr	r2, [r4]
1740:FreeRTOS/queue.c **** 		{
 243              		.loc 1 1740 5 view .LVU74
 244 0054 9342     		cmp	r3, r2
 245 0056 02D2     		bcs	.L14
1742:FreeRTOS/queue.c **** 		}
 246              		.loc 1 1742 4 is_stmt 1 view .LVU75
1742:FreeRTOS/queue.c **** 		}
 247              		.loc 1 1742 37 is_stmt 0 view .LVU76
 248 0058 6368     		ldr	r3, [r4, #4]
1742:FreeRTOS/queue.c **** 		}
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 41


 249              		.loc 1 1742 46 view .LVU77
 250 005a 0B44     		add	r3, r3, r1
1742:FreeRTOS/queue.c **** 		}
 251              		.loc 1 1742 26 view .LVU78
 252 005c E360     		str	r3, [r4, #12]
 253              	.L14:
1746:FreeRTOS/queue.c **** 		}
 254              		.loc 1 1746 28 is_stmt 1 view .LVU79
1749:FreeRTOS/queue.c **** 		{
 255              		.loc 1 1749 3 view .LVU80
1749:FreeRTOS/queue.c **** 		{
 256              		.loc 1 1749 5 is_stmt 0 view .LVU81
 257 005e 022D     		cmp	r5, #2
 258 0060 01D0     		beq	.L21
1699:FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 259              		.loc 1 1699 12 view .LVU82
 260 0062 0020     		movs	r0, #0
 261 0064 D5E7     		b	.L12
 262              	.L21:
1751:FreeRTOS/queue.c **** 			{
 263              		.loc 1 1751 4 is_stmt 1 view .LVU83
1751:FreeRTOS/queue.c **** 			{
 264              		.loc 1 1751 6 is_stmt 0 view .LVU84
 265 0066 26B1     		cbz	r6, .L18
1757:FreeRTOS/queue.c **** 			}
 266              		.loc 1 1757 5 is_stmt 1 view .LVU85
 267 0068 013E     		subs	r6, r6, #1
 268              	.LVL27:
1699:FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 269              		.loc 1 1699 12 is_stmt 0 view .LVU86
 270 006a 0020     		movs	r0, #0
 271 006c D1E7     		b	.L12
 272              	.L16:
1699:FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 273              		.loc 1 1699 12 view .LVU87
 274 006e 2846     		mov	r0, r5
 275 0070 CFE7     		b	.L12
 276              	.L18:
1699:FreeRTOS/queue.c **** UBaseType_t uxMessagesWaiting;
 277              		.loc 1 1699 12 view .LVU88
 278 0072 0020     		movs	r0, #0
 279 0074 CDE7     		b	.L12
 280              		.cfi_endproc
 281              	.LFE49:
 283              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 284              		.align	1
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 289              	prvCopyDataFromQueue:
 290              	.LVL28:
 291              	.LFB50:
1777:FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 292              		.loc 1 1777 1 is_stmt 1 view -0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 42


1777:FreeRTOS/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 296              		.loc 1 1777 1 is_stmt 0 view .LVU90
 297 0000 08B5     		push	{r3, lr}
 298              	.LCFI3:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 3, -8
 301              		.cfi_offset 14, -4
 302 0002 0346     		mov	r3, r0
1778:FreeRTOS/queue.c **** 	{
 303              		.loc 1 1778 2 is_stmt 1 view .LVU91
1778:FreeRTOS/queue.c **** 	{
 304              		.loc 1 1778 13 is_stmt 0 view .LVU92
 305 0004 026C     		ldr	r2, [r0, #64]
1778:FreeRTOS/queue.c **** 	{
 306              		.loc 1 1778 4 view .LVU93
 307 0006 62B1     		cbz	r2, .L22
 308 0008 0846     		mov	r0, r1
 309              	.LVL29:
1780:FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 310              		.loc 1 1780 3 is_stmt 1 view .LVU94
1780:FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 311              		.loc 1 1780 25 is_stmt 0 view .LVU95
 312 000a D968     		ldr	r1, [r3, #12]
 313              	.LVL30:
1780:FreeRTOS/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 314              		.loc 1 1780 25 view .LVU96
 315 000c 1144     		add	r1, r1, r2
 316 000e D960     		str	r1, [r3, #12]
1781:FreeRTOS/queue.c **** 		{
 317              		.loc 1 1781 3 is_stmt 1 view .LVU97
1781:FreeRTOS/queue.c **** 		{
 318              		.loc 1 1781 5 is_stmt 0 view .LVU98
 319 0010 D3F804C0 		ldr	ip, [r3, #4]
 320 0014 6145     		cmp	r1, ip
 321 0016 01D3     		bcc	.L24
1783:FreeRTOS/queue.c **** 		}
 322              		.loc 1 1783 4 is_stmt 1 view .LVU99
1783:FreeRTOS/queue.c **** 		}
 323              		.loc 1 1783 35 is_stmt 0 view .LVU100
 324 0018 1968     		ldr	r1, [r3]
1783:FreeRTOS/queue.c **** 		}
 325              		.loc 1 1783 26 view .LVU101
 326 001a D960     		str	r1, [r3, #12]
 327              	.L24:
1787:FreeRTOS/queue.c **** 		}
 328              		.loc 1 1787 28 is_stmt 1 view .LVU102
1789:FreeRTOS/queue.c **** 	}
 329              		.loc 1 1789 3 view .LVU103
1789:FreeRTOS/queue.c **** 	}
 330              		.loc 1 1789 12 is_stmt 0 view .LVU104
 331 001c D968     		ldr	r1, [r3, #12]
 332 001e FFF7FEFF 		bl	memcpy
 333              	.LVL31:
 334              	.L22:
1791:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 335              		.loc 1 1791 1 view .LVU105
 336 0022 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 43


 337              		.cfi_endproc
 338              	.LFE50:
 340              		.section	.text.prvUnlockQueue,"ax",%progbits
 341              		.align	1
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	prvUnlockQueue:
 347              	.LVL32:
 348              	.LFB51:
1795:FreeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 349              		.loc 1 1795 1 is_stmt 1 view -0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
1795:FreeRTOS/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 353              		.loc 1 1795 1 is_stmt 0 view .LVU107
 354 0000 38B5     		push	{r3, r4, r5, lr}
 355              	.LCFI4:
 356              		.cfi_def_cfa_offset 16
 357              		.cfi_offset 3, -16
 358              		.cfi_offset 4, -12
 359              		.cfi_offset 5, -8
 360              		.cfi_offset 14, -4
 361 0002 0546     		mov	r5, r0
1802:FreeRTOS/queue.c **** 	{
 362              		.loc 1 1802 2 is_stmt 1 view .LVU108
 363 0004 FFF7FEFF 		bl	vPortEnterCritical
 364              	.LVL33:
 365              	.LBB23:
1804:FreeRTOS/queue.c **** 
 366              		.loc 1 1804 3 view .LVU109
1804:FreeRTOS/queue.c **** 
 367              		.loc 1 1804 10 is_stmt 0 view .LVU110
 368 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 369 000c 64B2     		sxtb	r4, r4
 370              	.LVL34:
1807:FreeRTOS/queue.c **** 		{
 371              		.loc 1 1807 3 is_stmt 1 view .LVU111
1807:FreeRTOS/queue.c **** 		{
 372              		.loc 1 1807 8 is_stmt 0 view .LVU112
 373 000e 01E0     		b	.L27
 374              	.L29:
1865:FreeRTOS/queue.c **** 					}
 375              		.loc 1 1865 31 is_stmt 1 view .LVU113
1875:FreeRTOS/queue.c **** 		}
 376              		.loc 1 1875 4 view .LVU114
 377 0010 013C     		subs	r4, r4, #1
 378              	.LVL35:
1875:FreeRTOS/queue.c **** 		}
 379              		.loc 1 1875 4 is_stmt 0 view .LVU115
 380 0012 64B2     		sxtb	r4, r4
 381              	.LVL36:
 382              	.L27:
1807:FreeRTOS/queue.c **** 		{
 383              		.loc 1 1807 8 is_stmt 1 view .LVU116
 384 0014 002C     		cmp	r4, #0
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 44


 385 0016 0ADD     		ble	.L28
1855:FreeRTOS/queue.c **** 				{
 386              		.loc 1 1855 5 view .LVU117
1855:FreeRTOS/queue.c **** 				{
 387              		.loc 1 1855 9 is_stmt 0 view .LVU118
 388 0018 6B6A     		ldr	r3, [r5, #36]
1855:FreeRTOS/queue.c **** 				{
 389              		.loc 1 1855 7 view .LVU119
 390 001a 43B1     		cbz	r3, .L28
1857:FreeRTOS/queue.c **** 					{
 391              		.loc 1 1857 6 is_stmt 1 view .LVU120
1857:FreeRTOS/queue.c **** 					{
 392              		.loc 1 1857 10 is_stmt 0 view .LVU121
 393 001c 05F12400 		add	r0, r5, #36
 394 0020 FFF7FEFF 		bl	xTaskRemoveFromEventList
 395              	.LVL37:
1857:FreeRTOS/queue.c **** 					{
 396              		.loc 1 1857 8 view .LVU122
 397 0024 0028     		cmp	r0, #0
 398 0026 F3D0     		beq	.L29
1861:FreeRTOS/queue.c **** 					}
 399              		.loc 1 1861 7 is_stmt 1 view .LVU123
 400 0028 FFF7FEFF 		bl	vTaskMissedYield
 401              	.LVL38:
 402 002c F0E7     		b	.L29
 403              	.L28:
1878:FreeRTOS/queue.c **** 	}
 404              		.loc 1 1878 3 view .LVU124
1878:FreeRTOS/queue.c **** 	}
 405              		.loc 1 1878 20 is_stmt 0 view .LVU125
 406 002e FF23     		movs	r3, #255
 407 0030 85F84530 		strb	r3, [r5, #69]
 408              	.LBE23:
1880:FreeRTOS/queue.c **** 
 409              		.loc 1 1880 2 is_stmt 1 view .LVU126
 410 0034 FFF7FEFF 		bl	vPortExitCritical
 411              	.LVL39:
1883:FreeRTOS/queue.c **** 	{
 412              		.loc 1 1883 2 view .LVU127
 413 0038 FFF7FEFF 		bl	vPortEnterCritical
 414              	.LVL40:
 415              	.LBB24:
1885:FreeRTOS/queue.c **** 
 416              		.loc 1 1885 3 view .LVU128
1885:FreeRTOS/queue.c **** 
 417              		.loc 1 1885 10 is_stmt 0 view .LVU129
 418 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 419              	.LVL41:
1885:FreeRTOS/queue.c **** 
 420              		.loc 1 1885 10 view .LVU130
 421 0040 64B2     		sxtb	r4, r4
 422              	.LVL42:
1887:FreeRTOS/queue.c **** 		{
 423              		.loc 1 1887 3 is_stmt 1 view .LVU131
1887:FreeRTOS/queue.c **** 		{
 424              		.loc 1 1887 8 is_stmt 0 view .LVU132
 425 0042 01E0     		b	.L31
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 45


 426              	.L33:
1897:FreeRTOS/queue.c **** 				}
 427              		.loc 1 1897 30 is_stmt 1 view .LVU133
1900:FreeRTOS/queue.c **** 			}
 428              		.loc 1 1900 5 view .LVU134
 429 0044 013C     		subs	r4, r4, #1
 430              	.LVL43:
1900:FreeRTOS/queue.c **** 			}
 431              		.loc 1 1900 5 is_stmt 0 view .LVU135
 432 0046 64B2     		sxtb	r4, r4
 433              	.LVL44:
 434              	.L31:
1887:FreeRTOS/queue.c **** 		{
 435              		.loc 1 1887 8 is_stmt 1 view .LVU136
 436 0048 002C     		cmp	r4, #0
 437 004a 0ADD     		ble	.L32
1889:FreeRTOS/queue.c **** 			{
 438              		.loc 1 1889 4 view .LVU137
1889:FreeRTOS/queue.c **** 			{
 439              		.loc 1 1889 8 is_stmt 0 view .LVU138
 440 004c 2B69     		ldr	r3, [r5, #16]
1889:FreeRTOS/queue.c **** 			{
 441              		.loc 1 1889 6 view .LVU139
 442 004e 43B1     		cbz	r3, .L32
1891:FreeRTOS/queue.c **** 				{
 443              		.loc 1 1891 5 is_stmt 1 view .LVU140
1891:FreeRTOS/queue.c **** 				{
 444              		.loc 1 1891 9 is_stmt 0 view .LVU141
 445 0050 05F11000 		add	r0, r5, #16
 446 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 447              	.LVL45:
1891:FreeRTOS/queue.c **** 				{
 448              		.loc 1 1891 7 view .LVU142
 449 0058 0028     		cmp	r0, #0
 450 005a F3D0     		beq	.L33
1893:FreeRTOS/queue.c **** 				}
 451              		.loc 1 1893 6 is_stmt 1 view .LVU143
 452 005c FFF7FEFF 		bl	vTaskMissedYield
 453              	.LVL46:
 454 0060 F0E7     		b	.L33
 455              	.L32:
1908:FreeRTOS/queue.c **** 	}
 456              		.loc 1 1908 3 view .LVU144
1908:FreeRTOS/queue.c **** 	}
 457              		.loc 1 1908 20 is_stmt 0 view .LVU145
 458 0062 FF23     		movs	r3, #255
 459 0064 85F84430 		strb	r3, [r5, #68]
 460              	.LBE24:
1910:FreeRTOS/queue.c **** }
 461              		.loc 1 1910 2 is_stmt 1 view .LVU146
 462 0068 FFF7FEFF 		bl	vPortExitCritical
 463              	.LVL47:
1911:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 464              		.loc 1 1911 1 is_stmt 0 view .LVU147
 465 006c 38BD     		pop	{r3, r4, r5, pc}
1911:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 466              		.loc 1 1911 1 view .LVU148
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 46


 467              		.cfi_endproc
 468              	.LFE51:
 470              		.section	.text.xQueueGenericReset,"ax",%progbits
 471              		.align	1
 472              		.global	xQueueGenericReset
 473              		.syntax unified
 474              		.thumb
 475              		.thumb_func
 477              	xQueueGenericReset:
 478              	.LVL48:
 479              	.LFB34:
 280:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 480              		.loc 1 280 1 is_stmt 1 view -0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 280:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 484              		.loc 1 280 1 is_stmt 0 view .LVU150
 485 0000 38B5     		push	{r3, r4, r5, lr}
 486              	.LCFI5:
 487              		.cfi_def_cfa_offset 16
 488              		.cfi_offset 3, -16
 489              		.cfi_offset 4, -12
 490              		.cfi_offset 5, -8
 491              		.cfi_offset 14, -4
 492 0002 0446     		mov	r4, r0
 493 0004 0D46     		mov	r5, r1
 281:FreeRTOS/queue.c **** 
 494              		.loc 1 281 1 is_stmt 1 view .LVU151
 495              	.LVL49:
 283:FreeRTOS/queue.c **** 
 496              		.loc 1 283 25 view .LVU152
 285:FreeRTOS/queue.c **** 	{
 497              		.loc 1 285 2 view .LVU153
 498 0006 FFF7FEFF 		bl	vPortEnterCritical
 499              	.LVL50:
 287:FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 500              		.loc 1 287 3 view .LVU154
 287:FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 501              		.loc 1 287 28 is_stmt 0 view .LVU155
 502 000a 2368     		ldr	r3, [r4]
 287:FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 503              		.loc 1 287 48 view .LVU156
 504 000c E26B     		ldr	r2, [r4, #60]
 287:FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 505              		.loc 1 287 68 view .LVU157
 506 000e 216C     		ldr	r1, [r4, #64]
 287:FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 507              		.loc 1 287 37 view .LVU158
 508 0010 01FB0230 		mla	r0, r1, r2, r3
 287:FreeRTOS/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 509              		.loc 1 287 19 view .LVU159
 510 0014 6060     		str	r0, [r4, #4]
 288:FreeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 511              		.loc 1 288 3 is_stmt 1 view .LVU160
 288:FreeRTOS/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 512              		.loc 1 288 30 is_stmt 0 view .LVU161
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 47


 513 0016 0020     		movs	r0, #0
 514 0018 A063     		str	r0, [r4, #56]
 289:FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 515              		.loc 1 289 3 is_stmt 1 view .LVU162
 289:FreeRTOS/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 516              		.loc 1 289 22 is_stmt 0 view .LVU163
 517 001a A360     		str	r3, [r4, #8]
 290:FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 518              		.loc 1 290 3 is_stmt 1 view .LVU164
 290:FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 519              		.loc 1 290 67 is_stmt 0 view .LVU165
 520 001c 013A     		subs	r2, r2, #1
 290:FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 521              		.loc 1 290 43 view .LVU166
 522 001e 02FB0133 		mla	r3, r2, r1, r3
 290:FreeRTOS/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 523              		.loc 1 290 25 view .LVU167
 524 0022 E360     		str	r3, [r4, #12]
 291:FreeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 525              		.loc 1 291 3 is_stmt 1 view .LVU168
 291:FreeRTOS/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 526              		.loc 1 291 20 is_stmt 0 view .LVU169
 527 0024 FF23     		movs	r3, #255
 528 0026 84F84430 		strb	r3, [r4, #68]
 292:FreeRTOS/queue.c **** 
 529              		.loc 1 292 3 is_stmt 1 view .LVU170
 292:FreeRTOS/queue.c **** 
 530              		.loc 1 292 20 is_stmt 0 view .LVU171
 531 002a 84F84530 		strb	r3, [r4, #69]
 294:FreeRTOS/queue.c **** 		{
 532              		.loc 1 294 3 is_stmt 1 view .LVU172
 294:FreeRTOS/queue.c **** 		{
 533              		.loc 1 294 5 is_stmt 0 view .LVU173
 534 002e B5B9     		cbnz	r5, .L37
 301:FreeRTOS/queue.c **** 			{
 535              		.loc 1 301 4 is_stmt 1 view .LVU174
 301:FreeRTOS/queue.c **** 			{
 536              		.loc 1 301 8 is_stmt 0 view .LVU175
 537 0030 2369     		ldr	r3, [r4, #16]
 301:FreeRTOS/queue.c **** 			{
 538              		.loc 1 301 6 view .LVU176
 539 0032 1BB9     		cbnz	r3, .L40
 540              	.L38:
 324:FreeRTOS/queue.c **** 
 541              		.loc 1 324 2 is_stmt 1 view .LVU177
 542 0034 FFF7FEFF 		bl	vPortExitCritical
 543              	.LVL51:
 328:FreeRTOS/queue.c **** }
 544              		.loc 1 328 2 view .LVU178
 329:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 545              		.loc 1 329 1 is_stmt 0 view .LVU179
 546 0038 0120     		movs	r0, #1
 547 003a 38BD     		pop	{r3, r4, r5, pc}
 548              	.LVL52:
 549              	.L40:
 303:FreeRTOS/queue.c **** 				{
 550              		.loc 1 303 5 is_stmt 1 view .LVU180
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 48


 303:FreeRTOS/queue.c **** 				{
 551              		.loc 1 303 9 is_stmt 0 view .LVU181
 552 003c 04F11000 		add	r0, r4, #16
 553 0040 FFF7FEFF 		bl	xTaskRemoveFromEventList
 554              	.LVL53:
 303:FreeRTOS/queue.c **** 				{
 555              		.loc 1 303 7 view .LVU182
 556 0044 0028     		cmp	r0, #0
 557 0046 F5D0     		beq	.L38
 305:FreeRTOS/queue.c **** 				}
 558              		.loc 1 305 6 is_stmt 1 view .LVU183
 559 0048 4FF0E023 		mov	r3, #-536813568
 560 004c 4FF08052 		mov	r2, #268435456
 561 0050 C3F8042D 		str	r2, [r3, #3332]
 305:FreeRTOS/queue.c **** 				}
 562              		.loc 1 305 6 view .LVU184
 563              		.syntax unified
 564              	@ 305 "FreeRTOS/queue.c" 1
 565 0054 BFF34F8F 		dsb
 566              	@ 0 "" 2
 305:FreeRTOS/queue.c **** 				}
 567              		.loc 1 305 6 view .LVU185
 568              	@ 305 "FreeRTOS/queue.c" 1
 569 0058 BFF36F8F 		isb
 570              	@ 0 "" 2
 305:FreeRTOS/queue.c **** 				}
 571              		.loc 1 305 38 view .LVU186
 572              		.thumb
 573              		.syntax unified
 574 005c EAE7     		b	.L38
 575              	.L37:
 320:FreeRTOS/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 576              		.loc 1 320 4 view .LVU187
 577 005e 04F11000 		add	r0, r4, #16
 578 0062 FFF7FEFF 		bl	vListInitialise
 579              	.LVL54:
 321:FreeRTOS/queue.c **** 		}
 580              		.loc 1 321 4 view .LVU188
 581 0066 04F12400 		add	r0, r4, #36
 582 006a FFF7FEFF 		bl	vListInitialise
 583              	.LVL55:
 584 006e E1E7     		b	.L38
 585              		.cfi_endproc
 586              	.LFE34:
 588              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 589              		.align	1
 590              		.syntax unified
 591              		.thumb
 592              		.thumb_func
 594              	prvInitialiseNewQueue:
 595              	.LVL56:
 596              	.LFB36:
 433:FreeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 597              		.loc 1 433 1 view -0
 598              		.cfi_startproc
 599              		@ args = 4, pretend = 0, frame = 0
 600              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 49


 433:FreeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 601              		.loc 1 433 1 is_stmt 0 view .LVU190
 602 0000 10B5     		push	{r4, lr}
 603              	.LCFI6:
 604              		.cfi_def_cfa_offset 8
 605              		.cfi_offset 4, -8
 606              		.cfi_offset 14, -4
 607 0002 0346     		mov	r3, r0
 608              	.LVL57:
 433:FreeRTOS/queue.c **** 	/* Remove compiler warnings about unused parameters should
 609              		.loc 1 433 1 view .LVU191
 610 0004 0298     		ldr	r0, [sp, #8]
 611              	.LVL58:
 436:FreeRTOS/queue.c **** 
 612              		.loc 1 436 2 is_stmt 1 view .LVU192
 438:FreeRTOS/queue.c **** 	{
 613              		.loc 1 438 2 view .LVU193
 438:FreeRTOS/queue.c **** 	{
 614              		.loc 1 438 4 is_stmt 0 view .LVU194
 615 0006 0C46     		mov	r4, r1
 616 0008 31B9     		cbnz	r1, .L42
 444:FreeRTOS/queue.c **** 	}
 617              		.loc 1 444 3 is_stmt 1 view .LVU195
 444:FreeRTOS/queue.c **** 	}
 618              		.loc 1 444 22 is_stmt 0 view .LVU196
 619 000a 0060     		str	r0, [r0]
 620              	.L43:
 454:FreeRTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 621              		.loc 1 454 2 is_stmt 1 view .LVU197
 454:FreeRTOS/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 622              		.loc 1 454 23 is_stmt 0 view .LVU198
 623 000c C363     		str	r3, [r0, #60]
 455:FreeRTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 624              		.loc 1 455 2 is_stmt 1 view .LVU199
 455:FreeRTOS/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 625              		.loc 1 455 25 is_stmt 0 view .LVU200
 626 000e 0464     		str	r4, [r0, #64]
 456:FreeRTOS/queue.c **** 
 627              		.loc 1 456 2 is_stmt 1 view .LVU201
 456:FreeRTOS/queue.c **** 
 628              		.loc 1 456 11 is_stmt 0 view .LVU202
 629 0010 0121     		movs	r1, #1
 630              	.LVL59:
 456:FreeRTOS/queue.c **** 
 631              		.loc 1 456 11 view .LVU203
 632 0012 FFF7FEFF 		bl	xQueueGenericReset
 633              	.LVL60:
 470:FreeRTOS/queue.c **** }
 634              		.loc 1 470 33 is_stmt 1 view .LVU204
 471:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 635              		.loc 1 471 1 is_stmt 0 view .LVU205
 636 0016 10BD     		pop	{r4, pc}
 637              	.LVL61:
 638              	.L42:
 449:FreeRTOS/queue.c **** 	}
 639              		.loc 1 449 3 is_stmt 1 view .LVU206
 449:FreeRTOS/queue.c **** 	}
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 50


 640              		.loc 1 449 22 is_stmt 0 view .LVU207
 641 0018 0260     		str	r2, [r0]
 642 001a F7E7     		b	.L43
 643              		.cfi_endproc
 644              	.LFE36:
 646              		.section	.text.xQueueGenericCreate,"ax",%progbits
 647              		.align	1
 648              		.global	xQueueGenericCreate
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 653              	xQueueGenericCreate:
 654              	.LVL62:
 655              	.LFB35:
 387:FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 656              		.loc 1 387 2 is_stmt 1 view -0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
 387:FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 660              		.loc 1 387 2 is_stmt 0 view .LVU209
 661 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 662              	.LCFI7:
 663              		.cfi_def_cfa_offset 20
 664              		.cfi_offset 4, -20
 665              		.cfi_offset 5, -16
 666              		.cfi_offset 6, -12
 667              		.cfi_offset 7, -8
 668              		.cfi_offset 14, -4
 669 0002 83B0     		sub	sp, sp, #12
 670              	.LCFI8:
 671              		.cfi_def_cfa_offset 32
 672 0004 0446     		mov	r4, r0
 673 0006 1546     		mov	r5, r2
 388:FreeRTOS/queue.c **** 	size_t xQueueSizeInBytes;
 674              		.loc 1 388 2 is_stmt 1 view .LVU210
 389:FreeRTOS/queue.c **** 	uint8_t *pucQueueStorage;
 675              		.loc 1 389 2 view .LVU211
 390:FreeRTOS/queue.c **** 
 676              		.loc 1 390 2 view .LVU212
 392:FreeRTOS/queue.c **** 
 677              		.loc 1 392 52 view .LVU213
 394:FreeRTOS/queue.c **** 		{
 678              		.loc 1 394 3 view .LVU214
 394:FreeRTOS/queue.c **** 		{
 679              		.loc 1 394 5 is_stmt 0 view .LVU215
 680 0008 0F46     		mov	r7, r1
 681 000a 89B1     		cbz	r1, .L48
 403:FreeRTOS/queue.c **** 		}
 682              		.loc 1 403 4 is_stmt 1 view .LVU216
 403:FreeRTOS/queue.c **** 		}
 683              		.loc 1 403 22 is_stmt 0 view .LVU217
 684 000c 00FB01F0 		mul	r0, r0, r1
 685              	.LVL63:
 686              	.L46:
 406:FreeRTOS/queue.c **** 
 687              		.loc 1 406 3 is_stmt 1 view .LVU218
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 51


 406:FreeRTOS/queue.c **** 
 688              		.loc 1 406 30 is_stmt 0 view .LVU219
 689 0010 4830     		adds	r0, r0, #72
 690              	.LVL64:
 406:FreeRTOS/queue.c **** 
 691              		.loc 1 406 30 view .LVU220
 692 0012 FFF7FEFF 		bl	pvPortMalloc
 693              	.LVL65:
 408:FreeRTOS/queue.c **** 		{
 694              		.loc 1 408 3 is_stmt 1 view .LVU221
 408:FreeRTOS/queue.c **** 		{
 695              		.loc 1 408 5 is_stmt 0 view .LVU222
 696 0016 0646     		mov	r6, r0
 697 0018 38B1     		cbz	r0, .L45
 412:FreeRTOS/queue.c **** 
 698              		.loc 1 412 4 is_stmt 1 view .LVU223
 699              	.LVL66:
 423:FreeRTOS/queue.c **** 		}
 700              		.loc 1 423 4 view .LVU224
 701 001a 0090     		str	r0, [sp]
 702 001c 2B46     		mov	r3, r5
 703 001e 00F14802 		add	r2, r0, #72
 704              	.LVL67:
 423:FreeRTOS/queue.c **** 		}
 705              		.loc 1 423 4 is_stmt 0 view .LVU225
 706 0022 3946     		mov	r1, r7
 707 0024 2046     		mov	r0, r4
 708              	.LVL68:
 423:FreeRTOS/queue.c **** 		}
 709              		.loc 1 423 4 view .LVU226
 710 0026 FFF7FEFF 		bl	prvInitialiseNewQueue
 711              	.LVL69:
 426:FreeRTOS/queue.c **** 	}
 712              		.loc 1 426 3 is_stmt 1 view .LVU227
 713              	.L45:
 427:FreeRTOS/queue.c **** 
 714              		.loc 1 427 2 is_stmt 0 view .LVU228
 715 002a 3046     		mov	r0, r6
 716 002c 03B0     		add	sp, sp, #12
 717              	.LCFI9:
 718              		.cfi_remember_state
 719              		.cfi_def_cfa_offset 20
 720              		@ sp needed
 721 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 722              	.LVL70:
 723              	.L48:
 724              	.LCFI10:
 725              		.cfi_restore_state
 397:FreeRTOS/queue.c **** 		}
 726              		.loc 1 397 22 view .LVU229
 727 0030 0846     		mov	r0, r1
 728              	.LVL71:
 397:FreeRTOS/queue.c **** 		}
 729              		.loc 1 397 22 view .LVU230
 730 0032 EDE7     		b	.L46
 731              		.cfi_endproc
 732              	.LFE35:
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 52


 734              		.section	.text.xQueueGenericSend,"ax",%progbits
 735              		.align	1
 736              		.global	xQueueGenericSend
 737              		.syntax unified
 738              		.thumb
 739              		.thumb_func
 741              	xQueueGenericSend:
 742              	.LVL72:
 743              	.LFB39:
 724:FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 744              		.loc 1 724 1 is_stmt 1 view -0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 16
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 724:FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 748              		.loc 1 724 1 is_stmt 0 view .LVU232
 749 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 750              	.LCFI11:
 751              		.cfi_def_cfa_offset 20
 752              		.cfi_offset 4, -20
 753              		.cfi_offset 5, -16
 754              		.cfi_offset 6, -12
 755              		.cfi_offset 7, -8
 756              		.cfi_offset 14, -4
 757 0002 85B0     		sub	sp, sp, #20
 758              	.LCFI12:
 759              		.cfi_def_cfa_offset 40
 760 0004 0446     		mov	r4, r0
 761 0006 0F46     		mov	r7, r1
 762 0008 0192     		str	r2, [sp, #4]
 763 000a 1D46     		mov	r5, r3
 725:FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 764              		.loc 1 725 1 is_stmt 1 view .LVU233
 765              	.LVL73:
 726:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 766              		.loc 1 726 1 view .LVU234
 727:FreeRTOS/queue.c **** 
 767              		.loc 1 727 1 view .LVU235
 725:FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 768              		.loc 1 725 12 is_stmt 0 view .LVU236
 769 000c 0026     		movs	r6, #0
 770 000e 3DE0     		b	.L51
 771              	.LVL74:
 772              	.L52:
 752:FreeRTOS/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 773              		.loc 1 752 31 is_stmt 1 view .LVU237
 753:FreeRTOS/queue.c **** 
 774              		.loc 1 753 5 view .LVU238
 753:FreeRTOS/queue.c **** 
 775              		.loc 1 753 22 is_stmt 0 view .LVU239
 776 0010 2A46     		mov	r2, r5
 777 0012 3946     		mov	r1, r7
 778 0014 2046     		mov	r0, r4
 779 0016 FFF7FEFF 		bl	prvCopyDataToQueue
 780              	.LVL75:
 808:FreeRTOS/queue.c **** 					{
 781              		.loc 1 808 6 is_stmt 1 view .LVU240
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 53


 808:FreeRTOS/queue.c **** 					{
 782              		.loc 1 808 10 is_stmt 0 view .LVU241
 783 001a 636A     		ldr	r3, [r4, #36]
 808:FreeRTOS/queue.c **** 					{
 784              		.loc 1 808 8 view .LVU242
 785 001c 7BB9     		cbnz	r3, .L65
 823:FreeRTOS/queue.c **** 					{
 786              		.loc 1 823 11 is_stmt 1 view .LVU243
 823:FreeRTOS/queue.c **** 					{
 787              		.loc 1 823 13 is_stmt 0 view .LVU244
 788 001e 48B1     		cbz	r0, .L55
 829:FreeRTOS/queue.c **** 					}
 789              		.loc 1 829 7 is_stmt 1 view .LVU245
 790 0020 4FF0E023 		mov	r3, #-536813568
 791 0024 4FF08052 		mov	r2, #268435456
 792 0028 C3F8042D 		str	r2, [r3, #3332]
 829:FreeRTOS/queue.c **** 					}
 793              		.loc 1 829 7 view .LVU246
 794              		.syntax unified
 795              	@ 829 "FreeRTOS/queue.c" 1
 796 002c BFF34F8F 		dsb
 797              	@ 0 "" 2
 829:FreeRTOS/queue.c **** 					}
 798              		.loc 1 829 7 view .LVU247
 799              	@ 829 "FreeRTOS/queue.c" 1
 800 0030 BFF36F8F 		isb
 801              	@ 0 "" 2
 829:FreeRTOS/queue.c **** 					}
 802              		.loc 1 829 39 view .LVU248
 803              	.LVL76:
 804              		.thumb
 805              		.syntax unified
 806              	.L55:
 833:FreeRTOS/queue.c **** 					}
 807              		.loc 1 833 31 view .LVU249
 838:FreeRTOS/queue.c **** 				return pdPASS;
 808              		.loc 1 838 5 view .LVU250
 809 0034 FFF7FEFF 		bl	vPortExitCritical
 810              	.LVL77:
 839:FreeRTOS/queue.c **** 			}
 811              		.loc 1 839 5 view .LVU251
 839:FreeRTOS/queue.c **** 			}
 812              		.loc 1 839 12 is_stmt 0 view .LVU252
 813 0038 0120     		movs	r0, #1
 814              	.L50:
 918:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 815              		.loc 1 918 1 view .LVU253
 816 003a 05B0     		add	sp, sp, #20
 817              	.LCFI13:
 818              		.cfi_remember_state
 819              		.cfi_def_cfa_offset 20
 820              		@ sp needed
 821 003c F0BD     		pop	{r4, r5, r6, r7, pc}
 822              	.LVL78:
 823              	.L65:
 824              	.LCFI14:
 825              		.cfi_restore_state
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 54


 810:FreeRTOS/queue.c **** 						{
 826              		.loc 1 810 7 is_stmt 1 view .LVU254
 810:FreeRTOS/queue.c **** 						{
 827              		.loc 1 810 11 is_stmt 0 view .LVU255
 828 003e 04F12400 		add	r0, r4, #36
 829              	.LVL79:
 810:FreeRTOS/queue.c **** 						{
 830              		.loc 1 810 11 view .LVU256
 831 0042 FFF7FEFF 		bl	xTaskRemoveFromEventList
 832              	.LVL80:
 810:FreeRTOS/queue.c **** 						{
 833              		.loc 1 810 9 view .LVU257
 834 0046 0028     		cmp	r0, #0
 835 0048 F4D0     		beq	.L55
 816:FreeRTOS/queue.c **** 						}
 836              		.loc 1 816 8 is_stmt 1 view .LVU258
 837 004a 4FF0E023 		mov	r3, #-536813568
 838 004e 4FF08052 		mov	r2, #268435456
 839 0052 C3F8042D 		str	r2, [r3, #3332]
 816:FreeRTOS/queue.c **** 						}
 840              		.loc 1 816 8 view .LVU259
 841              		.syntax unified
 842              	@ 816 "FreeRTOS/queue.c" 1
 843 0056 BFF34F8F 		dsb
 844              	@ 0 "" 2
 816:FreeRTOS/queue.c **** 						}
 845              		.loc 1 816 8 view .LVU260
 846              	@ 816 "FreeRTOS/queue.c" 1
 847 005a BFF36F8F 		isb
 848              	@ 0 "" 2
 816:FreeRTOS/queue.c **** 						}
 849              		.loc 1 816 40 view .LVU261
 850              		.thumb
 851              		.syntax unified
 852 005e E9E7     		b	.L55
 853              	.L66:
 847:FreeRTOS/queue.c **** 
 854              		.loc 1 847 6 view .LVU262
 855 0060 FFF7FEFF 		bl	vPortExitCritical
 856              	.LVL81:
 851:FreeRTOS/queue.c **** 					return errQUEUE_FULL;
 857              		.loc 1 851 39 view .LVU263
 852:FreeRTOS/queue.c **** 				}
 858              		.loc 1 852 6 view .LVU264
 852:FreeRTOS/queue.c **** 				}
 859              		.loc 1 852 13 is_stmt 0 view .LVU265
 860 0064 0020     		movs	r0, #0
 861 0066 E8E7     		b	.L50
 862              	.L67:
 858:FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 863              		.loc 1 858 6 is_stmt 1 view .LVU266
 864 0068 02A8     		add	r0, sp, #8
 865 006a FFF7FEFF 		bl	vTaskSetTimeOutState
 866              	.LVL82:
 859:FreeRTOS/queue.c **** 				}
 867              		.loc 1 859 6 view .LVU267
 859:FreeRTOS/queue.c **** 				}
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 55


 868              		.loc 1 859 20 is_stmt 0 view .LVU268
 869 006e 0126     		movs	r6, #1
 870 0070 19E0     		b	.L58
 871              	.LVL83:
 872              	.L68:
 874:FreeRTOS/queue.c **** 
 873              		.loc 1 874 3 is_stmt 1 discriminator 1 view .LVU269
 874 0072 0023     		movs	r3, #0
 875 0074 84F84430 		strb	r3, [r4, #68]
 876 0078 21E0     		b	.L59
 877              	.L69:
 874:FreeRTOS/queue.c **** 
 878              		.loc 1 874 3 discriminator 4 view .LVU270
 879 007a 0023     		movs	r3, #0
 880 007c 84F84530 		strb	r3, [r4, #69]
 881 0080 23E0     		b	.L60
 882              	.L62:
 904:FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 883              		.loc 1 904 5 view .LVU271
 884 0082 2046     		mov	r0, r4
 885 0084 FFF7FEFF 		bl	prvUnlockQueue
 886              	.LVL84:
 905:FreeRTOS/queue.c **** 			}
 887              		.loc 1 905 5 view .LVU272
 905:FreeRTOS/queue.c **** 			}
 888              		.loc 1 905 14 is_stmt 0 view .LVU273
 889 0088 FFF7FEFF 		bl	xTaskResumeAll
 890              	.LVL85:
 891              	.L51:
 729:FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 892              		.loc 1 729 25 is_stmt 1 view .LVU274
 730:FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 893              		.loc 1 730 97 view .LVU275
 731:FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 894              		.loc 1 731 88 view .LVU276
 742:FreeRTOS/queue.c **** 	{
 895              		.loc 1 742 2 view .LVU277
 744:FreeRTOS/queue.c **** 		{
 896              		.loc 1 744 3 view .LVU278
 897 008c FFF7FEFF 		bl	vPortEnterCritical
 898              	.LVL86:
 750:FreeRTOS/queue.c **** 			{
 899              		.loc 1 750 4 view .LVU279
 750:FreeRTOS/queue.c **** 			{
 900              		.loc 1 750 17 is_stmt 0 view .LVU280
 901 0090 A26B     		ldr	r2, [r4, #56]
 750:FreeRTOS/queue.c **** 			{
 902              		.loc 1 750 46 view .LVU281
 903 0092 E36B     		ldr	r3, [r4, #60]
 750:FreeRTOS/queue.c **** 			{
 904              		.loc 1 750 6 view .LVU282
 905 0094 9A42     		cmp	r2, r3
 906 0096 BBD3     		bcc	.L52
 750:FreeRTOS/queue.c **** 			{
 907              		.loc 1 750 59 discriminator 1 view .LVU283
 908 0098 022D     		cmp	r5, #2
 909 009a B9D0     		beq	.L52
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 56


 843:FreeRTOS/queue.c **** 				{
 910              		.loc 1 843 5 is_stmt 1 view .LVU284
 843:FreeRTOS/queue.c **** 				{
 911              		.loc 1 843 22 is_stmt 0 view .LVU285
 912 009c 019B     		ldr	r3, [sp, #4]
 843:FreeRTOS/queue.c **** 				{
 913              		.loc 1 843 7 view .LVU286
 914 009e 002B     		cmp	r3, #0
 915 00a0 DED0     		beq	.L66
 854:FreeRTOS/queue.c **** 				{
 916              		.loc 1 854 10 is_stmt 1 view .LVU287
 854:FreeRTOS/queue.c **** 				{
 917              		.loc 1 854 12 is_stmt 0 view .LVU288
 918 00a2 002E     		cmp	r6, #0
 919 00a4 E0D0     		beq	.L67
 920              	.LVL87:
 921              	.L58:
 864:FreeRTOS/queue.c **** 				}
 922              		.loc 1 864 30 is_stmt 1 view .LVU289
 868:FreeRTOS/queue.c **** 
 923              		.loc 1 868 3 view .LVU290
 924 00a6 FFF7FEFF 		bl	vPortExitCritical
 925              	.LVL88:
 873:FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 926              		.loc 1 873 3 view .LVU291
 927 00aa FFF7FEFF 		bl	vTaskSuspendAll
 928              	.LVL89:
 874:FreeRTOS/queue.c **** 
 929              		.loc 1 874 3 view .LVU292
 930 00ae FFF7FEFF 		bl	vPortEnterCritical
 931              	.LVL90:
 874:FreeRTOS/queue.c **** 
 932              		.loc 1 874 3 view .LVU293
 933 00b2 94F84400 		ldrb	r0, [r4, #68]	@ zero_extendqisi2
 934 00b6 40B2     		sxtb	r0, r0
 935 00b8 B0F1FF3F 		cmp	r0, #-1
 936 00bc D9D0     		beq	.L68
 937              	.L59:
 874:FreeRTOS/queue.c **** 
 938              		.loc 1 874 3 discriminator 3 view .LVU294
 939 00be 94F84500 		ldrb	r0, [r4, #69]	@ zero_extendqisi2
 940 00c2 40B2     		sxtb	r0, r0
 941 00c4 B0F1FF3F 		cmp	r0, #-1
 942 00c8 D7D0     		beq	.L69
 943              	.L60:
 874:FreeRTOS/queue.c **** 
 944              		.loc 1 874 3 discriminator 6 view .LVU295
 945 00ca FFF7FEFF 		bl	vPortExitCritical
 946              	.LVL91:
 877:FreeRTOS/queue.c **** 		{
 947              		.loc 1 877 3 discriminator 6 view .LVU296
 877:FreeRTOS/queue.c **** 		{
 948              		.loc 1 877 7 is_stmt 0 discriminator 6 view .LVU297
 949 00ce 01A9     		add	r1, sp, #4
 950 00d0 02A8     		add	r0, sp, #8
 951 00d2 FFF7FEFF 		bl	xTaskCheckForTimeOut
 952              	.LVL92:
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 57


 877:FreeRTOS/queue.c **** 		{
 953              		.loc 1 877 5 discriminator 6 view .LVU298
 954 00d6 D8B9     		cbnz	r0, .L61
 879:FreeRTOS/queue.c **** 			{
 955              		.loc 1 879 4 is_stmt 1 view .LVU299
 879:FreeRTOS/queue.c **** 			{
 956              		.loc 1 879 8 is_stmt 0 view .LVU300
 957 00d8 2046     		mov	r0, r4
 958 00da FFF7FEFF 		bl	prvIsQueueFull
 959              	.LVL93:
 879:FreeRTOS/queue.c **** 			{
 960              		.loc 1 879 6 view .LVU301
 961 00de 0028     		cmp	r0, #0
 962 00e0 CFD0     		beq	.L62
 881:FreeRTOS/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 963              		.loc 1 881 43 is_stmt 1 view .LVU302
 882:FreeRTOS/queue.c **** 
 964              		.loc 1 882 5 view .LVU303
 965 00e2 0199     		ldr	r1, [sp, #4]
 966 00e4 04F11000 		add	r0, r4, #16
 967 00e8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 968              	.LVL94:
 889:FreeRTOS/queue.c **** 
 969              		.loc 1 889 5 view .LVU304
 970 00ec 2046     		mov	r0, r4
 971 00ee FFF7FEFF 		bl	prvUnlockQueue
 972              	.LVL95:
 896:FreeRTOS/queue.c **** 				{
 973              		.loc 1 896 5 view .LVU305
 896:FreeRTOS/queue.c **** 				{
 974              		.loc 1 896 9 is_stmt 0 view .LVU306
 975 00f2 FFF7FEFF 		bl	xTaskResumeAll
 976              	.LVL96:
 896:FreeRTOS/queue.c **** 				{
 977              		.loc 1 896 7 view .LVU307
 978 00f6 0028     		cmp	r0, #0
 979 00f8 C8D1     		bne	.L51
 898:FreeRTOS/queue.c **** 				}
 980              		.loc 1 898 6 is_stmt 1 view .LVU308
 981 00fa 4FF0E023 		mov	r3, #-536813568
 982 00fe 4FF08052 		mov	r2, #268435456
 983 0102 C3F8042D 		str	r2, [r3, #3332]
 898:FreeRTOS/queue.c **** 				}
 984              		.loc 1 898 6 view .LVU309
 985              		.syntax unified
 986              	@ 898 "FreeRTOS/queue.c" 1
 987 0106 BFF34F8F 		dsb
 988              	@ 0 "" 2
 898:FreeRTOS/queue.c **** 				}
 989              		.loc 1 898 6 view .LVU310
 990              	@ 898 "FreeRTOS/queue.c" 1
 991 010a BFF36F8F 		isb
 992              	@ 0 "" 2
 993              		.thumb
 994              		.syntax unified
 995 010e BDE7     		b	.L51
 996              	.L61:
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 58


 911:FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 997              		.loc 1 911 4 view .LVU311
 998 0110 2046     		mov	r0, r4
 999 0112 FFF7FEFF 		bl	prvUnlockQueue
 1000              	.LVL97:
 912:FreeRTOS/queue.c **** 
 1001              		.loc 1 912 4 view .LVU312
 912:FreeRTOS/queue.c **** 
 1002              		.loc 1 912 13 is_stmt 0 view .LVU313
 1003 0116 FFF7FEFF 		bl	xTaskResumeAll
 1004              	.LVL98:
 914:FreeRTOS/queue.c **** 			return errQUEUE_FULL;
 1005              		.loc 1 914 37 is_stmt 1 view .LVU314
 915:FreeRTOS/queue.c **** 		}
 1006              		.loc 1 915 4 view .LVU315
 915:FreeRTOS/queue.c **** 		}
 1007              		.loc 1 915 11 is_stmt 0 view .LVU316
 1008 011a 0020     		movs	r0, #0
 1009 011c 8DE7     		b	.L50
 1010              		.cfi_endproc
 1011              	.LFE39:
 1013              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1014              		.align	1
 1015              		.syntax unified
 1016              		.thumb
 1017              		.thumb_func
 1019              	prvInitialiseMutex:
 1020              	.LVL99:
 1021              	.LFB37:
 477:FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 1022              		.loc 1 477 2 is_stmt 1 view -0
 1023              		.cfi_startproc
 1024              		@ args = 0, pretend = 0, frame = 0
 1025              		@ frame_needed = 0, uses_anonymous_args = 0
 478:FreeRTOS/queue.c **** 		{
 1026              		.loc 1 478 3 view .LVU318
 478:FreeRTOS/queue.c **** 		{
 1027              		.loc 1 478 5 is_stmt 0 view .LVU319
 1028 0000 48B1     		cbz	r0, .L73
 477:FreeRTOS/queue.c **** 		if( pxNewQueue != NULL )
 1029              		.loc 1 477 2 view .LVU320
 1030 0002 08B5     		push	{r3, lr}
 1031              	.LCFI15:
 1032              		.cfi_def_cfa_offset 8
 1033              		.cfi_offset 3, -8
 1034              		.cfi_offset 14, -4
 484:FreeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1035              		.loc 1 484 4 is_stmt 1 view .LVU321
 484:FreeRTOS/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1036              		.loc 1 484 30 is_stmt 0 view .LVU322
 1037 0004 0021     		movs	r1, #0
 1038 0006 4160     		str	r1, [r0, #4]
 485:FreeRTOS/queue.c **** 
 1039              		.loc 1 485 4 is_stmt 1 view .LVU323
 485:FreeRTOS/queue.c **** 
 1040              		.loc 1 485 28 is_stmt 0 view .LVU324
 1041 0008 0160     		str	r1, [r0]
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 59


 488:FreeRTOS/queue.c **** 
 1042              		.loc 1 488 4 is_stmt 1 view .LVU325
 488:FreeRTOS/queue.c **** 
 1043              		.loc 1 488 39 is_stmt 0 view .LVU326
 1044 000a C160     		str	r1, [r0, #12]
 490:FreeRTOS/queue.c **** 
 1045              		.loc 1 490 35 is_stmt 1 view .LVU327
 493:FreeRTOS/queue.c **** 		}
 1046              		.loc 1 493 4 view .LVU328
 493:FreeRTOS/queue.c **** 		}
 1047              		.loc 1 493 13 is_stmt 0 view .LVU329
 1048 000c 0B46     		mov	r3, r1
 1049 000e 0A46     		mov	r2, r1
 1050 0010 FFF7FEFF 		bl	xQueueGenericSend
 1051              	.LVL100:
 497:FreeRTOS/queue.c **** 		}
 1052              		.loc 1 497 30 is_stmt 1 view .LVU330
 499:FreeRTOS/queue.c **** 
 1053              		.loc 1 499 2 is_stmt 0 view .LVU331
 1054 0014 08BD     		pop	{r3, pc}
 1055              	.LVL101:
 1056              	.L73:
 1057              	.LCFI16:
 1058              		.cfi_def_cfa_offset 0
 1059              		.cfi_restore 3
 1060              		.cfi_restore 14
 499:FreeRTOS/queue.c **** 
 1061              		.loc 1 499 2 view .LVU332
 1062 0016 7047     		bx	lr
 1063              		.cfi_endproc
 1064              	.LFE37:
 1066              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1067              		.align	1
 1068              		.global	xQueueCreateMutex
 1069              		.syntax unified
 1070              		.thumb
 1071              		.thumb_func
 1073              	xQueueCreateMutex:
 1074              	.LVL102:
 1075              	.LFB38:
 507:FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 1076              		.loc 1 507 2 is_stmt 1 view -0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 0
 1079              		@ frame_needed = 0, uses_anonymous_args = 0
 507:FreeRTOS/queue.c **** 	Queue_t *pxNewQueue;
 1080              		.loc 1 507 2 is_stmt 0 view .LVU334
 1081 0000 10B5     		push	{r4, lr}
 1082              	.LCFI17:
 1083              		.cfi_def_cfa_offset 8
 1084              		.cfi_offset 4, -8
 1085              		.cfi_offset 14, -4
 1086 0002 0246     		mov	r2, r0
 508:FreeRTOS/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 1087              		.loc 1 508 2 is_stmt 1 view .LVU335
 509:FreeRTOS/queue.c **** 
 1088              		.loc 1 509 2 view .LVU336
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 60


 1089              	.LVL103:
 511:FreeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1090              		.loc 1 511 3 view .LVU337
 511:FreeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1091              		.loc 1 511 30 is_stmt 0 view .LVU338
 1092 0004 0021     		movs	r1, #0
 1093 0006 0120     		movs	r0, #1
 1094              	.LVL104:
 511:FreeRTOS/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1095              		.loc 1 511 30 view .LVU339
 1096 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1097              	.LVL105:
 1098 000c 0446     		mov	r4, r0
 1099              	.LVL106:
 512:FreeRTOS/queue.c **** 
 1100              		.loc 1 512 3 is_stmt 1 view .LVU340
 1101 000e FFF7FEFF 		bl	prvInitialiseMutex
 1102              	.LVL107:
 514:FreeRTOS/queue.c **** 	}
 1103              		.loc 1 514 3 view .LVU341
 515:FreeRTOS/queue.c **** 
 1104              		.loc 1 515 2 is_stmt 0 view .LVU342
 1105 0012 2046     		mov	r0, r4
 1106 0014 10BD     		pop	{r4, pc}
 515:FreeRTOS/queue.c **** 
 1107              		.loc 1 515 2 view .LVU343
 1108              		.cfi_endproc
 1109              	.LFE38:
 1111              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1112              		.align	1
 1113              		.global	xQueueGenericSendFromISR
 1114              		.syntax unified
 1115              		.thumb
 1116              		.thumb_func
 1118              	xQueueGenericSendFromISR:
 1119              	.LVL108:
 1120              	.LFB40:
 922:FreeRTOS/queue.c **** BaseType_t xReturn;
 1121              		.loc 1 922 1 is_stmt 1 view -0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 0
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 922:FreeRTOS/queue.c **** BaseType_t xReturn;
 1125              		.loc 1 922 1 is_stmt 0 view .LVU345
 1126 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1127              	.LCFI18:
 1128              		.cfi_def_cfa_offset 24
 1129              		.cfi_offset 3, -24
 1130              		.cfi_offset 4, -20
 1131              		.cfi_offset 5, -16
 1132              		.cfi_offset 6, -12
 1133              		.cfi_offset 7, -8
 1134              		.cfi_offset 14, -4
 1135 0002 0446     		mov	r4, r0
 1136 0004 1746     		mov	r7, r2
 1137 0006 1A46     		mov	r2, r3
 1138              	.LVL109:
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 61


 923:FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1139              		.loc 1 923 1 is_stmt 1 view .LVU346
 924:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1140              		.loc 1 924 1 view .LVU347
 925:FreeRTOS/queue.c **** 
 1141              		.loc 1 925 1 view .LVU348
 927:FreeRTOS/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1142              		.loc 1 927 25 view .LVU349
 928:FreeRTOS/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1143              		.loc 1 928 97 view .LVU350
 929:FreeRTOS/queue.c **** 
 1144              		.loc 1 929 88 view .LVU351
 945:FreeRTOS/queue.c **** 
 1145              		.loc 1 945 44 view .LVU352
 952:FreeRTOS/queue.c **** 	{
 1146              		.loc 1 952 2 view .LVU353
 1147              	.LBB25:
 1148              	.LBI25:
 1149              		.file 2 "FreeRTOS/portable/ARM_CM3/portmacro.h"
   1:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:FreeRTOS/portable/ARM_CM3/portmacro.h ****     All rights reserved
   4:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
   5:FreeRTOS/portable/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
   7:FreeRTOS/portable/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
   9:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/portable/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  13:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  14:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  19:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  20:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/portable/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/portable/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  25:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  26:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *                                                                       *
  27:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *                                                                       *
  32:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *                                                                       *
  37:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  38:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 62


  39:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/portable/ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/portable/ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  43:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/portable/ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/portable/ARM_CM3/portmacro.h ****     participating in the support forum.
  46:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  47:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/portable/ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  52:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/portable/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/portable/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  56:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/portable/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  63:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/portable/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/portable/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/portable/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:FreeRTOS/portable/ARM_CM3/portmacro.h **** */
  69:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  70:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  71:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  74:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:FreeRTOS/portable/ARM_CM3/portmacro.h **** extern "C" {
  76:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
  77:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  78:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:FreeRTOS/portable/ARM_CM3/portmacro.h ****  *
  81:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:FreeRTOS/portable/ARM_CM3/portmacro.h ****  *
  84:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:FreeRTOS/portable/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:FreeRTOS/portable/ARM_CM3/portmacro.h ****  */
  87:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  88:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Type definitions. */
  89:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portCHAR		char
  90:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portLONG		long
  93:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSHORT		short
  94:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 63


  96:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  97:FreeRTOS/portable/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:FreeRTOS/portable/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:FreeRTOS/portable/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 101:FreeRTOS/portable/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:FreeRTOS/portable/ARM_CM3/portmacro.h **** #else
 105:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 112:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 114:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 120:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portYIELD() 															\
 122:FreeRTOS/portable/ARM_CM3/portmacro.h **** {																				\
 123:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:FreeRTOS/portable/ARM_CM3/portmacro.h **** 																				\
 126:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 131:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 132:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Critical section management. */
 139:FreeRTOS/portable/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:FreeRTOS/portable/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 148:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 150:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:FreeRTOS/portable/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:FreeRTOS/portable/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 64


 153:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 157:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 162:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 164:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 168:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 169:FreeRTOS/portable/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 171:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	{
 174:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 176:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		return ucReturn;
 178:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	}
 179:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 180:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#endif
 184:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 185:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 189:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 191:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 193:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 195:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 197:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 201:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 202:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portNOP()
 204:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 205:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 207:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 65


 210:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 211:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 213:FreeRTOS/portable/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:FreeRTOS/portable/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 216:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 219:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	{
 221:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	}
 223:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	else
 224:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	{
 225:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	}
 227:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 228:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	return xReturn;
 229:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 230:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 231:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 233:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 235:FreeRTOS/portable/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 236:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 237:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile
 238:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 239:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 242:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 243:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	);
 245:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 246:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 247:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 248:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 249:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1150              		.loc 2 249 34 view .LVU354
 1151              	.LBB26:
 250:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 251:FreeRTOS/portable/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1152              		.loc 2 251 1 view .LVU355
 252:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 253:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile
 1153              		.loc 2 253 2 view .LVU356
 1154              		.syntax unified
 1155              	@ 253 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1156 0008 EFF31186 			mrs r6, basepri											
 1157 000c 4FF05003 		mov r3, #80												
 1158 0010 83F31188 		msr basepri, r3											
 1159 0014 BFF36F8F 		isb														
 1160 0018 BFF34F8F 		dsb														
 1161              	
 1162              	@ 0 "" 2
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 66


 1163              	.LVL110:
 254:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 255:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 259:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 260:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	);
 262:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 263:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	warnings. */
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1164              		.loc 2 265 2 view .LVU357
 1165              		.loc 2 265 2 is_stmt 0 view .LVU358
 1166              		.thumb
 1167              		.syntax unified
 1168              	.LBE26:
 1169              	.LBE25:
 954:FreeRTOS/queue.c **** 		{
 1170              		.loc 1 954 3 is_stmt 1 view .LVU359
 954:FreeRTOS/queue.c **** 		{
 1171              		.loc 1 954 16 is_stmt 0 view .LVU360
 1172 001c 806B     		ldr	r0, [r0, #56]
 1173              	.LVL111:
 954:FreeRTOS/queue.c **** 		{
 1174              		.loc 1 954 45 view .LVU361
 1175 001e E36B     		ldr	r3, [r4, #60]
 954:FreeRTOS/queue.c **** 		{
 1176              		.loc 1 954 5 view .LVU362
 1177 0020 9842     		cmp	r0, r3
 1178 0022 05D3     		bcc	.L79
 954:FreeRTOS/queue.c **** 		{
 1179              		.loc 1 954 58 discriminator 1 view .LVU363
 1180 0024 022A     		cmp	r2, #2
 1181 0026 03D0     		beq	.L79
1063:FreeRTOS/queue.c **** 		}
 1182              		.loc 1 1063 12 view .LVU364
 1183 0028 0020     		movs	r0, #0
 1184              	.LVL112:
 1185              	.L80:
1066:FreeRTOS/queue.c **** 
 1186              		.loc 1 1066 2 is_stmt 1 view .LVU365
 1187              	.LBB27:
 1188              	.LBI27:
 266:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 267:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 268:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 269:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1189              		.loc 2 269 30 view .LVU366
 1190              	.LBB28:
 270:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 271:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile
 1191              		.loc 2 271 2 view .LVU367
 1192              		.syntax unified
 1193              	@ 271 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1194 002a 86F31188 			msr basepri, r6	
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 67


 1195              	@ 0 "" 2
 1196              	.LVL113:
 1197              		.loc 2 271 2 is_stmt 0 view .LVU368
 1198              		.thumb
 1199              		.syntax unified
 1200              	.LBE28:
 1201              	.LBE27:
1068:FreeRTOS/queue.c **** }
 1202              		.loc 1 1068 2 is_stmt 1 view .LVU369
1069:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1203              		.loc 1 1069 1 is_stmt 0 view .LVU370
 1204 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1205              	.LVL114:
 1206              	.L79:
 1207              	.LBB29:
 956:FreeRTOS/queue.c **** 
 1208              		.loc 1 956 4 is_stmt 1 view .LVU371
 956:FreeRTOS/queue.c **** 
 1209              		.loc 1 956 17 is_stmt 0 view .LVU372
 1210 0030 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1211 0034 6DB2     		sxtb	r5, r5
 1212              	.LVL115:
 958:FreeRTOS/queue.c **** 
 1213              		.loc 1 958 39 is_stmt 1 view .LVU373
 965:FreeRTOS/queue.c **** 
 1214              		.loc 1 965 4 view .LVU374
 965:FreeRTOS/queue.c **** 
 1215              		.loc 1 965 13 is_stmt 0 view .LVU375
 1216 0036 2046     		mov	r0, r4
 1217 0038 FFF7FEFF 		bl	prvCopyDataToQueue
 1218              	.LVL116:
 969:FreeRTOS/queue.c **** 			{
 1219              		.loc 1 969 4 is_stmt 1 view .LVU376
 969:FreeRTOS/queue.c **** 			{
 1220              		.loc 1 969 6 is_stmt 0 view .LVU377
 1221 003c B5F1FF3F 		cmp	r5, #-1
 1222 0040 05D0     		beq	.L87
1055:FreeRTOS/queue.c **** 			}
 1223              		.loc 1 1055 5 is_stmt 1 view .LVU378
1055:FreeRTOS/queue.c **** 			}
 1224              		.loc 1 1055 45 is_stmt 0 view .LVU379
 1225 0042 0135     		adds	r5, r5, #1
 1226              	.LVL117:
1055:FreeRTOS/queue.c **** 			}
 1227              		.loc 1 1055 24 view .LVU380
 1228 0044 6DB2     		sxtb	r5, r5
 1229              	.LVL118:
1055:FreeRTOS/queue.c **** 			}
 1230              		.loc 1 1055 22 view .LVU381
 1231 0046 84F84550 		strb	r5, [r4, #69]
1058:FreeRTOS/queue.c **** 		}
 1232              		.loc 1 1058 12 view .LVU382
 1233 004a 0120     		movs	r0, #1
 1234 004c EDE7     		b	.L80
 1235              	.LVL119:
 1236              	.L87:
1024:FreeRTOS/queue.c **** 					{
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 68


 1237              		.loc 1 1024 6 is_stmt 1 view .LVU383
1024:FreeRTOS/queue.c **** 					{
 1238              		.loc 1 1024 10 is_stmt 0 view .LVU384
 1239 004e 636A     		ldr	r3, [r4, #36]
1024:FreeRTOS/queue.c **** 					{
 1240              		.loc 1 1024 8 view .LVU385
 1241 0050 0BB9     		cbnz	r3, .L88
1058:FreeRTOS/queue.c **** 		}
 1242              		.loc 1 1058 12 view .LVU386
 1243 0052 0120     		movs	r0, #1
 1244 0054 E9E7     		b	.L80
 1245              	.L88:
1026:FreeRTOS/queue.c **** 						{
 1246              		.loc 1 1026 7 is_stmt 1 view .LVU387
1026:FreeRTOS/queue.c **** 						{
 1247              		.loc 1 1026 11 is_stmt 0 view .LVU388
 1248 0056 04F12400 		add	r0, r4, #36
 1249 005a FFF7FEFF 		bl	xTaskRemoveFromEventList
 1250              	.LVL120:
1026:FreeRTOS/queue.c **** 						{
 1251              		.loc 1 1026 9 view .LVU389
 1252 005e 18B1     		cbz	r0, .L84
1030:FreeRTOS/queue.c **** 							{
 1253              		.loc 1 1030 8 is_stmt 1 view .LVU390
1030:FreeRTOS/queue.c **** 							{
 1254              		.loc 1 1030 10 is_stmt 0 view .LVU391
 1255 0060 27B1     		cbz	r7, .L85
1032:FreeRTOS/queue.c **** 							}
 1256              		.loc 1 1032 9 is_stmt 1 view .LVU392
1032:FreeRTOS/queue.c **** 							}
 1257              		.loc 1 1032 36 is_stmt 0 view .LVU393
 1258 0062 0120     		movs	r0, #1
 1259 0064 3860     		str	r0, [r7]
 1260 0066 E0E7     		b	.L80
 1261              	.L84:
1058:FreeRTOS/queue.c **** 		}
 1262              		.loc 1 1058 12 view .LVU394
 1263 0068 0120     		movs	r0, #1
 1264 006a DEE7     		b	.L80
 1265              	.L85:
 1266 006c 0120     		movs	r0, #1
 1267 006e DCE7     		b	.L80
 1268              	.LBE29:
 1269              		.cfi_endproc
 1270              	.LFE40:
 1272              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1273              		.align	1
 1274              		.global	xQueueGiveFromISR
 1275              		.syntax unified
 1276              		.thumb
 1277              		.thumb_func
 1279              	xQueueGiveFromISR:
 1280              	.LVL121:
 1281              	.LFB41:
1073:FreeRTOS/queue.c **** BaseType_t xReturn;
 1282              		.loc 1 1073 1 is_stmt 1 view -0
 1283              		.cfi_startproc
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 69


 1284              		@ args = 0, pretend = 0, frame = 0
 1285              		@ frame_needed = 0, uses_anonymous_args = 0
1073:FreeRTOS/queue.c **** BaseType_t xReturn;
 1286              		.loc 1 1073 1 is_stmt 0 view .LVU396
 1287 0000 38B5     		push	{r3, r4, r5, lr}
 1288              	.LCFI19:
 1289              		.cfi_def_cfa_offset 16
 1290              		.cfi_offset 3, -16
 1291              		.cfi_offset 4, -12
 1292              		.cfi_offset 5, -8
 1293              		.cfi_offset 14, -4
1074:FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1294              		.loc 1 1074 1 is_stmt 1 view .LVU397
1075:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1295              		.loc 1 1075 1 view .LVU398
1076:FreeRTOS/queue.c **** 
 1296              		.loc 1 1076 1 view .LVU399
 1297              	.LVL122:
1084:FreeRTOS/queue.c **** 
 1298              		.loc 1 1084 25 view .LVU400
1088:FreeRTOS/queue.c **** 
 1299              		.loc 1 1088 42 view .LVU401
1093:FreeRTOS/queue.c **** 
 1300              		.loc 1 1093 108 view .LVU402
1109:FreeRTOS/queue.c **** 
 1301              		.loc 1 1109 44 view .LVU403
1111:FreeRTOS/queue.c **** 	{
 1302              		.loc 1 1111 2 view .LVU404
 1303              	.LBB30:
 1304              	.LBI30:
 249:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 1305              		.loc 2 249 34 view .LVU405
 1306              	.LBB31:
 251:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 1307              		.loc 2 251 1 view .LVU406
 253:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 1308              		.loc 2 253 2 view .LVU407
 1309              		.syntax unified
 1310              	@ 253 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1311 0002 EFF31184 			mrs r4, basepri											
 1312 0006 4FF05003 		mov r3, #80												
 1313 000a 83F31188 		msr basepri, r3											
 1314 000e BFF36F8F 		isb														
 1315 0012 BFF34F8F 		dsb														
 1316              	
 1317              	@ 0 "" 2
 1318              	.LVL123:
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 1319              		.loc 2 265 2 view .LVU408
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 1320              		.loc 2 265 2 is_stmt 0 view .LVU409
 1321              		.thumb
 1322              		.syntax unified
 1323              	.LBE31:
 1324              	.LBE30:
 1325              	.LBB32:
1113:FreeRTOS/queue.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 70


 1326              		.loc 1 1113 3 is_stmt 1 view .LVU410
1113:FreeRTOS/queue.c **** 
 1327              		.loc 1 1113 21 is_stmt 0 view .LVU411
 1328 0016 826B     		ldr	r2, [r0, #56]
 1329              	.LVL124:
1118:FreeRTOS/queue.c **** 		{
 1330              		.loc 1 1118 3 is_stmt 1 view .LVU412
1118:FreeRTOS/queue.c **** 		{
 1331              		.loc 1 1118 34 is_stmt 0 view .LVU413
 1332 0018 C36B     		ldr	r3, [r0, #60]
1118:FreeRTOS/queue.c **** 		{
 1333              		.loc 1 1118 5 view .LVU414
 1334 001a 9342     		cmp	r3, r2
 1335 001c 1AD9     		bls	.L92
 1336 001e 0D46     		mov	r5, r1
 1337              	.LBB33:
1120:FreeRTOS/queue.c **** 
 1338              		.loc 1 1120 4 is_stmt 1 view .LVU415
1120:FreeRTOS/queue.c **** 
 1339              		.loc 1 1120 17 is_stmt 0 view .LVU416
 1340 0020 90F84530 		ldrb	r3, [r0, #69]	@ zero_extendqisi2
 1341 0024 5BB2     		sxtb	r3, r3
 1342              	.LVL125:
1122:FreeRTOS/queue.c **** 
 1343              		.loc 1 1122 39 is_stmt 1 view .LVU417
1130:FreeRTOS/queue.c **** 
 1344              		.loc 1 1130 4 view .LVU418
1130:FreeRTOS/queue.c **** 
 1345              		.loc 1 1130 51 is_stmt 0 view .LVU419
 1346 0026 0132     		adds	r2, r2, #1
 1347              	.LVL126:
1130:FreeRTOS/queue.c **** 
 1348              		.loc 1 1130 31 view .LVU420
 1349 0028 8263     		str	r2, [r0, #56]
1134:FreeRTOS/queue.c **** 			{
 1350              		.loc 1 1134 4 is_stmt 1 view .LVU421
1134:FreeRTOS/queue.c **** 			{
 1351              		.loc 1 1134 6 is_stmt 0 view .LVU422
 1352 002a B3F1FF3F 		cmp	r3, #-1
 1353 002e 05D0     		beq	.L97
1220:FreeRTOS/queue.c **** 			}
 1354              		.loc 1 1220 5 is_stmt 1 view .LVU423
1220:FreeRTOS/queue.c **** 			}
 1355              		.loc 1 1220 45 is_stmt 0 view .LVU424
 1356 0030 0133     		adds	r3, r3, #1
 1357              	.LVL127:
1220:FreeRTOS/queue.c **** 			}
 1358              		.loc 1 1220 24 view .LVU425
 1359 0032 5BB2     		sxtb	r3, r3
 1360              	.LVL128:
1220:FreeRTOS/queue.c **** 			}
 1361              		.loc 1 1220 22 view .LVU426
 1362 0034 80F84530 		strb	r3, [r0, #69]
1223:FreeRTOS/queue.c **** 		}
 1363              		.loc 1 1223 12 view .LVU427
 1364 0038 0120     		movs	r0, #1
 1365              	.LVL129:
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 71


1223:FreeRTOS/queue.c **** 		}
 1366              		.loc 1 1223 12 view .LVU428
 1367 003a 0CE0     		b	.L90
 1368              	.LVL130:
 1369              	.L97:
1189:FreeRTOS/queue.c **** 					{
 1370              		.loc 1 1189 6 is_stmt 1 view .LVU429
1189:FreeRTOS/queue.c **** 					{
 1371              		.loc 1 1189 10 is_stmt 0 view .LVU430
 1372 003c 436A     		ldr	r3, [r0, #36]
 1373              	.LVL131:
1189:FreeRTOS/queue.c **** 					{
 1374              		.loc 1 1189 8 view .LVU431
 1375 003e 0BB9     		cbnz	r3, .L98
1223:FreeRTOS/queue.c **** 		}
 1376              		.loc 1 1223 12 view .LVU432
 1377 0040 0120     		movs	r0, #1
 1378              	.LVL132:
1223:FreeRTOS/queue.c **** 		}
 1379              		.loc 1 1223 12 view .LVU433
 1380 0042 08E0     		b	.L90
 1381              	.LVL133:
 1382              	.L98:
1191:FreeRTOS/queue.c **** 						{
 1383              		.loc 1 1191 7 is_stmt 1 view .LVU434
1191:FreeRTOS/queue.c **** 						{
 1384              		.loc 1 1191 11 is_stmt 0 view .LVU435
 1385 0044 2430     		adds	r0, r0, #36
 1386              	.LVL134:
1191:FreeRTOS/queue.c **** 						{
 1387              		.loc 1 1191 11 view .LVU436
 1388 0046 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1389              	.LVL135:
1191:FreeRTOS/queue.c **** 						{
 1390              		.loc 1 1191 9 view .LVU437
 1391 004a 38B1     		cbz	r0, .L94
1195:FreeRTOS/queue.c **** 							{
 1392              		.loc 1 1195 8 is_stmt 1 view .LVU438
1195:FreeRTOS/queue.c **** 							{
 1393              		.loc 1 1195 10 is_stmt 0 view .LVU439
 1394 004c 45B1     		cbz	r5, .L95
1197:FreeRTOS/queue.c **** 							}
 1395              		.loc 1 1197 9 is_stmt 1 view .LVU440
1197:FreeRTOS/queue.c **** 							}
 1396              		.loc 1 1197 36 is_stmt 0 view .LVU441
 1397 004e 0120     		movs	r0, #1
 1398 0050 2860     		str	r0, [r5]
 1399 0052 00E0     		b	.L90
 1400              	.LVL136:
 1401              	.L92:
1197:FreeRTOS/queue.c **** 							}
 1402              		.loc 1 1197 36 view .LVU442
 1403              	.LBE33:
1228:FreeRTOS/queue.c **** 		}
 1404              		.loc 1 1228 12 view .LVU443
 1405 0054 0020     		movs	r0, #0
 1406              	.LVL137:
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 72


 1407              	.L90:
1228:FreeRTOS/queue.c **** 		}
 1408              		.loc 1 1228 12 view .LVU444
 1409              	.LBE32:
1231:FreeRTOS/queue.c **** 
 1410              		.loc 1 1231 2 is_stmt 1 view .LVU445
 1411              	.LBB35:
 1412              	.LBI35:
 269:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 1413              		.loc 2 269 30 view .LVU446
 1414              	.LBB36:
 1415              		.loc 2 271 2 view .LVU447
 1416              		.syntax unified
 1417              	@ 271 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1418 0056 84F31188 			msr basepri, r4	
 1419              	@ 0 "" 2
 1420              	.LVL138:
 1421              		.loc 2 271 2 is_stmt 0 view .LVU448
 1422              		.thumb
 1423              		.syntax unified
 1424              	.LBE36:
 1425              	.LBE35:
1233:FreeRTOS/queue.c **** }
 1426              		.loc 1 1233 2 is_stmt 1 view .LVU449
1234:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1427              		.loc 1 1234 1 is_stmt 0 view .LVU450
 1428 005a 38BD     		pop	{r3, r4, r5, pc}
 1429              	.LVL139:
 1430              	.L94:
 1431              	.LBB37:
 1432              	.LBB34:
1223:FreeRTOS/queue.c **** 		}
 1433              		.loc 1 1223 12 view .LVU451
 1434 005c 0120     		movs	r0, #1
 1435 005e FAE7     		b	.L90
 1436              	.L95:
 1437 0060 0120     		movs	r0, #1
 1438 0062 F8E7     		b	.L90
 1439              	.LBE34:
 1440              	.LBE37:
 1441              		.cfi_endproc
 1442              	.LFE41:
 1444              		.section	.text.xQueueGenericReceive,"ax",%progbits
 1445              		.align	1
 1446              		.global	xQueueGenericReceive
 1447              		.syntax unified
 1448              		.thumb
 1449              		.thumb_func
 1451              	xQueueGenericReceive:
 1452              	.LVL140:
 1453              	.LFB42:
1238:FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1454              		.loc 1 1238 1 is_stmt 1 view -0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 16
 1457              		@ frame_needed = 0, uses_anonymous_args = 0
1238:FreeRTOS/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 73


 1458              		.loc 1 1238 1 is_stmt 0 view .LVU453
 1459 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1460              	.LCFI20:
 1461              		.cfi_def_cfa_offset 24
 1462              		.cfi_offset 4, -24
 1463              		.cfi_offset 5, -20
 1464              		.cfi_offset 6, -16
 1465              		.cfi_offset 7, -12
 1466              		.cfi_offset 8, -8
 1467              		.cfi_offset 14, -4
 1468 0004 84B0     		sub	sp, sp, #16
 1469              	.LCFI21:
 1470              		.cfi_def_cfa_offset 40
 1471 0006 0446     		mov	r4, r0
 1472 0008 8846     		mov	r8, r1
 1473 000a 0192     		str	r2, [sp, #4]
 1474 000c 1E46     		mov	r6, r3
1239:FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 1475              		.loc 1 1239 1 is_stmt 1 view .LVU454
 1476              	.LVL141:
1240:FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
 1477              		.loc 1 1240 1 view .LVU455
1241:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1478              		.loc 1 1241 1 view .LVU456
1242:FreeRTOS/queue.c **** 
 1479              		.loc 1 1242 1 view .LVU457
1239:FreeRTOS/queue.c **** TimeOut_t xTimeOut;
 1480              		.loc 1 1239 12 is_stmt 0 view .LVU458
 1481 000e 0025     		movs	r5, #0
 1482 0010 64E0     		b	.L100
 1483              	.LVL142:
 1484              	.L118:
 1485              	.LBB38:
1268:FreeRTOS/queue.c **** 
 1486              		.loc 1 1268 5 is_stmt 1 view .LVU459
1268:FreeRTOS/queue.c **** 
 1487              		.loc 1 1268 28 is_stmt 0 view .LVU460
 1488 0012 E568     		ldr	r5, [r4, #12]
 1489              	.LVL143:
1270:FreeRTOS/queue.c **** 
 1490              		.loc 1 1270 5 is_stmt 1 view .LVU461
 1491 0014 4146     		mov	r1, r8
 1492 0016 2046     		mov	r0, r4
 1493 0018 FFF7FEFF 		bl	prvCopyDataFromQueue
 1494              	.LVL144:
1272:FreeRTOS/queue.c **** 				{
 1495              		.loc 1 1272 5 view .LVU462
1272:FreeRTOS/queue.c **** 				{
 1496              		.loc 1 1272 7 is_stmt 0 view .LVU463
 1497 001c 06BB     		cbnz	r6, .L102
1274:FreeRTOS/queue.c **** 
 1498              		.loc 1 1274 35 is_stmt 1 view .LVU464
1277:FreeRTOS/queue.c **** 
 1499              		.loc 1 1277 6 view .LVU465
1277:FreeRTOS/queue.c **** 
 1500              		.loc 1 1277 53 is_stmt 0 view .LVU466
 1501 001e 7B1E     		subs	r3, r7, #1
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 74


1277:FreeRTOS/queue.c **** 
 1502              		.loc 1 1277 33 view .LVU467
 1503 0020 A363     		str	r3, [r4, #56]
1281:FreeRTOS/queue.c **** 						{
 1504              		.loc 1 1281 7 is_stmt 1 view .LVU468
1281:FreeRTOS/queue.c **** 						{
 1505              		.loc 1 1281 18 is_stmt 0 view .LVU469
 1506 0022 2368     		ldr	r3, [r4]
1281:FreeRTOS/queue.c **** 						{
 1507              		.loc 1 1281 9 view .LVU470
 1508 0024 3BB1     		cbz	r3, .L115
 1509              	.L103:
1289:FreeRTOS/queue.c **** 						}
 1510              		.loc 1 1289 32 is_stmt 1 view .LVU471
1294:FreeRTOS/queue.c **** 					{
 1511              		.loc 1 1294 6 view .LVU472
1294:FreeRTOS/queue.c **** 					{
 1512              		.loc 1 1294 10 is_stmt 0 view .LVU473
 1513 0026 2369     		ldr	r3, [r4, #16]
1294:FreeRTOS/queue.c **** 					{
 1514              		.loc 1 1294 8 view .LVU474
 1515 0028 4BB9     		cbnz	r3, .L116
 1516              	.L104:
1334:FreeRTOS/queue.c **** 					}
 1517              		.loc 1 1334 31 is_stmt 1 view .LVU475
1338:FreeRTOS/queue.c **** 				return pdPASS;
 1518              		.loc 1 1338 5 view .LVU476
 1519 002a FFF7FEFF 		bl	vPortExitCritical
 1520              	.LVL145:
1339:FreeRTOS/queue.c **** 			}
 1521              		.loc 1 1339 5 view .LVU477
1339:FreeRTOS/queue.c **** 			}
 1522              		.loc 1 1339 12 is_stmt 0 view .LVU478
 1523 002e 0120     		movs	r0, #1
 1524              	.LVL146:
 1525              	.L99:
1339:FreeRTOS/queue.c **** 			}
 1526              		.loc 1 1339 12 view .LVU479
 1527              	.LBE38:
1431:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1528              		.loc 1 1431 1 view .LVU480
 1529 0030 04B0     		add	sp, sp, #16
 1530              	.LCFI22:
 1531              		.cfi_remember_state
 1532              		.cfi_def_cfa_offset 24
 1533              		@ sp needed
 1534 0032 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1535              	.LVL147:
 1536              	.L115:
 1537              	.LCFI23:
 1538              		.cfi_restore_state
 1539              	.LBB39:
1285:FreeRTOS/queue.c **** 						}
 1540              		.loc 1 1285 8 is_stmt 1 view .LVU481
1285:FreeRTOS/queue.c **** 						}
 1541              		.loc 1 1285 46 is_stmt 0 view .LVU482
 1542 0036 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 75


 1543              	.LVL148:
1285:FreeRTOS/queue.c **** 						}
 1544              		.loc 1 1285 31 view .LVU483
 1545 003a 6060     		str	r0, [r4, #4]
 1546 003c F3E7     		b	.L103
 1547              	.L116:
1296:FreeRTOS/queue.c **** 						{
 1548              		.loc 1 1296 7 is_stmt 1 view .LVU484
1296:FreeRTOS/queue.c **** 						{
 1549              		.loc 1 1296 11 is_stmt 0 view .LVU485
 1550 003e 04F11000 		add	r0, r4, #16
 1551 0042 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1552              	.LVL149:
1296:FreeRTOS/queue.c **** 						{
 1553              		.loc 1 1296 9 view .LVU486
 1554 0046 0028     		cmp	r0, #0
 1555 0048 EFD0     		beq	.L104
1298:FreeRTOS/queue.c **** 						}
 1556              		.loc 1 1298 8 is_stmt 1 view .LVU487
 1557 004a 4FF0E023 		mov	r3, #-536813568
 1558 004e 4FF08052 		mov	r2, #268435456
 1559 0052 C3F8042D 		str	r2, [r3, #3332]
1298:FreeRTOS/queue.c **** 						}
 1560              		.loc 1 1298 8 view .LVU488
 1561              		.syntax unified
 1562              	@ 1298 "FreeRTOS/queue.c" 1
 1563 0056 BFF34F8F 		dsb
 1564              	@ 0 "" 2
1298:FreeRTOS/queue.c **** 						}
 1565              		.loc 1 1298 8 view .LVU489
 1566              	@ 1298 "FreeRTOS/queue.c" 1
 1567 005a BFF36F8F 		isb
 1568              	@ 0 "" 2
1298:FreeRTOS/queue.c **** 						}
 1569              		.loc 1 1298 40 view .LVU490
 1570              		.thumb
 1571              		.syntax unified
 1572 005e E4E7     		b	.L104
 1573              	.L102:
1312:FreeRTOS/queue.c **** 
 1574              		.loc 1 1312 32 view .LVU491
1316:FreeRTOS/queue.c **** 
 1575              		.loc 1 1316 6 view .LVU492
1316:FreeRTOS/queue.c **** 
 1576              		.loc 1 1316 28 is_stmt 0 view .LVU493
 1577 0060 E560     		str	r5, [r4, #12]
1320:FreeRTOS/queue.c **** 					{
 1578              		.loc 1 1320 6 is_stmt 1 view .LVU494
1320:FreeRTOS/queue.c **** 					{
 1579              		.loc 1 1320 10 is_stmt 0 view .LVU495
 1580 0062 636A     		ldr	r3, [r4, #36]
1320:FreeRTOS/queue.c **** 					{
 1581              		.loc 1 1320 8 view .LVU496
 1582 0064 002B     		cmp	r3, #0
 1583 0066 E0D0     		beq	.L104
1322:FreeRTOS/queue.c **** 						{
 1584              		.loc 1 1322 7 is_stmt 1 view .LVU497
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 76


1322:FreeRTOS/queue.c **** 						{
 1585              		.loc 1 1322 11 is_stmt 0 view .LVU498
 1586 0068 04F12400 		add	r0, r4, #36
 1587 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1588              	.LVL150:
1322:FreeRTOS/queue.c **** 						{
 1589              		.loc 1 1322 9 view .LVU499
 1590 0070 0028     		cmp	r0, #0
 1591 0072 DAD0     		beq	.L104
1325:FreeRTOS/queue.c **** 						}
 1592              		.loc 1 1325 8 is_stmt 1 view .LVU500
 1593 0074 4FF0E023 		mov	r3, #-536813568
 1594 0078 4FF08052 		mov	r2, #268435456
 1595 007c C3F8042D 		str	r2, [r3, #3332]
1325:FreeRTOS/queue.c **** 						}
 1596              		.loc 1 1325 8 view .LVU501
 1597              		.syntax unified
 1598              	@ 1325 "FreeRTOS/queue.c" 1
 1599 0080 BFF34F8F 		dsb
 1600              	@ 0 "" 2
1325:FreeRTOS/queue.c **** 						}
 1601              		.loc 1 1325 8 view .LVU502
 1602              	@ 1325 "FreeRTOS/queue.c" 1
 1603 0084 BFF36F8F 		isb
 1604              	@ 0 "" 2
1325:FreeRTOS/queue.c **** 						}
 1605              		.loc 1 1325 40 view .LVU503
 1606              		.thumb
 1607              		.syntax unified
 1608 0088 CFE7     		b	.L104
 1609              	.LVL151:
 1610              	.L119:
1347:FreeRTOS/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1611              		.loc 1 1347 6 view .LVU504
 1612 008a FFF7FEFF 		bl	vPortExitCritical
 1613              	.LVL152:
1348:FreeRTOS/queue.c **** 					return errQUEUE_EMPTY;
 1614              		.loc 1 1348 42 view .LVU505
1349:FreeRTOS/queue.c **** 				}
 1615              		.loc 1 1349 6 view .LVU506
1349:FreeRTOS/queue.c **** 				}
 1616              		.loc 1 1349 13 is_stmt 0 view .LVU507
 1617 008e 0020     		movs	r0, #0
 1618 0090 CEE7     		b	.L99
 1619              	.L120:
1355:FreeRTOS/queue.c **** 					xEntryTimeSet = pdTRUE;
 1620              		.loc 1 1355 6 is_stmt 1 view .LVU508
 1621 0092 02A8     		add	r0, sp, #8
 1622 0094 FFF7FEFF 		bl	vTaskSetTimeOutState
 1623              	.LVL153:
1356:FreeRTOS/queue.c **** 				}
 1624              		.loc 1 1356 6 view .LVU509
1356:FreeRTOS/queue.c **** 				}
 1625              		.loc 1 1356 20 is_stmt 0 view .LVU510
 1626 0098 0125     		movs	r5, #1
 1627 009a 29E0     		b	.L107
 1628              	.LVL154:
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 77


 1629              	.L121:
1356:FreeRTOS/queue.c **** 				}
 1630              		.loc 1 1356 20 view .LVU511
 1631              	.LBE39:
1371:FreeRTOS/queue.c **** 
 1632              		.loc 1 1371 3 is_stmt 1 discriminator 1 view .LVU512
 1633 009c 0023     		movs	r3, #0
 1634 009e 84F84430 		strb	r3, [r4, #68]
 1635 00a2 31E0     		b	.L108
 1636              	.L122:
1371:FreeRTOS/queue.c **** 
 1637              		.loc 1 1371 3 discriminator 4 view .LVU513
 1638 00a4 0023     		movs	r3, #0
 1639 00a6 84F84530 		strb	r3, [r4, #69]
 1640 00aa 33E0     		b	.L109
 1641              	.L123:
1384:FreeRTOS/queue.c **** 						{
 1642              		.loc 1 1384 7 view .LVU514
 1643 00ac FFF7FEFF 		bl	vPortEnterCritical
 1644              	.LVL155:
1386:FreeRTOS/queue.c **** 						}
 1645              		.loc 1 1386 8 view .LVU515
 1646 00b0 6068     		ldr	r0, [r4, #4]
 1647 00b2 FFF7FEFF 		bl	vTaskPriorityInherit
 1648              	.LVL156:
1388:FreeRTOS/queue.c **** 					}
 1649              		.loc 1 1388 7 view .LVU516
 1650 00b6 FFF7FEFF 		bl	vPortExitCritical
 1651              	.LVL157:
 1652 00ba 3BE0     		b	.L112
 1653              	.L111:
1411:FreeRTOS/queue.c **** 				( void ) xTaskResumeAll();
 1654              		.loc 1 1411 5 view .LVU517
 1655 00bc 2046     		mov	r0, r4
 1656 00be FFF7FEFF 		bl	prvUnlockQueue
 1657              	.LVL158:
1412:FreeRTOS/queue.c **** 			}
 1658              		.loc 1 1412 5 view .LVU518
1412:FreeRTOS/queue.c **** 			}
 1659              		.loc 1 1412 14 is_stmt 0 view .LVU519
 1660 00c2 FFF7FEFF 		bl	xTaskResumeAll
 1661              	.LVL159:
 1662 00c6 09E0     		b	.L100
 1663              	.L110:
1417:FreeRTOS/queue.c **** 			( void ) xTaskResumeAll();
 1664              		.loc 1 1417 4 is_stmt 1 view .LVU520
 1665 00c8 2046     		mov	r0, r4
 1666 00ca FFF7FEFF 		bl	prvUnlockQueue
 1667              	.LVL160:
1418:FreeRTOS/queue.c **** 
 1668              		.loc 1 1418 4 view .LVU521
1418:FreeRTOS/queue.c **** 
 1669              		.loc 1 1418 13 is_stmt 0 view .LVU522
 1670 00ce FFF7FEFF 		bl	xTaskResumeAll
 1671              	.LVL161:
1420:FreeRTOS/queue.c **** 			{
 1672              		.loc 1 1420 4 is_stmt 1 view .LVU523
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 78


1420:FreeRTOS/queue.c **** 			{
 1673              		.loc 1 1420 8 is_stmt 0 view .LVU524
 1674 00d2 2046     		mov	r0, r4
 1675 00d4 FFF7FEFF 		bl	prvIsQueueEmpty
 1676              	.LVL162:
1420:FreeRTOS/queue.c **** 			{
 1677              		.loc 1 1420 6 view .LVU525
 1678 00d8 0028     		cmp	r0, #0
 1679 00da 42D1     		bne	.L117
 1680              	.LVL163:
 1681              	.L100:
1244:FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1682              		.loc 1 1244 25 is_stmt 1 view .LVU526
1245:FreeRTOS/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1683              		.loc 1 1245 92 view .LVU527
1256:FreeRTOS/queue.c **** 	{
 1684              		.loc 1 1256 2 view .LVU528
1258:FreeRTOS/queue.c **** 		{
 1685              		.loc 1 1258 3 view .LVU529
 1686 00dc FFF7FEFF 		bl	vPortEnterCritical
 1687              	.LVL164:
 1688              	.LBB40:
1260:FreeRTOS/queue.c **** 
 1689              		.loc 1 1260 4 view .LVU530
1260:FreeRTOS/queue.c **** 
 1690              		.loc 1 1260 22 is_stmt 0 view .LVU531
 1691 00e0 A76B     		ldr	r7, [r4, #56]
 1692              	.LVL165:
1264:FreeRTOS/queue.c **** 			{
 1693              		.loc 1 1264 4 is_stmt 1 view .LVU532
1264:FreeRTOS/queue.c **** 			{
 1694              		.loc 1 1264 6 is_stmt 0 view .LVU533
 1695 00e2 002F     		cmp	r7, #0
 1696 00e4 95D1     		bne	.L118
1343:FreeRTOS/queue.c **** 				{
 1697              		.loc 1 1343 5 is_stmt 1 view .LVU534
1343:FreeRTOS/queue.c **** 				{
 1698              		.loc 1 1343 22 is_stmt 0 view .LVU535
 1699 00e6 019B     		ldr	r3, [sp, #4]
1343:FreeRTOS/queue.c **** 				{
 1700              		.loc 1 1343 7 view .LVU536
 1701 00e8 002B     		cmp	r3, #0
 1702 00ea CED0     		beq	.L119
1351:FreeRTOS/queue.c **** 				{
 1703              		.loc 1 1351 10 is_stmt 1 view .LVU537
1351:FreeRTOS/queue.c **** 				{
 1704              		.loc 1 1351 12 is_stmt 0 view .LVU538
 1705 00ec 002D     		cmp	r5, #0
 1706 00ee D0D0     		beq	.L120
 1707              	.LVL166:
 1708              	.L107:
1361:FreeRTOS/queue.c **** 				}
 1709              		.loc 1 1361 30 is_stmt 1 view .LVU539
 1710              	.LBE40:
1365:FreeRTOS/queue.c **** 
 1711              		.loc 1 1365 3 view .LVU540
 1712 00f0 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 79


 1713              	.LVL167:
1370:FreeRTOS/queue.c **** 		prvLockQueue( pxQueue );
 1714              		.loc 1 1370 3 view .LVU541
 1715 00f4 FFF7FEFF 		bl	vTaskSuspendAll
 1716              	.LVL168:
1371:FreeRTOS/queue.c **** 
 1717              		.loc 1 1371 3 view .LVU542
 1718 00f8 FFF7FEFF 		bl	vPortEnterCritical
 1719              	.LVL169:
1371:FreeRTOS/queue.c **** 
 1720              		.loc 1 1371 3 view .LVU543
 1721 00fc 94F84420 		ldrb	r2, [r4, #68]	@ zero_extendqisi2
 1722 0100 52B2     		sxtb	r2, r2
 1723 0102 B2F1FF3F 		cmp	r2, #-1
 1724 0106 C9D0     		beq	.L121
 1725              	.L108:
1371:FreeRTOS/queue.c **** 
 1726              		.loc 1 1371 3 discriminator 3 view .LVU544
 1727 0108 94F84520 		ldrb	r2, [r4, #69]	@ zero_extendqisi2
 1728 010c 52B2     		sxtb	r2, r2
 1729 010e B2F1FF3F 		cmp	r2, #-1
 1730 0112 C7D0     		beq	.L122
 1731              	.L109:
1371:FreeRTOS/queue.c **** 
 1732              		.loc 1 1371 3 discriminator 6 view .LVU545
 1733 0114 FFF7FEFF 		bl	vPortExitCritical
 1734              	.LVL170:
1374:FreeRTOS/queue.c **** 		{
 1735              		.loc 1 1374 3 discriminator 6 view .LVU546
1374:FreeRTOS/queue.c **** 		{
 1736              		.loc 1 1374 7 is_stmt 0 discriminator 6 view .LVU547
 1737 0118 01A9     		add	r1, sp, #4
 1738 011a 02A8     		add	r0, sp, #8
 1739 011c FFF7FEFF 		bl	xTaskCheckForTimeOut
 1740              	.LVL171:
1374:FreeRTOS/queue.c **** 		{
 1741              		.loc 1 1374 5 discriminator 6 view .LVU548
 1742 0120 0028     		cmp	r0, #0
 1743 0122 D1D1     		bne	.L110
1376:FreeRTOS/queue.c **** 			{
 1744              		.loc 1 1376 4 is_stmt 1 view .LVU549
1376:FreeRTOS/queue.c **** 			{
 1745              		.loc 1 1376 8 is_stmt 0 view .LVU550
 1746 0124 2046     		mov	r0, r4
 1747 0126 FFF7FEFF 		bl	prvIsQueueEmpty
 1748              	.LVL172:
1376:FreeRTOS/queue.c **** 			{
 1749              		.loc 1 1376 6 view .LVU551
 1750 012a 0028     		cmp	r0, #0
 1751 012c C6D0     		beq	.L111
1378:FreeRTOS/queue.c **** 
 1752              		.loc 1 1378 46 is_stmt 1 view .LVU552
1382:FreeRTOS/queue.c **** 					{
 1753              		.loc 1 1382 6 view .LVU553
1382:FreeRTOS/queue.c **** 					{
 1754              		.loc 1 1382 17 is_stmt 0 view .LVU554
 1755 012e 2368     		ldr	r3, [r4]
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 80


1382:FreeRTOS/queue.c **** 					{
 1756              		.loc 1 1382 8 view .LVU555
 1757 0130 002B     		cmp	r3, #0
 1758 0132 BBD0     		beq	.L123
 1759              	.L112:
1392:FreeRTOS/queue.c **** 					}
 1760              		.loc 1 1392 31 is_stmt 1 view .LVU556
1397:FreeRTOS/queue.c **** 				prvUnlockQueue( pxQueue );
 1761              		.loc 1 1397 5 view .LVU557
 1762 0134 0199     		ldr	r1, [sp, #4]
 1763 0136 04F12400 		add	r0, r4, #36
 1764 013a FFF7FEFF 		bl	vTaskPlaceOnEventList
 1765              	.LVL173:
1398:FreeRTOS/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1766              		.loc 1 1398 5 view .LVU558
 1767 013e 2046     		mov	r0, r4
 1768 0140 FFF7FEFF 		bl	prvUnlockQueue
 1769              	.LVL174:
1399:FreeRTOS/queue.c **** 				{
 1770              		.loc 1 1399 5 view .LVU559
1399:FreeRTOS/queue.c **** 				{
 1771              		.loc 1 1399 9 is_stmt 0 view .LVU560
 1772 0144 FFF7FEFF 		bl	xTaskResumeAll
 1773              	.LVL175:
1399:FreeRTOS/queue.c **** 				{
 1774              		.loc 1 1399 7 view .LVU561
 1775 0148 0028     		cmp	r0, #0
 1776 014a C7D1     		bne	.L100
1401:FreeRTOS/queue.c **** 				}
 1777              		.loc 1 1401 6 is_stmt 1 view .LVU562
 1778 014c 4FF0E023 		mov	r3, #-536813568
 1779 0150 4FF08052 		mov	r2, #268435456
 1780 0154 C3F8042D 		str	r2, [r3, #3332]
1401:FreeRTOS/queue.c **** 				}
 1781              		.loc 1 1401 6 view .LVU563
 1782              		.syntax unified
 1783              	@ 1401 "FreeRTOS/queue.c" 1
 1784 0158 BFF34F8F 		dsb
 1785              	@ 0 "" 2
1401:FreeRTOS/queue.c **** 				}
 1786              		.loc 1 1401 6 view .LVU564
 1787              	@ 1401 "FreeRTOS/queue.c" 1
 1788 015c BFF36F8F 		isb
 1789              	@ 0 "" 2
1401:FreeRTOS/queue.c **** 				}
 1790              		.loc 1 1401 28 view .LVU565
 1791              		.thumb
 1792              		.syntax unified
 1793 0160 BCE7     		b	.L100
 1794              	.L117:
1423:FreeRTOS/queue.c **** 			}
 1795              		.loc 1 1423 12 is_stmt 0 view .LVU566
 1796 0162 0020     		movs	r0, #0
 1797 0164 64E7     		b	.L99
 1798              		.cfi_endproc
 1799              	.LFE42:
 1801              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 81


 1802              		.align	1
 1803              		.global	xQueueReceiveFromISR
 1804              		.syntax unified
 1805              		.thumb
 1806              		.thumb_func
 1808              	xQueueReceiveFromISR:
 1809              	.LVL176:
 1810              	.LFB43:
1435:FreeRTOS/queue.c **** BaseType_t xReturn;
 1811              		.loc 1 1435 1 is_stmt 1 view -0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 0
 1814              		@ frame_needed = 0, uses_anonymous_args = 0
1435:FreeRTOS/queue.c **** BaseType_t xReturn;
 1815              		.loc 1 1435 1 is_stmt 0 view .LVU568
 1816 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1817              	.LCFI24:
 1818              		.cfi_def_cfa_offset 24
 1819              		.cfi_offset 4, -24
 1820              		.cfi_offset 5, -20
 1821              		.cfi_offset 6, -16
 1822              		.cfi_offset 7, -12
 1823              		.cfi_offset 8, -8
 1824              		.cfi_offset 14, -4
1436:FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1825              		.loc 1 1436 1 is_stmt 1 view .LVU569
1437:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1826              		.loc 1 1437 1 view .LVU570
1438:FreeRTOS/queue.c **** 
 1827              		.loc 1 1438 1 view .LVU571
 1828              	.LVL177:
1440:FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1829              		.loc 1 1440 25 view .LVU572
1441:FreeRTOS/queue.c **** 
 1830              		.loc 1 1441 92 view .LVU573
1457:FreeRTOS/queue.c **** 
 1831              		.loc 1 1457 44 view .LVU574
1459:FreeRTOS/queue.c **** 	{
 1832              		.loc 1 1459 2 view .LVU575
 1833              	.LBB41:
 1834              	.LBI41:
 249:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 1835              		.loc 2 249 34 view .LVU576
 1836              	.LBB42:
 251:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 1837              		.loc 2 251 1 view .LVU577
 253:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 1838              		.loc 2 253 2 view .LVU578
 1839              		.syntax unified
 1840              	@ 253 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1841 0004 EFF31188 			mrs r8, basepri											
 1842 0008 4FF05003 		mov r3, #80												
 1843 000c 83F31188 		msr basepri, r3											
 1844 0010 BFF36F8F 		isb														
 1845 0014 BFF34F8F 		dsb														
 1846              	
 1847              	@ 0 "" 2
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 82


 1848              	.LVL178:
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 1849              		.loc 2 265 2 view .LVU579
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 1850              		.loc 2 265 2 is_stmt 0 view .LVU580
 1851              		.thumb
 1852              		.syntax unified
 1853              	.LBE42:
 1854              	.LBE41:
 1855              	.LBB43:
1461:FreeRTOS/queue.c **** 
 1856              		.loc 1 1461 3 is_stmt 1 view .LVU581
1461:FreeRTOS/queue.c **** 
 1857              		.loc 1 1461 21 is_stmt 0 view .LVU582
 1858 0018 866B     		ldr	r6, [r0, #56]
 1859              	.LVL179:
1464:FreeRTOS/queue.c **** 		{
 1860              		.loc 1 1464 3 is_stmt 1 view .LVU583
1464:FreeRTOS/queue.c **** 		{
 1861              		.loc 1 1464 5 is_stmt 0 view .LVU584
 1862 001a 26B9     		cbnz	r6, .L132
1515:FreeRTOS/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 1863              		.loc 1 1515 12 view .LVU585
 1864 001c 0020     		movs	r0, #0
 1865              	.LVL180:
 1866              	.L125:
1516:FreeRTOS/queue.c **** 		}
 1867              		.loc 1 1516 49 is_stmt 1 view .LVU586
 1868              	.LBE43:
1519:FreeRTOS/queue.c **** 
 1869              		.loc 1 1519 2 view .LVU587
 1870              	.LBB45:
 1871              	.LBI45:
 269:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 1872              		.loc 2 269 30 view .LVU588
 1873              	.LBB46:
 1874              		.loc 2 271 2 view .LVU589
 1875              		.syntax unified
 1876              	@ 271 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 1877 001e 88F31188 			msr basepri, r8	
 1878              	@ 0 "" 2
 1879              	.LVL181:
 1880              		.loc 2 271 2 is_stmt 0 view .LVU590
 1881              		.thumb
 1882              		.syntax unified
 1883              	.LBE46:
 1884              	.LBE45:
1521:FreeRTOS/queue.c **** }
 1885              		.loc 1 1521 2 is_stmt 1 view .LVU591
1522:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1886              		.loc 1 1522 1 is_stmt 0 view .LVU592
 1887 0022 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1888              	.LVL182:
 1889              	.L132:
1522:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 1890              		.loc 1 1522 1 view .LVU593
 1891 0026 0446     		mov	r4, r0
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 83


 1892 0028 1546     		mov	r5, r2
 1893              	.LBB47:
 1894              	.LBB44:
1466:FreeRTOS/queue.c **** 
 1895              		.loc 1 1466 4 is_stmt 1 view .LVU594
1466:FreeRTOS/queue.c **** 
 1896              		.loc 1 1466 17 is_stmt 0 view .LVU595
 1897 002a 90F84470 		ldrb	r7, [r0, #68]	@ zero_extendqisi2
 1898 002e 7FB2     		sxtb	r7, r7
 1899              	.LVL183:
1468:FreeRTOS/queue.c **** 
 1900              		.loc 1 1468 42 is_stmt 1 view .LVU596
1470:FreeRTOS/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 1901              		.loc 1 1470 4 view .LVU597
 1902 0030 FFF7FEFF 		bl	prvCopyDataFromQueue
 1903              	.LVL184:
1471:FreeRTOS/queue.c **** 
 1904              		.loc 1 1471 4 view .LVU598
1471:FreeRTOS/queue.c **** 
 1905              		.loc 1 1471 51 is_stmt 0 view .LVU599
 1906 0034 013E     		subs	r6, r6, #1
 1907              	.LVL185:
1471:FreeRTOS/queue.c **** 
 1908              		.loc 1 1471 31 view .LVU600
 1909 0036 A663     		str	r6, [r4, #56]
1477:FreeRTOS/queue.c **** 			{
 1910              		.loc 1 1477 4 is_stmt 1 view .LVU601
1477:FreeRTOS/queue.c **** 			{
 1911              		.loc 1 1477 6 is_stmt 0 view .LVU602
 1912 0038 B7F1FF3F 		cmp	r7, #-1
 1913 003c 05D0     		beq	.L133
1508:FreeRTOS/queue.c **** 			}
 1914              		.loc 1 1508 5 is_stmt 1 view .LVU603
1508:FreeRTOS/queue.c **** 			}
 1915              		.loc 1 1508 45 is_stmt 0 view .LVU604
 1916 003e 0137     		adds	r7, r7, #1
 1917              	.LVL186:
1508:FreeRTOS/queue.c **** 			}
 1918              		.loc 1 1508 24 view .LVU605
 1919 0040 7FB2     		sxtb	r7, r7
 1920              	.LVL187:
1508:FreeRTOS/queue.c **** 			}
 1921              		.loc 1 1508 22 view .LVU606
 1922 0042 84F84470 		strb	r7, [r4, #68]
1511:FreeRTOS/queue.c **** 		}
 1923              		.loc 1 1511 12 view .LVU607
 1924 0046 0120     		movs	r0, #1
 1925 0048 E9E7     		b	.L125
 1926              	.LVL188:
 1927              	.L133:
1479:FreeRTOS/queue.c **** 				{
 1928              		.loc 1 1479 5 is_stmt 1 view .LVU608
1479:FreeRTOS/queue.c **** 				{
 1929              		.loc 1 1479 9 is_stmt 0 view .LVU609
 1930 004a 2369     		ldr	r3, [r4, #16]
1479:FreeRTOS/queue.c **** 				{
 1931              		.loc 1 1479 7 view .LVU610
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 84


 1932 004c 0BB9     		cbnz	r3, .L134
1511:FreeRTOS/queue.c **** 		}
 1933              		.loc 1 1511 12 view .LVU611
 1934 004e 0120     		movs	r0, #1
 1935 0050 E5E7     		b	.L125
 1936              	.L134:
1481:FreeRTOS/queue.c **** 					{
 1937              		.loc 1 1481 6 is_stmt 1 view .LVU612
1481:FreeRTOS/queue.c **** 					{
 1938              		.loc 1 1481 10 is_stmt 0 view .LVU613
 1939 0052 04F11000 		add	r0, r4, #16
 1940 0056 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1941              	.LVL189:
1481:FreeRTOS/queue.c **** 					{
 1942              		.loc 1 1481 8 view .LVU614
 1943 005a 18B1     		cbz	r0, .L129
1485:FreeRTOS/queue.c **** 						{
 1944              		.loc 1 1485 7 is_stmt 1 view .LVU615
1485:FreeRTOS/queue.c **** 						{
 1945              		.loc 1 1485 9 is_stmt 0 view .LVU616
 1946 005c 25B1     		cbz	r5, .L130
1487:FreeRTOS/queue.c **** 						}
 1947              		.loc 1 1487 8 is_stmt 1 view .LVU617
1487:FreeRTOS/queue.c **** 						}
 1948              		.loc 1 1487 35 is_stmt 0 view .LVU618
 1949 005e 0120     		movs	r0, #1
 1950 0060 2860     		str	r0, [r5]
 1951 0062 DCE7     		b	.L125
 1952              	.L129:
1511:FreeRTOS/queue.c **** 		}
 1953              		.loc 1 1511 12 view .LVU619
 1954 0064 0120     		movs	r0, #1
 1955 0066 DAE7     		b	.L125
 1956              	.L130:
 1957 0068 0120     		movs	r0, #1
 1958 006a D8E7     		b	.L125
 1959              	.LBE44:
 1960              	.LBE47:
 1961              		.cfi_endproc
 1962              	.LFE43:
 1964              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 1965              		.align	1
 1966              		.global	xQueuePeekFromISR
 1967              		.syntax unified
 1968              		.thumb
 1969              		.thumb_func
 1971              	xQueuePeekFromISR:
 1972              	.LVL190:
 1973              	.LFB44:
1526:FreeRTOS/queue.c **** BaseType_t xReturn;
 1974              		.loc 1 1526 1 is_stmt 1 view -0
 1975              		.cfi_startproc
 1976              		@ args = 0, pretend = 0, frame = 0
 1977              		@ frame_needed = 0, uses_anonymous_args = 0
1526:FreeRTOS/queue.c **** BaseType_t xReturn;
 1978              		.loc 1 1526 1 is_stmt 0 view .LVU621
 1979 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 85


 1980              	.LCFI25:
 1981              		.cfi_def_cfa_offset 16
 1982              		.cfi_offset 4, -16
 1983              		.cfi_offset 5, -12
 1984              		.cfi_offset 6, -8
 1985              		.cfi_offset 14, -4
1527:FreeRTOS/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1986              		.loc 1 1527 1 is_stmt 1 view .LVU622
1528:FreeRTOS/queue.c **** int8_t *pcOriginalReadPosition;
 1987              		.loc 1 1528 1 view .LVU623
1529:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1988              		.loc 1 1529 1 view .LVU624
1530:FreeRTOS/queue.c **** 
 1989              		.loc 1 1530 1 view .LVU625
 1990              	.LVL191:
1532:FreeRTOS/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1991              		.loc 1 1532 25 view .LVU626
1533:FreeRTOS/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 1992              		.loc 1 1533 92 view .LVU627
1534:FreeRTOS/queue.c **** 
 1993              		.loc 1 1534 42 view .LVU628
1550:FreeRTOS/queue.c **** 
 1994              		.loc 1 1550 44 view .LVU629
1552:FreeRTOS/queue.c **** 	{
 1995              		.loc 1 1552 2 view .LVU630
 1996              	.LBB48:
 1997              	.LBI48:
 249:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 1998              		.loc 2 249 34 view .LVU631
 1999              	.LBB49:
 251:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 2000              		.loc 2 251 1 view .LVU632
 253:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 2001              		.loc 2 253 2 view .LVU633
 2002              		.syntax unified
 2003              	@ 253 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 2004 0002 EFF31185 			mrs r5, basepri											
 2005 0006 4FF05003 		mov r3, #80												
 2006 000a 83F31188 		msr basepri, r3											
 2007 000e BFF36F8F 		isb														
 2008 0012 BFF34F8F 		dsb														
 2009              	
 2010              	@ 0 "" 2
 2011              	.LVL192:
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 2012              		.loc 2 265 2 view .LVU634
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 2013              		.loc 2 265 2 is_stmt 0 view .LVU635
 2014              		.thumb
 2015              		.syntax unified
 2016              	.LBE49:
 2017              	.LBE48:
1555:FreeRTOS/queue.c **** 		{
 2018              		.loc 1 1555 3 is_stmt 1 view .LVU636
1555:FreeRTOS/queue.c **** 		{
 2019              		.loc 1 1555 14 is_stmt 0 view .LVU637
 2020 0016 836B     		ldr	r3, [r0, #56]
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 86


1555:FreeRTOS/queue.c **** 		{
 2021              		.loc 1 1555 5 view .LVU638
 2022 0018 1BB9     		cbnz	r3, .L139
1569:FreeRTOS/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2023              		.loc 1 1569 12 view .LVU639
 2024 001a 0020     		movs	r0, #0
 2025              	.LVL193:
 2026              	.L136:
1570:FreeRTOS/queue.c **** 		}
 2027              		.loc 1 1570 46 is_stmt 1 view .LVU640
1573:FreeRTOS/queue.c **** 
 2028              		.loc 1 1573 2 view .LVU641
 2029              	.LBB50:
 2030              	.LBI50:
 269:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 2031              		.loc 2 269 30 view .LVU642
 2032              	.LBB51:
 2033              		.loc 2 271 2 view .LVU643
 2034              		.syntax unified
 2035              	@ 271 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 2036 001c 85F31188 			msr basepri, r5	
 2037              	@ 0 "" 2
 2038              	.LVL194:
 2039              		.loc 2 271 2 is_stmt 0 view .LVU644
 2040              		.thumb
 2041              		.syntax unified
 2042              	.LBE51:
 2043              	.LBE50:
1575:FreeRTOS/queue.c **** }
 2044              		.loc 1 1575 2 is_stmt 1 view .LVU645
1576:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2045              		.loc 1 1576 1 is_stmt 0 view .LVU646
 2046 0020 70BD     		pop	{r4, r5, r6, pc}
 2047              	.LVL195:
 2048              	.L139:
1576:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2049              		.loc 1 1576 1 view .LVU647
 2050 0022 0446     		mov	r4, r0
1557:FreeRTOS/queue.c **** 
 2051              		.loc 1 1557 39 is_stmt 1 view .LVU648
1561:FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2052              		.loc 1 1561 4 view .LVU649
1561:FreeRTOS/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2053              		.loc 1 1561 27 is_stmt 0 view .LVU650
 2054 0024 C668     		ldr	r6, [r0, #12]
 2055              	.LVL196:
1562:FreeRTOS/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2056              		.loc 1 1562 4 is_stmt 1 view .LVU651
 2057 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
 2058              	.LVL197:
1563:FreeRTOS/queue.c **** 
 2059              		.loc 1 1563 4 view .LVU652
1563:FreeRTOS/queue.c **** 
 2060              		.loc 1 1563 26 is_stmt 0 view .LVU653
 2061 002a E660     		str	r6, [r4, #12]
1565:FreeRTOS/queue.c **** 		}
 2062              		.loc 1 1565 4 is_stmt 1 view .LVU654
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 87


 2063              	.LVL198:
1565:FreeRTOS/queue.c **** 		}
 2064              		.loc 1 1565 12 is_stmt 0 view .LVU655
 2065 002c 0120     		movs	r0, #1
 2066 002e F5E7     		b	.L136
 2067              		.cfi_endproc
 2068              	.LFE44:
 2070              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2071              		.align	1
 2072              		.global	uxQueueMessagesWaiting
 2073              		.syntax unified
 2074              		.thumb
 2075              		.thumb_func
 2077              	uxQueueMessagesWaiting:
 2078              	.LVL199:
 2079              	.LFB45:
1580:FreeRTOS/queue.c **** UBaseType_t uxReturn;
 2080              		.loc 1 1580 1 is_stmt 1 view -0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 0
 2083              		@ frame_needed = 0, uses_anonymous_args = 0
1580:FreeRTOS/queue.c **** UBaseType_t uxReturn;
 2084              		.loc 1 1580 1 is_stmt 0 view .LVU657
 2085 0000 10B5     		push	{r4, lr}
 2086              	.LCFI26:
 2087              		.cfi_def_cfa_offset 8
 2088              		.cfi_offset 4, -8
 2089              		.cfi_offset 14, -4
 2090 0002 0446     		mov	r4, r0
1581:FreeRTOS/queue.c **** 
 2091              		.loc 1 1581 1 is_stmt 1 view .LVU658
1583:FreeRTOS/queue.c **** 
 2092              		.loc 1 1583 24 view .LVU659
1585:FreeRTOS/queue.c **** 	{
 2093              		.loc 1 1585 2 view .LVU660
 2094 0004 FFF7FEFF 		bl	vPortEnterCritical
 2095              	.LVL200:
1587:FreeRTOS/queue.c **** 	}
 2096              		.loc 1 1587 3 view .LVU661
1587:FreeRTOS/queue.c **** 	}
 2097              		.loc 1 1587 12 is_stmt 0 view .LVU662
 2098 0008 A46B     		ldr	r4, [r4, #56]
 2099              	.LVL201:
1589:FreeRTOS/queue.c **** 
 2100              		.loc 1 1589 2 is_stmt 1 view .LVU663
 2101 000a FFF7FEFF 		bl	vPortExitCritical
 2102              	.LVL202:
1591:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2103              		.loc 1 1591 2 view .LVU664
1592:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2104              		.loc 1 1592 1 is_stmt 0 view .LVU665
 2105 000e 2046     		mov	r0, r4
 2106 0010 10BD     		pop	{r4, pc}
1592:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2107              		.loc 1 1592 1 view .LVU666
 2108              		.cfi_endproc
 2109              	.LFE45:
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 88


 2111              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2112              		.align	1
 2113              		.global	uxQueueSpacesAvailable
 2114              		.syntax unified
 2115              		.thumb
 2116              		.thumb_func
 2118              	uxQueueSpacesAvailable:
 2119              	.LVL203:
 2120              	.LFB46:
1596:FreeRTOS/queue.c **** UBaseType_t uxReturn;
 2121              		.loc 1 1596 1 is_stmt 1 view -0
 2122              		.cfi_startproc
 2123              		@ args = 0, pretend = 0, frame = 0
 2124              		@ frame_needed = 0, uses_anonymous_args = 0
1596:FreeRTOS/queue.c **** UBaseType_t uxReturn;
 2125              		.loc 1 1596 1 is_stmt 0 view .LVU668
 2126 0000 10B5     		push	{r4, lr}
 2127              	.LCFI27:
 2128              		.cfi_def_cfa_offset 8
 2129              		.cfi_offset 4, -8
 2130              		.cfi_offset 14, -4
 2131 0002 0446     		mov	r4, r0
1597:FreeRTOS/queue.c **** Queue_t *pxQueue;
 2132              		.loc 1 1597 1 is_stmt 1 view .LVU669
1598:FreeRTOS/queue.c **** 
 2133              		.loc 1 1598 1 view .LVU670
1600:FreeRTOS/queue.c **** 	configASSERT( pxQueue );
 2134              		.loc 1 1600 2 view .LVU671
 2135              	.LVL204:
1601:FreeRTOS/queue.c **** 
 2136              		.loc 1 1601 25 view .LVU672
1603:FreeRTOS/queue.c **** 	{
 2137              		.loc 1 1603 2 view .LVU673
 2138 0004 FFF7FEFF 		bl	vPortEnterCritical
 2139              	.LVL205:
1605:FreeRTOS/queue.c **** 	}
 2140              		.loc 1 1605 3 view .LVU674
1605:FreeRTOS/queue.c **** 	}
 2141              		.loc 1 1605 21 is_stmt 0 view .LVU675
 2142 0008 E36B     		ldr	r3, [r4, #60]
1605:FreeRTOS/queue.c **** 	}
 2143              		.loc 1 1605 41 view .LVU676
 2144 000a A46B     		ldr	r4, [r4, #56]
 2145              	.LVL206:
1605:FreeRTOS/queue.c **** 	}
 2146              		.loc 1 1605 12 view .LVU677
 2147 000c 1C1B     		subs	r4, r3, r4
 2148              	.LVL207:
1607:FreeRTOS/queue.c **** 
 2149              		.loc 1 1607 2 is_stmt 1 view .LVU678
 2150 000e FFF7FEFF 		bl	vPortExitCritical
 2151              	.LVL208:
1609:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2152              		.loc 1 1609 2 view .LVU679
1610:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2153              		.loc 1 1610 1 is_stmt 0 view .LVU680
 2154 0012 2046     		mov	r0, r4
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 89


 2155 0014 10BD     		pop	{r4, pc}
1610:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2156              		.loc 1 1610 1 view .LVU681
 2157              		.cfi_endproc
 2158              	.LFE46:
 2160              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2161              		.align	1
 2162              		.global	uxQueueMessagesWaitingFromISR
 2163              		.syntax unified
 2164              		.thumb
 2165              		.thumb_func
 2167              	uxQueueMessagesWaitingFromISR:
 2168              	.LVL209:
 2169              	.LFB47:
1614:FreeRTOS/queue.c **** UBaseType_t uxReturn;
 2170              		.loc 1 1614 1 is_stmt 1 view -0
 2171              		.cfi_startproc
 2172              		@ args = 0, pretend = 0, frame = 0
 2173              		@ frame_needed = 0, uses_anonymous_args = 0
 2174              		@ link register save eliminated.
1615:FreeRTOS/queue.c **** 
 2175              		.loc 1 1615 1 view .LVU683
1617:FreeRTOS/queue.c **** 
 2176              		.loc 1 1617 24 view .LVU684
1619:FreeRTOS/queue.c **** 
 2177              		.loc 1 1619 2 view .LVU685
1619:FreeRTOS/queue.c **** 
 2178              		.loc 1 1619 11 is_stmt 0 view .LVU686
 2179 0000 806B     		ldr	r0, [r0, #56]
 2180              	.LVL210:
1621:FreeRTOS/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2181              		.loc 1 1621 2 is_stmt 1 view .LVU687
1622:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2182              		.loc 1 1622 1 is_stmt 0 view .LVU688
 2183 0002 7047     		bx	lr
 2184              		.cfi_endproc
 2185              	.LFE47:
 2187              		.section	.text.vQueueDelete,"ax",%progbits
 2188              		.align	1
 2189              		.global	vQueueDelete
 2190              		.syntax unified
 2191              		.thumb
 2192              		.thumb_func
 2194              	vQueueDelete:
 2195              	.LVL211:
 2196              	.LFB48:
1626:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2197              		.loc 1 1626 1 is_stmt 1 view -0
 2198              		.cfi_startproc
 2199              		@ args = 0, pretend = 0, frame = 0
 2200              		@ frame_needed = 0, uses_anonymous_args = 0
1626:FreeRTOS/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2201              		.loc 1 1626 1 is_stmt 0 view .LVU690
 2202 0000 08B5     		push	{r3, lr}
 2203              	.LCFI28:
 2204              		.cfi_def_cfa_offset 8
 2205              		.cfi_offset 3, -8
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 90


 2206              		.cfi_offset 14, -4
1627:FreeRTOS/queue.c **** 
 2207              		.loc 1 1627 1 is_stmt 1 view .LVU691
 2208              	.LVL212:
1629:FreeRTOS/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2209              		.loc 1 1629 25 view .LVU692
1630:FreeRTOS/queue.c **** 
 2210              		.loc 1 1630 30 view .LVU693
1642:FreeRTOS/queue.c **** 	}
 2211              		.loc 1 1642 3 view .LVU694
 2212 0002 FFF7FEFF 		bl	vPortFree
 2213              	.LVL213:
1664:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2214              		.loc 1 1664 1 is_stmt 0 view .LVU695
 2215 0006 08BD     		pop	{r3, pc}
 2216              		.cfi_endproc
 2217              	.LFE48:
 2219              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2220              		.align	1
 2221              		.global	xQueueIsQueueEmptyFromISR
 2222              		.syntax unified
 2223              		.thumb
 2224              		.thumb_func
 2226              	xQueueIsQueueEmptyFromISR:
 2227              	.LVL214:
 2228              	.LFB53:
1936:FreeRTOS/queue.c **** BaseType_t xReturn;
 2229              		.loc 1 1936 1 is_stmt 1 view -0
 2230              		.cfi_startproc
 2231              		@ args = 0, pretend = 0, frame = 0
 2232              		@ frame_needed = 0, uses_anonymous_args = 0
 2233              		@ link register save eliminated.
1937:FreeRTOS/queue.c **** 
 2234              		.loc 1 1937 1 view .LVU697
1939:FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2235              		.loc 1 1939 24 view .LVU698
1940:FreeRTOS/queue.c **** 	{
 2236              		.loc 1 1940 2 view .LVU699
1940:FreeRTOS/queue.c **** 	{
 2237              		.loc 1 1940 30 is_stmt 0 view .LVU700
 2238 0000 836B     		ldr	r3, [r0, #56]
1940:FreeRTOS/queue.c **** 	{
 2239              		.loc 1 1940 4 view .LVU701
 2240 0002 0BB9     		cbnz	r3, .L149
1942:FreeRTOS/queue.c **** 	}
 2241              		.loc 1 1942 11 view .LVU702
 2242 0004 0120     		movs	r0, #1
 2243              	.LVL215:
1942:FreeRTOS/queue.c **** 	}
 2244              		.loc 1 1942 11 view .LVU703
 2245 0006 7047     		bx	lr
 2246              	.LVL216:
 2247              	.L149:
1946:FreeRTOS/queue.c **** 	}
 2248              		.loc 1 1946 11 view .LVU704
 2249 0008 0020     		movs	r0, #0
 2250              	.LVL217:
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 91


1949:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2251              		.loc 1 1949 2 is_stmt 1 view .LVU705
1950:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
 2252              		.loc 1 1950 1 is_stmt 0 view .LVU706
 2253 000a 7047     		bx	lr
 2254              		.cfi_endproc
 2255              	.LFE53:
 2257              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2258              		.align	1
 2259              		.global	xQueueIsQueueFullFromISR
 2260              		.syntax unified
 2261              		.thumb
 2262              		.thumb_func
 2264              	xQueueIsQueueFullFromISR:
 2265              	.LVL218:
 2266              	.LFB55:
1972:FreeRTOS/queue.c **** /*-----------------------------------------------------------*/
1973:FreeRTOS/queue.c **** 
1974:FreeRTOS/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:FreeRTOS/queue.c **** {
 2267              		.loc 1 1975 1 is_stmt 1 view -0
 2268              		.cfi_startproc
 2269              		@ args = 0, pretend = 0, frame = 0
 2270              		@ frame_needed = 0, uses_anonymous_args = 0
 2271              		@ link register save eliminated.
1976:FreeRTOS/queue.c **** BaseType_t xReturn;
 2272              		.loc 1 1976 1 view .LVU708
1977:FreeRTOS/queue.c **** 
1978:FreeRTOS/queue.c **** 	configASSERT( xQueue );
 2273              		.loc 1 1978 24 view .LVU709
1979:FreeRTOS/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2274              		.loc 1 1979 2 view .LVU710
 2275              		.loc 1 1979 30 is_stmt 0 view .LVU711
 2276 0000 826B     		ldr	r2, [r0, #56]
 2277              		.loc 1 1979 77 view .LVU712
 2278 0002 C36B     		ldr	r3, [r0, #60]
 2279              		.loc 1 1979 4 view .LVU713
 2280 0004 9A42     		cmp	r2, r3
 2281 0006 01D0     		beq	.L153
1980:FreeRTOS/queue.c **** 	{
1981:FreeRTOS/queue.c **** 		xReturn = pdTRUE;
1982:FreeRTOS/queue.c **** 	}
1983:FreeRTOS/queue.c **** 	else
1984:FreeRTOS/queue.c **** 	{
1985:FreeRTOS/queue.c **** 		xReturn = pdFALSE;
 2282              		.loc 1 1985 11 view .LVU714
 2283 0008 0020     		movs	r0, #0
 2284              	.LVL219:
1986:FreeRTOS/queue.c **** 	}
1987:FreeRTOS/queue.c **** 
1988:FreeRTOS/queue.c **** 	return xReturn;
 2285              		.loc 1 1988 2 is_stmt 1 view .LVU715
1989:FreeRTOS/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2286              		.loc 1 1989 1 is_stmt 0 view .LVU716
 2287 000a 7047     		bx	lr
 2288              	.LVL220:
 2289              	.L153:
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 92


1981:FreeRTOS/queue.c **** 	}
 2290              		.loc 1 1981 11 view .LVU717
 2291 000c 0120     		movs	r0, #1
 2292              	.LVL221:
1981:FreeRTOS/queue.c **** 	}
 2293              		.loc 1 1981 11 view .LVU718
 2294 000e 7047     		bx	lr
 2295              		.cfi_endproc
 2296              	.LFE55:
 2298              		.text
 2299              	.Letext0:
 2300              		.file 3 "e:\\programdata\\gnu arm embedded toolchain\\lib\\gcc\\arm-none-eabi\\10.3.1\\include\\st
 2301              		.file 4 "e:\\programdata\\gnu arm embedded toolchain\\arm-none-eabi\\include\\machine\\_default_ty
 2302              		.file 5 "e:\\programdata\\gnu arm embedded toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 2303              		.file 6 "FreeRTOS/include/list.h"
 2304              		.file 7 "FreeRTOS/include/task.h"
 2305              		.file 8 "FreeRTOS/include/queue.h"
 2306              		.file 9 "FreeRTOS/include/portable.h"
 2307              		.file 10 "<built-in>"
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 93


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:18     .text.prvIsQueueFull:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:23     .text.prvIsQueueFull:00000000 prvIsQueueFull
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:72     .text.prvIsQueueEmpty:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:77     .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:122    .text.prvCopyDataToQueue:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:127    .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:284    .text.prvCopyDataFromQueue:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:289    .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:341    .text.prvUnlockQueue:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:346    .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:471    .text.xQueueGenericReset:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:477    .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:589    .text.prvInitialiseNewQueue:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:594    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:647    .text.xQueueGenericCreate:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:653    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:735    .text.xQueueGenericSend:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:741    .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1014   .text.prvInitialiseMutex:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1019   .text.prvInitialiseMutex:00000000 prvInitialiseMutex
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1067   .text.xQueueCreateMutex:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1073   .text.xQueueCreateMutex:00000000 xQueueCreateMutex
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1112   .text.xQueueGenericSendFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1118   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1273   .text.xQueueGiveFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1279   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1445   .text.xQueueGenericReceive:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1451   .text.xQueueGenericReceive:00000000 xQueueGenericReceive
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1802   .text.xQueueReceiveFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1808   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1965   .text.xQueuePeekFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:1971   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2071   .text.uxQueueMessagesWaiting:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2077   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2112   .text.uxQueueSpacesAvailable:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2118   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2161   .text.uxQueueMessagesWaitingFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2167   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2188   .text.vQueueDelete:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2194   .text.vQueueDelete:00000000 vQueueDelete
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2220   .text.xQueueIsQueueEmptyFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2226   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2258   .text.xQueueIsQueueFullFromISR:00000000 $t
C:\Users\nine\AppData\Local\Temp\cca1cZRj.s:2264   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
pvPortMalloc
vTaskSetTimeOutState
ARM GAS  C:\Users\nine\AppData\Local\Temp\cca1cZRj.s 			page 94


xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
pvTaskIncrementMutexHeldCount
vTaskPriorityInherit
vPortFree
