ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"port.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskExitError,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  23              	prvTaskExitError:
  24              	.LFB35:
  25              		.file 1 "FreeRTOS/portable/ARM_CM3/port.c"
   1:FreeRTOS/portable/ARM_CM3/port.c **** /*
   2:FreeRTOS/portable/ARM_CM3/port.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:FreeRTOS/portable/ARM_CM3/port.c ****     All rights reserved
   4:FreeRTOS/portable/ARM_CM3/port.c **** 
   5:FreeRTOS/portable/ARM_CM3/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portable/ARM_CM3/port.c **** 
   7:FreeRTOS/portable/ARM_CM3/port.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/portable/ARM_CM3/port.c **** 
   9:FreeRTOS/portable/ARM_CM3/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/portable/ARM_CM3/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/portable/ARM_CM3/port.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/portable/ARM_CM3/port.c **** 
  13:FreeRTOS/portable/ARM_CM3/port.c ****     ***************************************************************************
  14:FreeRTOS/portable/ARM_CM3/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/portable/ARM_CM3/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/portable/ARM_CM3/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/portable/ARM_CM3/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/portable/ARM_CM3/port.c ****     ***************************************************************************
  19:FreeRTOS/portable/ARM_CM3/port.c **** 
  20:FreeRTOS/portable/ARM_CM3/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/portable/ARM_CM3/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/portable/ARM_CM3/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/portable/ARM_CM3/port.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/portable/ARM_CM3/port.c **** 
  25:FreeRTOS/portable/ARM_CM3/port.c ****     ***************************************************************************
  26:FreeRTOS/portable/ARM_CM3/port.c ****      *                                                                       *
  27:FreeRTOS/portable/ARM_CM3/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/portable/ARM_CM3/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/portable/ARM_CM3/port.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/portable/ARM_CM3/port.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/portable/ARM_CM3/port.c ****      *                                                                       *
  32:FreeRTOS/portable/ARM_CM3/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/portable/ARM_CM3/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 2


  34:FreeRTOS/portable/ARM_CM3/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/portable/ARM_CM3/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/portable/ARM_CM3/port.c ****      *                                                                       *
  37:FreeRTOS/portable/ARM_CM3/port.c ****     ***************************************************************************
  38:FreeRTOS/portable/ARM_CM3/port.c **** 
  39:FreeRTOS/portable/ARM_CM3/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/portable/ARM_CM3/port.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/portable/ARM_CM3/port.c ****     defined configASSERT()?
  42:FreeRTOS/portable/ARM_CM3/port.c **** 
  43:FreeRTOS/portable/ARM_CM3/port.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/portable/ARM_CM3/port.c ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/portable/ARM_CM3/port.c ****     participating in the support forum.
  46:FreeRTOS/portable/ARM_CM3/port.c **** 
  47:FreeRTOS/portable/ARM_CM3/port.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/portable/ARM_CM3/port.c ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/portable/ARM_CM3/port.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/portable/ARM_CM3/port.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/portable/ARM_CM3/port.c **** 
  52:FreeRTOS/portable/ARM_CM3/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/portable/ARM_CM3/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/portable/ARM_CM3/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/portable/ARM_CM3/port.c **** 
  56:FreeRTOS/portable/ARM_CM3/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/portable/ARM_CM3/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/portable/ARM_CM3/port.c **** 
  59:FreeRTOS/portable/ARM_CM3/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/portable/ARM_CM3/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/portable/ARM_CM3/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/portable/ARM_CM3/port.c **** 
  63:FreeRTOS/portable/ARM_CM3/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/portable/ARM_CM3/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/portable/ARM_CM3/port.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/portable/ARM_CM3/port.c **** 
  67:FreeRTOS/portable/ARM_CM3/port.c ****     1 tab == 4 spaces!
  68:FreeRTOS/portable/ARM_CM3/port.c **** */
  69:FreeRTOS/portable/ARM_CM3/port.c **** 
  70:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------
  71:FreeRTOS/portable/ARM_CM3/port.c ****  * Implementation of functions defined in portable.h for the ARM CM3 port.
  72:FreeRTOS/portable/ARM_CM3/port.c ****  *----------------------------------------------------------*/
  73:FreeRTOS/portable/ARM_CM3/port.c **** 
  74:FreeRTOS/portable/ARM_CM3/port.c **** /* Scheduler includes. */
  75:FreeRTOS/portable/ARM_CM3/port.c **** #include "FreeRTOS.h"
  76:FreeRTOS/portable/ARM_CM3/port.c **** #include "task.h"
  77:FreeRTOS/portable/ARM_CM3/port.c **** 
  78:FreeRTOS/portable/ARM_CM3/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  79:FreeRTOS/portable/ARM_CM3/port.c **** defined.  The value should also ensure backward compatibility.
  80:FreeRTOS/portable/ARM_CM3/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  81:FreeRTOS/portable/ARM_CM3/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  82:FreeRTOS/portable/ARM_CM3/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  83:FreeRTOS/portable/ARM_CM3/port.c **** #endif
  84:FreeRTOS/portable/ARM_CM3/port.c **** 
  85:FreeRTOS/portable/ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  86:FreeRTOS/portable/ARM_CM3/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  87:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  88:FreeRTOS/portable/ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  89:FreeRTOS/portable/ARM_CM3/port.c **** #else
  90:FreeRTOS/portable/ARM_CM3/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 3


  91:FreeRTOS/portable/ARM_CM3/port.c **** 	as the core. */
  92:FreeRTOS/portable/ARM_CM3/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  93:FreeRTOS/portable/ARM_CM3/port.c **** #endif
  94:FreeRTOS/portable/ARM_CM3/port.c **** 
  95:FreeRTOS/portable/ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  96:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  97:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  98:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  99:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
 100:FreeRTOS/portable/ARM_CM3/port.c **** /* ...then bits in the registers. */
 101:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
 102:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
 103:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
 104:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
 105:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
 106:FreeRTOS/portable/ARM_CM3/port.c **** 
 107:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
 108:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
 109:FreeRTOS/portable/ARM_CM3/port.c **** 
 110:FreeRTOS/portable/ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
 111:FreeRTOS/portable/ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
 112:FreeRTOS/portable/ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
 113:FreeRTOS/portable/ARM_CM3/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
 114:FreeRTOS/portable/ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
 115:FreeRTOS/portable/ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
 116:FreeRTOS/portable/ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
 117:FreeRTOS/portable/ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
 118:FreeRTOS/portable/ARM_CM3/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
 119:FreeRTOS/portable/ARM_CM3/port.c **** 
 120:FreeRTOS/portable/ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
 121:FreeRTOS/portable/ARM_CM3/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
 122:FreeRTOS/portable/ARM_CM3/port.c **** 
 123:FreeRTOS/portable/ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
 124:FreeRTOS/portable/ARM_CM3/port.c **** #define portINITIAL_XPSR					( 0x01000000UL )
 125:FreeRTOS/portable/ARM_CM3/port.c **** 
 126:FreeRTOS/portable/ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
 127:FreeRTOS/portable/ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
 128:FreeRTOS/portable/ARM_CM3/port.c **** 
 129:FreeRTOS/portable/ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 130:FreeRTOS/portable/ARM_CM3/port.c **** occurred while the SysTick counter is stopped during tickless idle
 131:FreeRTOS/portable/ARM_CM3/port.c **** calculations. */
 132:FreeRTOS/portable/ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 133:FreeRTOS/portable/ARM_CM3/port.c **** 
 134:FreeRTOS/portable/ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
 135:FreeRTOS/portable/ARM_CM3/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
 136:FreeRTOS/portable/ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )
 137:FreeRTOS/portable/ARM_CM3/port.c **** 
 138:FreeRTOS/portable/ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 139:FreeRTOS/portable/ARM_CM3/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 140:FreeRTOS/portable/ARM_CM3/port.c **** debugger. */
 141:FreeRTOS/portable/ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
 142:FreeRTOS/portable/ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 143:FreeRTOS/portable/ARM_CM3/port.c **** #else
 144:FreeRTOS/portable/ARM_CM3/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 145:FreeRTOS/portable/ARM_CM3/port.c **** #endif
 146:FreeRTOS/portable/ARM_CM3/port.c **** 
 147:FreeRTOS/portable/ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 4


 148:FreeRTOS/portable/ARM_CM3/port.c **** variable. */
 149:FreeRTOS/portable/ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 150:FreeRTOS/portable/ARM_CM3/port.c **** 
 151:FreeRTOS/portable/ARM_CM3/port.c **** /*
 152:FreeRTOS/portable/ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 153:FreeRTOS/portable/ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 154:FreeRTOS/portable/ARM_CM3/port.c ****  * generate the tick interrupt.
 155:FreeRTOS/portable/ARM_CM3/port.c ****  */
 156:FreeRTOS/portable/ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 157:FreeRTOS/portable/ARM_CM3/port.c **** 
 158:FreeRTOS/portable/ARM_CM3/port.c **** /*
 159:FreeRTOS/portable/ARM_CM3/port.c ****  * Exception handlers.
 160:FreeRTOS/portable/ARM_CM3/port.c ****  */
 161:FreeRTOS/portable/ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 162:FreeRTOS/portable/ARM_CM3/port.c **** void xPortSysTickHandler( void );
 163:FreeRTOS/portable/ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 164:FreeRTOS/portable/ARM_CM3/port.c **** 
 165:FreeRTOS/portable/ARM_CM3/port.c **** /*
 166:FreeRTOS/portable/ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 167:FreeRTOS/portable/ARM_CM3/port.c ****  */
 168:FreeRTOS/portable/ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 169:FreeRTOS/portable/ARM_CM3/port.c **** 
 170:FreeRTOS/portable/ARM_CM3/port.c **** /*
 171:FreeRTOS/portable/ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 172:FreeRTOS/portable/ARM_CM3/port.c ****  */
 173:FreeRTOS/portable/ARM_CM3/port.c **** static void prvTaskExitError( void );
 174:FreeRTOS/portable/ARM_CM3/port.c **** 
 175:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 176:FreeRTOS/portable/ARM_CM3/port.c **** 
 177:FreeRTOS/portable/ARM_CM3/port.c **** /*
 178:FreeRTOS/portable/ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
 179:FreeRTOS/portable/ARM_CM3/port.c ****  */
 180:FreeRTOS/portable/ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 181:FreeRTOS/portable/ARM_CM3/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 182:FreeRTOS/portable/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 183:FreeRTOS/portable/ARM_CM3/port.c **** 
 184:FreeRTOS/portable/ARM_CM3/port.c **** /*
 185:FreeRTOS/portable/ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 186:FreeRTOS/portable/ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 187:FreeRTOS/portable/ARM_CM3/port.c ****  */
 188:FreeRTOS/portable/ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 189:FreeRTOS/portable/ARM_CM3/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 190:FreeRTOS/portable/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 191:FreeRTOS/portable/ARM_CM3/port.c **** 
 192:FreeRTOS/portable/ARM_CM3/port.c **** /*
 193:FreeRTOS/portable/ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 194:FreeRTOS/portable/ARM_CM3/port.c ****  * power functionality only.
 195:FreeRTOS/portable/ARM_CM3/port.c ****  */
 196:FreeRTOS/portable/ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 197:FreeRTOS/portable/ARM_CM3/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 198:FreeRTOS/portable/ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 199:FreeRTOS/portable/ARM_CM3/port.c **** 
 200:FreeRTOS/portable/ARM_CM3/port.c **** /*
 201:FreeRTOS/portable/ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 202:FreeRTOS/portable/ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 203:FreeRTOS/portable/ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 204:FreeRTOS/portable/ARM_CM3/port.c ****  */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 5


 205:FreeRTOS/portable/ARM_CM3/port.c **** #if ( configASSERT_DEFINED == 1 )
 206:FreeRTOS/portable/ARM_CM3/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 207:FreeRTOS/portable/ARM_CM3/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 208:FreeRTOS/portable/ARM_CM3/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 209:FreeRTOS/portable/ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 210:FreeRTOS/portable/ARM_CM3/port.c **** 
 211:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 212:FreeRTOS/portable/ARM_CM3/port.c **** 
 213:FreeRTOS/portable/ARM_CM3/port.c **** /*
 214:FreeRTOS/portable/ARM_CM3/port.c ****  * See header file for description.
 215:FreeRTOS/portable/ARM_CM3/port.c ****  */
 216:FreeRTOS/portable/ARM_CM3/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 217:FreeRTOS/portable/ARM_CM3/port.c **** {
 218:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 219:FreeRTOS/portable/ARM_CM3/port.c **** 	interrupt. */
 220:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
 221:FreeRTOS/portable/ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 222:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack--;
 223:FreeRTOS/portable/ARM_CM3/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 224:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack--;
 225:FreeRTOS/portable/ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 226:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 227:FreeRTOS/portable/ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 228:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 229:FreeRTOS/portable/ARM_CM3/port.c **** 
 230:FreeRTOS/portable/ARM_CM3/port.c **** 	return pxTopOfStack;
 231:FreeRTOS/portable/ARM_CM3/port.c **** }
 232:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 233:FreeRTOS/portable/ARM_CM3/port.c **** 
 234:FreeRTOS/portable/ARM_CM3/port.c **** static void prvTaskExitError( void )
 235:FreeRTOS/portable/ARM_CM3/port.c **** {
  26              		.loc 1 235 1 view -0
  27              		.cfi_startproc
  28              		@ Volatile: function does not return.
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 236:FreeRTOS/portable/ARM_CM3/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 237:FreeRTOS/portable/ARM_CM3/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 238:FreeRTOS/portable/ARM_CM3/port.c **** 	should instead call vTaskDelete( NULL ).
 239:FreeRTOS/portable/ARM_CM3/port.c **** 
 240:FreeRTOS/portable/ARM_CM3/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 241:FreeRTOS/portable/ARM_CM3/port.c **** 	defined, then stop here so application writers can catch the error. */
 242:FreeRTOS/portable/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
  32              		.loc 1 242 43 view .LVU1
 243:FreeRTOS/portable/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
  33              		.loc 1 243 2 view .LVU2
  34              	.LBB12:
  35              	.LBI12:
  36              		.file 2 "FreeRTOS/portable/ARM_CM3/portmacro.h"
   1:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*
   2:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:FreeRTOS/portable/ARM_CM3/portmacro.h ****     All rights reserved
   4:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
   5:FreeRTOS/portable/ARM_CM3/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
   7:FreeRTOS/portable/ARM_CM3/portmacro.h ****     This file is part of the FreeRTOS distribution.
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 6


   8:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
   9:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/portable/ARM_CM3/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  13:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  14:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/portable/ARM_CM3/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  19:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  20:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/portable/ARM_CM3/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/portable/ARM_CM3/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  25:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  26:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *                                                                       *
  27:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *                                                                       *
  32:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/portable/ARM_CM3/portmacro.h ****      *                                                                       *
  37:FreeRTOS/portable/ARM_CM3/portmacro.h ****     ***************************************************************************
  38:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  39:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/portable/ARM_CM3/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/portable/ARM_CM3/portmacro.h ****     defined configASSERT()?
  42:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  43:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/portable/ARM_CM3/portmacro.h ****     embedded software for free we request you assist our global community by
  45:FreeRTOS/portable/ARM_CM3/portmacro.h ****     participating in the support forum.
  46:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  47:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/portable/ARM_CM3/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/portable/ARM_CM3/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  52:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/portable/ARM_CM3/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/portable/ARM_CM3/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  56:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  59:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/portable/ARM_CM3/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/portable/ARM_CM3/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  63:FreeRTOS/portable/ARM_CM3/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/portable/ARM_CM3/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 7


  65:FreeRTOS/portable/ARM_CM3/portmacro.h ****     mission critical applications that require provable dependability.
  66:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  67:FreeRTOS/portable/ARM_CM3/portmacro.h ****     1 tab == 4 spaces!
  68:FreeRTOS/portable/ARM_CM3/portmacro.h **** */
  69:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  70:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  71:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  72:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  73:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  74:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  75:FreeRTOS/portable/ARM_CM3/portmacro.h **** extern "C" {
  76:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
  77:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  78:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  79:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * Port specific definitions.
  80:FreeRTOS/portable/ARM_CM3/portmacro.h ****  *
  81:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  83:FreeRTOS/portable/ARM_CM3/portmacro.h ****  *
  84:FreeRTOS/portable/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  85:FreeRTOS/portable/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  86:FreeRTOS/portable/ARM_CM3/portmacro.h ****  */
  87:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  88:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Type definitions. */
  89:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portCHAR		char
  90:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portFLOAT		float
  91:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  92:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portLONG		long
  93:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSHORT		short
  94:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  96:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
  97:FreeRTOS/portable/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:FreeRTOS/portable/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  99:FreeRTOS/portable/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
 100:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 101:FreeRTOS/portable/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
 103:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:FreeRTOS/portable/ARM_CM3/portmacro.h **** #else
 105:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
 106:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 108:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
 110:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 112:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 114:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Architecture specifics. */
 115:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 119:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 120:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
 121:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portYIELD() 															\
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 8


 122:FreeRTOS/portable/ARM_CM3/portmacro.h **** {																				\
 123:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:FreeRTOS/portable/ARM_CM3/portmacro.h **** 																				\
 126:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
 130:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 131:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 132:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 137:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 138:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Critical section management. */
 139:FreeRTOS/portable/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
 140:FreeRTOS/portable/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
 141:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 148:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 149:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 150:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:FreeRTOS/portable/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:FreeRTOS/portable/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 153:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 156:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 157:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 158:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 162:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 163:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 164:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 165:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 168:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 169:FreeRTOS/portable/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 171:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 172:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	{
 174:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 175:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 176:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		return ucReturn;
 178:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 9


 179:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 180:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 181:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#endif
 184:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 185:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 189:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 191:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 193:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 195:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 196:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 197:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifdef configASSERT
 198:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 201:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 202:FreeRTOS/portable/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 203:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portNOP()
 204:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 205:FreeRTOS/portable/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 206:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 207:FreeRTOS/portable/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 208:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:FreeRTOS/portable/ARM_CM3/portmacro.h **** #endif
 210:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 211:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 213:FreeRTOS/portable/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:FreeRTOS/portable/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 215:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 216:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 219:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	{
 221:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 222:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	}
 223:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	else
 224:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	{
 225:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 226:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	}
 227:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 228:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	return xReturn;
 229:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 230:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 231:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 232:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 233:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  37              		.loc 2 233 30 view .LVU3
  38              	.LBB13:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 10


 234:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 235:FreeRTOS/portable/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
  39              		.loc 2 235 1 view .LVU4
 236:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 237:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile
  40              		.loc 2 237 2 view .LVU5
  41              		.syntax unified
  42              	@ 237 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
  43 0000 4FF05003 			mov r3, #80												
  44 0004 83F31188 		msr basepri, r3											
  45 0008 BFF36F8F 		isb														
  46 000c BFF34F8F 		dsb														
  47              	
  48              	@ 0 "" 2
  49              	.LVL0:
  50              		.thumb
  51              		.syntax unified
  52              	.L2:
  53              		.loc 2 237 2 is_stmt 0 view .LVU6
  54              	.LBE13:
  55              	.LBE12:
 244:FreeRTOS/portable/ARM_CM3/port.c **** 	for( ;; );
  56              		.loc 1 244 2 is_stmt 1 discriminator 1 view .LVU7
  57              		.loc 1 244 11 discriminator 1 view .LVU8
  58              		.loc 1 244 8 discriminator 1 view .LVU9
  59 0010 FEE7     		b	.L2
  60              		.cfi_endproc
  61              	.LFE35:
  63              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  64              		.align	1
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  69              	prvPortStartFirstTask:
  70              	.LFB37:
 245:FreeRTOS/portable/ARM_CM3/port.c **** }
 246:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 247:FreeRTOS/portable/ARM_CM3/port.c **** 
 248:FreeRTOS/portable/ARM_CM3/port.c **** void vPortSVCHandler( void )
 249:FreeRTOS/portable/ARM_CM3/port.c **** {
 250:FreeRTOS/portable/ARM_CM3/port.c **** 	__asm volatile (
 251:FreeRTOS/portable/ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 252:FreeRTOS/portable/ARM_CM3/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 253:FreeRTOS/portable/ARM_CM3/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 254:FreeRTOS/portable/ARM_CM3/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 255:FreeRTOS/portable/ARM_CM3/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 256:FreeRTOS/portable/ARM_CM3/port.c **** 					"	isb								\n"
 257:FreeRTOS/portable/ARM_CM3/port.c **** 					"	mov r0, #0 						\n"
 258:FreeRTOS/portable/ARM_CM3/port.c **** 					"	msr	basepri, r0					\n"
 259:FreeRTOS/portable/ARM_CM3/port.c **** 					"	orr r14, #0xd					\n"
 260:FreeRTOS/portable/ARM_CM3/port.c **** 					"	bx r14							\n"
 261:FreeRTOS/portable/ARM_CM3/port.c **** 					"									\n"
 262:FreeRTOS/portable/ARM_CM3/port.c **** 					"	.align 4						\n"
 263:FreeRTOS/portable/ARM_CM3/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 264:FreeRTOS/portable/ARM_CM3/port.c **** 				);
 265:FreeRTOS/portable/ARM_CM3/port.c **** }
 266:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 11


 267:FreeRTOS/portable/ARM_CM3/port.c **** 
 268:FreeRTOS/portable/ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 269:FreeRTOS/portable/ARM_CM3/port.c **** {
  71              		.loc 1 269 1 view -0
  72              		.cfi_startproc
  73              		@ Naked Function: prologue and epilogue provided by programmer.
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
 270:FreeRTOS/portable/ARM_CM3/port.c **** 	__asm volatile(
  76              		.loc 1 270 2 view .LVU11
  77              		.syntax unified
  78              	@ 270 "FreeRTOS/portable/ARM_CM3/port.c" 1
  79 0000 0648     		 ldr r0, =0xE000ED08 	
  80 0002 0068     	 ldr r0, [r0] 			
  81 0004 0068     	 ldr r0, [r0] 			
  82 0006 80F30888 	 msr msp, r0			
  83 000a 62B6     	 cpsie i				
  84 000c 61B6     	 cpsie f				
  85 000e BFF34F8F 	 dsb					
  86 0012 BFF36F8F 	 isb					
  87 0016 00DF     	 svc 0					
  88 0018 00BF     	 nop					
  89              	
  90              	@ 0 "" 2
 271:FreeRTOS/portable/ARM_CM3/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 272:FreeRTOS/portable/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 273:FreeRTOS/portable/ARM_CM3/port.c **** 					" ldr r0, [r0] 			\n"
 274:FreeRTOS/portable/ARM_CM3/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 275:FreeRTOS/portable/ARM_CM3/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 276:FreeRTOS/portable/ARM_CM3/port.c **** 					" cpsie f				\n"
 277:FreeRTOS/portable/ARM_CM3/port.c **** 					" dsb					\n"
 278:FreeRTOS/portable/ARM_CM3/port.c **** 					" isb					\n"
 279:FreeRTOS/portable/ARM_CM3/port.c **** 					" svc 0					\n" /* System call to start first task. */
 280:FreeRTOS/portable/ARM_CM3/port.c **** 					" nop					\n"
 281:FreeRTOS/portable/ARM_CM3/port.c **** 				);
 282:FreeRTOS/portable/ARM_CM3/port.c **** }
  91              		.loc 1 282 1 is_stmt 0 view .LVU12
  92              		.thumb
  93              		.syntax unified
  94              		.cfi_endproc
  95              	.LFE37:
  97 001a 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
  98              		.align	1
  99              		.global	pxPortInitialiseStack
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 104              	pxPortInitialiseStack:
 105              	.LVL1:
 106              	.LFB34:
 217:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 107              		.loc 1 217 1 is_stmt 1 view -0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 220:FreeRTOS/portable/ARM_CM3/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 12


 112              		.loc 1 220 2 view .LVU14
 221:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack--;
 113              		.loc 1 221 2 view .LVU15
 221:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack--;
 114              		.loc 1 221 16 is_stmt 0 view .LVU16
 115 0000 4FF08073 		mov	r3, #16777216
 116 0004 40F8043C 		str	r3, [r0, #-4]
 222:FreeRTOS/portable/ARM_CM3/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 117              		.loc 1 222 2 is_stmt 1 view .LVU17
 118              	.LVL2:
 223:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack--;
 119              		.loc 1 223 2 view .LVU18
 223:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack--;
 120              		.loc 1 223 45 is_stmt 0 view .LVU19
 121 0008 21F00101 		bic	r1, r1, #1
 122              	.LVL3:
 223:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack--;
 123              		.loc 1 223 16 view .LVU20
 124 000c 40F8081C 		str	r1, [r0, #-8]
 224:FreeRTOS/portable/ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 125              		.loc 1 224 2 is_stmt 1 view .LVU21
 126              	.LVL4:
 225:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 127              		.loc 1 225 2 view .LVU22
 225:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 128              		.loc 1 225 18 is_stmt 0 view .LVU23
 129 0010 034B     		ldr	r3, .L5
 225:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 130              		.loc 1 225 16 view .LVU24
 131 0012 40F80C3C 		str	r3, [r0, #-12]
 226:FreeRTOS/portable/ARM_CM3/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 132              		.loc 1 226 2 is_stmt 1 view .LVU25
 133              	.LVL5:
 227:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 134              		.loc 1 227 2 view .LVU26
 227:FreeRTOS/portable/ARM_CM3/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 135              		.loc 1 227 16 is_stmt 0 view .LVU27
 136 0016 40F8202C 		str	r2, [r0, #-32]
 228:FreeRTOS/portable/ARM_CM3/port.c **** 
 137              		.loc 1 228 2 is_stmt 1 view .LVU28
 138              	.LVL6:
 230:FreeRTOS/portable/ARM_CM3/port.c **** }
 139              		.loc 1 230 2 view .LVU29
 231:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 140              		.loc 1 231 1 is_stmt 0 view .LVU30
 141 001a 4038     		subs	r0, r0, #64
 142              	.LVL7:
 231:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 143              		.loc 1 231 1 view .LVU31
 144 001c 7047     		bx	lr
 145              	.L6:
 146 001e 00BF     		.align	2
 147              	.L5:
 148 0020 00000000 		.word	prvTaskExitError
 149              		.cfi_endproc
 150              	.LFE34:
 152              		.section	.text.SVC_Handler,"ax",%progbits
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 13


 153              		.align	1
 154              		.global	SVC_Handler
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 159              	SVC_Handler:
 160              	.LFB36:
 249:FreeRTOS/portable/ARM_CM3/port.c **** 	__asm volatile (
 161              		.loc 1 249 1 is_stmt 1 view -0
 162              		.cfi_startproc
 163              		@ Naked Function: prologue and epilogue provided by programmer.
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 250:FreeRTOS/portable/ARM_CM3/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 166              		.loc 1 250 2 view .LVU33
 167              		.syntax unified
 168              	@ 250 "FreeRTOS/portable/ARM_CM3/port.c" 1
 169 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 170 0002 1968     		ldr r1, [r3]					
 171 0004 0868     		ldr r0, [r1]					
 172 0006 B0E8F00F 		ldmia r0!, {r4-r11}				
 173 000a 80F30988 		msr psp, r0						
 174 000e BFF36F8F 		isb								
 175 0012 4FF00000 		mov r0, #0 						
 176 0016 80F31188 		msr	basepri, r0					
 177 001a 4EF00D0E 		orr r14, #0xd					
 178 001e 7047     		bx r14							
 179              										
 180              		.align 4						
 181 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 182              	
 183              	@ 0 "" 2
 265:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 184              		.loc 1 265 1 is_stmt 0 view .LVU34
 185              		.thumb
 186              		.syntax unified
 187              		.cfi_endproc
 188              	.LFE36:
 190              		.section	.text.vPortEndScheduler,"ax",%progbits
 191              		.align	1
 192              		.global	vPortEndScheduler
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 197              	vPortEndScheduler:
 198              	.LFB39:
 283:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 284:FreeRTOS/portable/ARM_CM3/port.c **** 
 285:FreeRTOS/portable/ARM_CM3/port.c **** /*
 286:FreeRTOS/portable/ARM_CM3/port.c ****  * See header file for description.
 287:FreeRTOS/portable/ARM_CM3/port.c ****  */
 288:FreeRTOS/portable/ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 289:FreeRTOS/portable/ARM_CM3/port.c **** {
 290:FreeRTOS/portable/ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 291:FreeRTOS/portable/ARM_CM3/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 292:FreeRTOS/portable/ARM_CM3/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 293:FreeRTOS/portable/ARM_CM3/port.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 14


 294:FreeRTOS/portable/ARM_CM3/port.c **** 	#if( configASSERT_DEFINED == 1 )
 295:FreeRTOS/portable/ARM_CM3/port.c **** 	{
 296:FreeRTOS/portable/ARM_CM3/port.c **** 		volatile uint32_t ulOriginalPriority;
 297:FreeRTOS/portable/ARM_CM3/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 298:FreeRTOS/portable/ARM_CM3/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 299:FreeRTOS/portable/ARM_CM3/port.c **** 
 300:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 301:FreeRTOS/portable/ARM_CM3/port.c **** 		functions can be called.  ISR safe functions are those that end in
 302:FreeRTOS/portable/ARM_CM3/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 303:FreeRTOS/portable/ARM_CM3/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 304:FreeRTOS/portable/ARM_CM3/port.c **** 
 305:FreeRTOS/portable/ARM_CM3/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 306:FreeRTOS/portable/ARM_CM3/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 307:FreeRTOS/portable/ARM_CM3/port.c **** 
 308:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Determine the number of priority bits available.  First write to all
 309:FreeRTOS/portable/ARM_CM3/port.c **** 		possible bits. */
 310:FreeRTOS/portable/ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 311:FreeRTOS/portable/ARM_CM3/port.c **** 
 312:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Read the value back to see how many bits stuck. */
 313:FreeRTOS/portable/ARM_CM3/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 314:FreeRTOS/portable/ARM_CM3/port.c **** 
 315:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Use the same mask on the maximum system call priority. */
 316:FreeRTOS/portable/ARM_CM3/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 317:FreeRTOS/portable/ARM_CM3/port.c **** 
 318:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 319:FreeRTOS/portable/ARM_CM3/port.c **** 		of bits read back. */
 320:FreeRTOS/portable/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 321:FreeRTOS/portable/ARM_CM3/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 322:FreeRTOS/portable/ARM_CM3/port.c **** 		{
 323:FreeRTOS/portable/ARM_CM3/port.c **** 			ulMaxPRIGROUPValue--;
 324:FreeRTOS/portable/ARM_CM3/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 325:FreeRTOS/portable/ARM_CM3/port.c **** 		}
 326:FreeRTOS/portable/ARM_CM3/port.c **** 
 327:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 328:FreeRTOS/portable/ARM_CM3/port.c **** 		register. */
 329:FreeRTOS/portable/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 330:FreeRTOS/portable/ARM_CM3/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 331:FreeRTOS/portable/ARM_CM3/port.c **** 
 332:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 333:FreeRTOS/portable/ARM_CM3/port.c **** 		value. */
 334:FreeRTOS/portable/ARM_CM3/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 335:FreeRTOS/portable/ARM_CM3/port.c **** 	}
 336:FreeRTOS/portable/ARM_CM3/port.c **** 	#endif /* conifgASSERT_DEFINED */
 337:FreeRTOS/portable/ARM_CM3/port.c **** 
 338:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 339:FreeRTOS/portable/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 340:FreeRTOS/portable/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 341:FreeRTOS/portable/ARM_CM3/port.c **** 
 342:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 343:FreeRTOS/portable/ARM_CM3/port.c **** 	here already. */
 344:FreeRTOS/portable/ARM_CM3/port.c **** 	vPortSetupTimerInterrupt();
 345:FreeRTOS/portable/ARM_CM3/port.c **** 
 346:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 347:FreeRTOS/portable/ARM_CM3/port.c **** 	uxCriticalNesting = 0;
 348:FreeRTOS/portable/ARM_CM3/port.c **** 
 349:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Start the first task. */
 350:FreeRTOS/portable/ARM_CM3/port.c **** 	prvPortStartFirstTask();
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 15


 351:FreeRTOS/portable/ARM_CM3/port.c **** 
 352:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 353:FreeRTOS/portable/ARM_CM3/port.c **** 	exit error function to prevent compiler warnings about a static function
 354:FreeRTOS/portable/ARM_CM3/port.c **** 	not being called in the case that the application writer overrides this
 355:FreeRTOS/portable/ARM_CM3/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS. */
 356:FreeRTOS/portable/ARM_CM3/port.c **** 	prvTaskExitError();
 357:FreeRTOS/portable/ARM_CM3/port.c **** 
 358:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Should not get here! */
 359:FreeRTOS/portable/ARM_CM3/port.c **** 	return 0;
 360:FreeRTOS/portable/ARM_CM3/port.c **** }
 361:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 362:FreeRTOS/portable/ARM_CM3/port.c **** 
 363:FreeRTOS/portable/ARM_CM3/port.c **** void vPortEndScheduler( void )
 364:FreeRTOS/portable/ARM_CM3/port.c **** {
 199              		.loc 1 364 1 is_stmt 1 view -0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              		@ link register save eliminated.
 365:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 366:FreeRTOS/portable/ARM_CM3/port.c **** 	Artificially force an assert. */
 367:FreeRTOS/portable/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 204              		.loc 1 367 45 view .LVU36
 368:FreeRTOS/portable/ARM_CM3/port.c **** }
 205              		.loc 1 368 1 is_stmt 0 view .LVU37
 206 0000 7047     		bx	lr
 207              		.cfi_endproc
 208              	.LFE39:
 210              		.section	.text.vPortEnterCritical,"ax",%progbits
 211              		.align	1
 212              		.global	vPortEnterCritical
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 217              	vPortEnterCritical:
 218              	.LFB40:
 369:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 370:FreeRTOS/portable/ARM_CM3/port.c **** 
 371:FreeRTOS/portable/ARM_CM3/port.c **** void vPortEnterCritical( void )
 372:FreeRTOS/portable/ARM_CM3/port.c **** {
 219              		.loc 1 372 1 is_stmt 1 view -0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 373:FreeRTOS/portable/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 224              		.loc 1 373 2 view .LVU39
 225              	.LBB14:
 226              	.LBI14:
 233:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 227              		.loc 2 233 30 view .LVU40
 228              	.LBB15:
 235:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 229              		.loc 2 235 1 view .LVU41
 230              		.loc 2 237 2 view .LVU42
 231              		.syntax unified
 232              	@ 237 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 16


 233 0000 4FF05003 			mov r3, #80												
 234 0004 83F31188 		msr basepri, r3											
 235 0008 BFF36F8F 		isb														
 236 000c BFF34F8F 		dsb														
 237              	
 238              	@ 0 "" 2
 239              		.thumb
 240              		.syntax unified
 241              	.LBE15:
 242              	.LBE14:
 374:FreeRTOS/portable/ARM_CM3/port.c **** 	uxCriticalNesting++;
 243              		.loc 1 374 2 view .LVU43
 244              		.loc 1 374 19 is_stmt 0 view .LVU44
 245 0010 024A     		ldr	r2, .L10
 246 0012 1368     		ldr	r3, [r2]
 247 0014 0133     		adds	r3, r3, #1
 248 0016 1360     		str	r3, [r2]
 375:FreeRTOS/portable/ARM_CM3/port.c **** 
 376:FreeRTOS/portable/ARM_CM3/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 377:FreeRTOS/portable/ARM_CM3/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 378:FreeRTOS/portable/ARM_CM3/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 379:FreeRTOS/portable/ARM_CM3/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 380:FreeRTOS/portable/ARM_CM3/port.c **** 	assert function also uses a critical section. */
 381:FreeRTOS/portable/ARM_CM3/port.c **** 	if( uxCriticalNesting == 1 )
 249              		.loc 1 381 2 is_stmt 1 view .LVU45
 382:FreeRTOS/portable/ARM_CM3/port.c **** 	{
 383:FreeRTOS/portable/ARM_CM3/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 250              		.loc 1 383 71 view .LVU46
 384:FreeRTOS/portable/ARM_CM3/port.c **** 	}
 385:FreeRTOS/portable/ARM_CM3/port.c **** }
 251              		.loc 1 385 1 is_stmt 0 view .LVU47
 252 0018 7047     		bx	lr
 253              	.L11:
 254 001a 00BF     		.align	2
 255              	.L10:
 256 001c 00000000 		.word	.LANCHOR0
 257              		.cfi_endproc
 258              	.LFE40:
 260              		.section	.text.vPortExitCritical,"ax",%progbits
 261              		.align	1
 262              		.global	vPortExitCritical
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 267              	vPortExitCritical:
 268              	.LFB41:
 386:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 387:FreeRTOS/portable/ARM_CM3/port.c **** 
 388:FreeRTOS/portable/ARM_CM3/port.c **** void vPortExitCritical( void )
 389:FreeRTOS/portable/ARM_CM3/port.c **** {
 269              		.loc 1 389 1 is_stmt 1 view -0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 390:FreeRTOS/portable/ARM_CM3/port.c **** 	configASSERT( uxCriticalNesting );
 274              		.loc 1 390 35 view .LVU49
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 17


 391:FreeRTOS/portable/ARM_CM3/port.c **** 	uxCriticalNesting--;
 275              		.loc 1 391 2 view .LVU50
 276              		.loc 1 391 19 is_stmt 0 view .LVU51
 277 0000 034A     		ldr	r2, .L14
 278 0002 1368     		ldr	r3, [r2]
 279 0004 013B     		subs	r3, r3, #1
 280 0006 1360     		str	r3, [r2]
 392:FreeRTOS/portable/ARM_CM3/port.c **** 	if( uxCriticalNesting == 0 )
 281              		.loc 1 392 2 is_stmt 1 view .LVU52
 282              		.loc 1 392 4 is_stmt 0 view .LVU53
 283 0008 0BB9     		cbnz	r3, .L12
 393:FreeRTOS/portable/ARM_CM3/port.c **** 	{
 394:FreeRTOS/portable/ARM_CM3/port.c **** 		portENABLE_INTERRUPTS();
 284              		.loc 1 394 3 is_stmt 1 view .LVU54
 285              	.LVL8:
 286              	.LBB16:
 287              	.LBI16:
 238:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 239:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 242:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 243:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	);
 245:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 246:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 247:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 248:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 249:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 251:FreeRTOS/portable/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 253:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile
 254:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 255:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 259:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 260:FreeRTOS/portable/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	);
 262:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 263:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	warnings. */
 265:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 266:FreeRTOS/portable/ARM_CM3/portmacro.h **** }
 267:FreeRTOS/portable/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 268:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 269:FreeRTOS/portable/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 288              		.loc 2 269 30 view .LVU55
 289              	.LBB17:
 270:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 271:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	__asm volatile
 290              		.loc 2 271 2 view .LVU56
 291              		.syntax unified
 292              	@ 271 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 293 000a 83F31188 			msr basepri, r3	
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 18


 294              	@ 0 "" 2
 295              	.LVL9:
 296              		.thumb
 297              		.syntax unified
 298              	.L12:
 299              		.loc 2 271 2 is_stmt 0 view .LVU57
 300              	.LBE17:
 301              	.LBE16:
 395:FreeRTOS/portable/ARM_CM3/port.c **** 	}
 396:FreeRTOS/portable/ARM_CM3/port.c **** }
 302              		.loc 1 396 1 view .LVU58
 303 000e 7047     		bx	lr
 304              	.L15:
 305              		.align	2
 306              	.L14:
 307 0010 00000000 		.word	.LANCHOR0
 308              		.cfi_endproc
 309              	.LFE41:
 311              		.section	.text.PendSV_Handler,"ax",%progbits
 312              		.align	1
 313              		.global	PendSV_Handler
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 318              	PendSV_Handler:
 319              	.LFB42:
 397:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 398:FreeRTOS/portable/ARM_CM3/port.c **** 
 399:FreeRTOS/portable/ARM_CM3/port.c **** void xPortPendSVHandler( void )
 400:FreeRTOS/portable/ARM_CM3/port.c **** {
 320              		.loc 1 400 1 is_stmt 1 view -0
 321              		.cfi_startproc
 322              		@ Naked Function: prologue and epilogue provided by programmer.
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 401:FreeRTOS/portable/ARM_CM3/port.c **** 	/* This is a naked function. */
 402:FreeRTOS/portable/ARM_CM3/port.c **** 
 403:FreeRTOS/portable/ARM_CM3/port.c **** 	__asm volatile
 325              		.loc 1 403 2 view .LVU60
 326              		.syntax unified
 327              	@ 403 "FreeRTOS/portable/ARM_CM3/port.c" 1
 328 0000 EFF30980 			mrs r0, psp							
 329 0004 BFF36F8F 		isb									
 330              											
 331 0008 0D4B     		ldr	r3, pxCurrentTCBConst			
 332 000a 1A68     		ldr	r2, [r3]						
 333              											
 334 000c 20E9F00F 		stmdb r0!, {r4-r11}					
 335 0010 1060     		str r0, [r2]						
 336              											
 337 0012 2DE90840 		stmdb sp!, {r3, r14}				
 338 0016 4FF05000 		mov r0, #80							
 339 001a 80F31188 		msr basepri, r0						
 340 001e FFF7FEFF 		bl vTaskSwitchContext				
 341 0022 4FF00000 		mov r0, #0							
 342 0026 80F31188 		msr basepri, r0						
 343 002a BDE80840 		ldmia sp!, {r3, r14}				
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 19


 344              											
 345 002e 1968     		ldr r1, [r3]						
 346 0030 0868     		ldr r0, [r1]						
 347 0032 B0E8F00F 		ldmia r0!, {r4-r11}					
 348 0036 80F30988 		msr psp, r0							
 349 003a BFF36F8F 		isb									
 350 003e 7047     		bx r14								
 351              											
 352              		.align 4							
 353 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 354              	
 355              	@ 0 "" 2
 404:FreeRTOS/portable/ARM_CM3/port.c **** 	(
 405:FreeRTOS/portable/ARM_CM3/port.c **** 	"	mrs r0, psp							\n"
 406:FreeRTOS/portable/ARM_CM3/port.c **** 	"	isb									\n"
 407:FreeRTOS/portable/ARM_CM3/port.c **** 	"										\n"
 408:FreeRTOS/portable/ARM_CM3/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 409:FreeRTOS/portable/ARM_CM3/port.c **** 	"	ldr	r2, [r3]						\n"
 410:FreeRTOS/portable/ARM_CM3/port.c **** 	"										\n"
 411:FreeRTOS/portable/ARM_CM3/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 412:FreeRTOS/portable/ARM_CM3/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 413:FreeRTOS/portable/ARM_CM3/port.c **** 	"										\n"
 414:FreeRTOS/portable/ARM_CM3/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 415:FreeRTOS/portable/ARM_CM3/port.c **** 	"	mov r0, %0							\n"
 416:FreeRTOS/portable/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 417:FreeRTOS/portable/ARM_CM3/port.c **** 	"	bl vTaskSwitchContext				\n"
 418:FreeRTOS/portable/ARM_CM3/port.c **** 	"	mov r0, #0							\n"
 419:FreeRTOS/portable/ARM_CM3/port.c **** 	"	msr basepri, r0						\n"
 420:FreeRTOS/portable/ARM_CM3/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 421:FreeRTOS/portable/ARM_CM3/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 422:FreeRTOS/portable/ARM_CM3/port.c **** 	"	ldr r1, [r3]						\n"
 423:FreeRTOS/portable/ARM_CM3/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 424:FreeRTOS/portable/ARM_CM3/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 425:FreeRTOS/portable/ARM_CM3/port.c **** 	"	msr psp, r0							\n"
 426:FreeRTOS/portable/ARM_CM3/port.c **** 	"	isb									\n"
 427:FreeRTOS/portable/ARM_CM3/port.c **** 	"	bx r14								\n"
 428:FreeRTOS/portable/ARM_CM3/port.c **** 	"										\n"
 429:FreeRTOS/portable/ARM_CM3/port.c **** 	"	.align 4							\n"
 430:FreeRTOS/portable/ARM_CM3/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 431:FreeRTOS/portable/ARM_CM3/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 432:FreeRTOS/portable/ARM_CM3/port.c **** 	);
 433:FreeRTOS/portable/ARM_CM3/port.c **** }
 356              		.loc 1 433 1 is_stmt 0 view .LVU61
 357              		.thumb
 358              		.syntax unified
 359              		.cfi_endproc
 360              	.LFE42:
 362              		.section	.text.xPortSysTickHandler,"ax",%progbits
 363              		.align	1
 364              		.global	xPortSysTickHandler
 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 369              	xPortSysTickHandler:
 370              	.LFB43:
 434:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 435:FreeRTOS/portable/ARM_CM3/port.c **** 
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 20


 436:FreeRTOS/portable/ARM_CM3/port.c **** void xPortSysTickHandler( void )
 437:FreeRTOS/portable/ARM_CM3/port.c **** {
 371              		.loc 1 437 1 is_stmt 1 view -0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375 0000 08B5     		push	{r3, lr}
 376              	.LCFI0:
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 3, -8
 379              		.cfi_offset 14, -4
 438:FreeRTOS/portable/ARM_CM3/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 439:FreeRTOS/portable/ARM_CM3/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 440:FreeRTOS/portable/ARM_CM3/port.c **** 	save and then restore the interrupt mask value as its value is already
 441:FreeRTOS/portable/ARM_CM3/port.c **** 	known. */
 442:FreeRTOS/portable/ARM_CM3/port.c **** 	portDISABLE_INTERRUPTS();
 380              		.loc 1 442 2 view .LVU63
 381              	.LBB18:
 382              	.LBI18:
 233:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 383              		.loc 2 233 30 view .LVU64
 384              	.LBB19:
 235:FreeRTOS/portable/ARM_CM3/portmacro.h **** 
 385              		.loc 2 235 1 view .LVU65
 237:FreeRTOS/portable/ARM_CM3/portmacro.h **** 	(
 386              		.loc 2 237 2 view .LVU66
 387              		.syntax unified
 388              	@ 237 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 389 0002 4FF05003 			mov r3, #80												
 390 0006 83F31188 		msr basepri, r3											
 391 000a BFF36F8F 		isb														
 392 000e BFF34F8F 		dsb														
 393              	
 394              	@ 0 "" 2
 395              		.thumb
 396              		.syntax unified
 397              	.LBE19:
 398              	.LBE18:
 443:FreeRTOS/portable/ARM_CM3/port.c **** 	{
 444:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Increment the RTOS tick. */
 445:FreeRTOS/portable/ARM_CM3/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 399              		.loc 1 445 3 view .LVU67
 400              		.loc 1 445 7 is_stmt 0 view .LVU68
 401 0012 FFF7FEFF 		bl	xTaskIncrementTick
 402              	.LVL10:
 403              		.loc 1 445 5 view .LVU69
 404 0016 28B1     		cbz	r0, .L18
 446:FreeRTOS/portable/ARM_CM3/port.c **** 		{
 447:FreeRTOS/portable/ARM_CM3/port.c **** 			/* A context switch is required.  Context switching is performed in
 448:FreeRTOS/portable/ARM_CM3/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 449:FreeRTOS/portable/ARM_CM3/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 405              		.loc 1 449 4 is_stmt 1 view .LVU70
 406              		.loc 1 449 26 is_stmt 0 view .LVU71
 407 0018 4FF0E023 		mov	r3, #-536813568
 408 001c 4FF08052 		mov	r2, #268435456
 409 0020 C3F8042D 		str	r2, [r3, #3332]
 410              	.L18:
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 21


 450:FreeRTOS/portable/ARM_CM3/port.c **** 		}
 451:FreeRTOS/portable/ARM_CM3/port.c **** 	}
 452:FreeRTOS/portable/ARM_CM3/port.c **** 	portENABLE_INTERRUPTS();
 411              		.loc 1 452 2 is_stmt 1 view .LVU72
 412              	.LVL11:
 413              	.LBB20:
 414              	.LBI20:
 269:FreeRTOS/portable/ARM_CM3/portmacro.h **** {
 415              		.loc 2 269 30 view .LVU73
 416              	.LBB21:
 417              		.loc 2 271 2 view .LVU74
 418 0024 0023     		movs	r3, #0
 419              		.syntax unified
 420              	@ 271 "FreeRTOS/portable/ARM_CM3/portmacro.h" 1
 421 0026 83F31188 			msr basepri, r3	
 422              	@ 0 "" 2
 423              	.LVL12:
 424              		.loc 2 271 2 is_stmt 0 view .LVU75
 425              		.thumb
 426              		.syntax unified
 427              	.LBE21:
 428              	.LBE20:
 453:FreeRTOS/portable/ARM_CM3/port.c **** }
 429              		.loc 1 453 1 view .LVU76
 430 002a 08BD     		pop	{r3, pc}
 431              		.cfi_endproc
 432              	.LFE43:
 434              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 435              		.align	1
 436              		.weak	vPortSetupTimerInterrupt
 437              		.syntax unified
 438              		.thumb
 439              		.thumb_func
 441              	vPortSetupTimerInterrupt:
 442              	.LFB44:
 454:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 455:FreeRTOS/portable/ARM_CM3/port.c **** 
 456:FreeRTOS/portable/ARM_CM3/port.c **** #if configUSE_TICKLESS_IDLE == 1
 457:FreeRTOS/portable/ARM_CM3/port.c **** 
 458:FreeRTOS/portable/ARM_CM3/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 459:FreeRTOS/portable/ARM_CM3/port.c **** 	{
 460:FreeRTOS/portable/ARM_CM3/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickCTRL;
 461:FreeRTOS/portable/ARM_CM3/port.c **** 	TickType_t xModifiableIdleTime;
 462:FreeRTOS/portable/ARM_CM3/port.c **** 
 463:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 464:FreeRTOS/portable/ARM_CM3/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 465:FreeRTOS/portable/ARM_CM3/port.c **** 		{
 466:FreeRTOS/portable/ARM_CM3/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 467:FreeRTOS/portable/ARM_CM3/port.c **** 		}
 468:FreeRTOS/portable/ARM_CM3/port.c **** 
 469:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 470:FreeRTOS/portable/ARM_CM3/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 471:FreeRTOS/portable/ARM_CM3/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 472:FreeRTOS/portable/ARM_CM3/port.c **** 		kernel with respect to calendar time. */
 473:FreeRTOS/portable/ARM_CM3/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 474:FreeRTOS/portable/ARM_CM3/port.c **** 
 475:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 22


 476:FreeRTOS/portable/ARM_CM3/port.c **** 		tick periods.  -1 is used because this code will execute part way
 477:FreeRTOS/portable/ARM_CM3/port.c **** 		through one of the tick periods. */
 478:FreeRTOS/portable/ARM_CM3/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 479:FreeRTOS/portable/ARM_CM3/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 480:FreeRTOS/portable/ARM_CM3/port.c **** 		{
 481:FreeRTOS/portable/ARM_CM3/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 482:FreeRTOS/portable/ARM_CM3/port.c **** 		}
 483:FreeRTOS/portable/ARM_CM3/port.c **** 
 484:FreeRTOS/portable/ARM_CM3/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 485:FreeRTOS/portable/ARM_CM3/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 486:FreeRTOS/portable/ARM_CM3/port.c **** 		__asm volatile( "cpsid i" );
 487:FreeRTOS/portable/ARM_CM3/port.c **** 		__asm volatile( "dsb" );
 488:FreeRTOS/portable/ARM_CM3/port.c **** 		__asm volatile( "isb" );
 489:FreeRTOS/portable/ARM_CM3/port.c **** 
 490:FreeRTOS/portable/ARM_CM3/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 491:FreeRTOS/portable/ARM_CM3/port.c **** 		to be unsuspended then abandon the low power entry. */
 492:FreeRTOS/portable/ARM_CM3/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 493:FreeRTOS/portable/ARM_CM3/port.c **** 		{
 494:FreeRTOS/portable/ARM_CM3/port.c **** 			/* Restart from whatever is left in the count register to complete
 495:FreeRTOS/portable/ARM_CM3/port.c **** 			this tick period. */
 496:FreeRTOS/portable/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 497:FreeRTOS/portable/ARM_CM3/port.c **** 
 498:FreeRTOS/portable/ARM_CM3/port.c **** 			/* Restart SysTick. */
 499:FreeRTOS/portable/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 500:FreeRTOS/portable/ARM_CM3/port.c **** 
 501:FreeRTOS/portable/ARM_CM3/port.c **** 			/* Reset the reload register to the value required for normal tick
 502:FreeRTOS/portable/ARM_CM3/port.c **** 			periods. */
 503:FreeRTOS/portable/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 504:FreeRTOS/portable/ARM_CM3/port.c **** 
 505:FreeRTOS/portable/ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 506:FreeRTOS/portable/ARM_CM3/port.c **** 			above. */
 507:FreeRTOS/portable/ARM_CM3/port.c **** 			__asm volatile( "cpsie i" );
 508:FreeRTOS/portable/ARM_CM3/port.c **** 		}
 509:FreeRTOS/portable/ARM_CM3/port.c **** 		else
 510:FreeRTOS/portable/ARM_CM3/port.c **** 		{
 511:FreeRTOS/portable/ARM_CM3/port.c **** 			/* Set the new reload value. */
 512:FreeRTOS/portable/ARM_CM3/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 513:FreeRTOS/portable/ARM_CM3/port.c **** 
 514:FreeRTOS/portable/ARM_CM3/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 515:FreeRTOS/portable/ARM_CM3/port.c **** 			zero. */
 516:FreeRTOS/portable/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 517:FreeRTOS/portable/ARM_CM3/port.c **** 
 518:FreeRTOS/portable/ARM_CM3/port.c **** 			/* Restart SysTick. */
 519:FreeRTOS/portable/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 520:FreeRTOS/portable/ARM_CM3/port.c **** 
 521:FreeRTOS/portable/ARM_CM3/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 522:FreeRTOS/portable/ARM_CM3/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 523:FreeRTOS/portable/ARM_CM3/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 524:FreeRTOS/portable/ARM_CM3/port.c **** 			should not be executed again.  However, the original expected idle
 525:FreeRTOS/portable/ARM_CM3/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 526:FreeRTOS/portable/ARM_CM3/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 527:FreeRTOS/portable/ARM_CM3/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 528:FreeRTOS/portable/ARM_CM3/port.c **** 			if( xModifiableIdleTime > 0 )
 529:FreeRTOS/portable/ARM_CM3/port.c **** 			{
 530:FreeRTOS/portable/ARM_CM3/port.c **** 				__asm volatile( "dsb" );
 531:FreeRTOS/portable/ARM_CM3/port.c **** 				__asm volatile( "wfi" );
 532:FreeRTOS/portable/ARM_CM3/port.c **** 				__asm volatile( "isb" );
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 23


 533:FreeRTOS/portable/ARM_CM3/port.c **** 			}
 534:FreeRTOS/portable/ARM_CM3/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 535:FreeRTOS/portable/ARM_CM3/port.c **** 
 536:FreeRTOS/portable/ARM_CM3/port.c **** 			/* Stop SysTick.  Again, the time the SysTick is stopped for is
 537:FreeRTOS/portable/ARM_CM3/port.c **** 			accounted for as best it can be, but using the tickless mode will
 538:FreeRTOS/portable/ARM_CM3/port.c **** 			inevitably result in some tiny drift of the time maintained by the
 539:FreeRTOS/portable/ARM_CM3/port.c **** 			kernel with respect to calendar time. */
 540:FreeRTOS/portable/ARM_CM3/port.c **** 			ulSysTickCTRL = portNVIC_SYSTICK_CTRL_REG;
 541:FreeRTOS/portable/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( ulSysTickCTRL & ~portNVIC_SYSTICK_ENABLE_BIT );
 542:FreeRTOS/portable/ARM_CM3/port.c **** 
 543:FreeRTOS/portable/ARM_CM3/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 544:FreeRTOS/portable/ARM_CM3/port.c **** 			above. */
 545:FreeRTOS/portable/ARM_CM3/port.c **** 			__asm volatile( "cpsie i" );
 546:FreeRTOS/portable/ARM_CM3/port.c **** 
 547:FreeRTOS/portable/ARM_CM3/port.c **** 			if( ( ulSysTickCTRL & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 548:FreeRTOS/portable/ARM_CM3/port.c **** 			{
 549:FreeRTOS/portable/ARM_CM3/port.c **** 				uint32_t ulCalculatedLoadValue;
 550:FreeRTOS/portable/ARM_CM3/port.c **** 
 551:FreeRTOS/portable/ARM_CM3/port.c **** 				/* The tick interrupt has already executed, and the SysTick
 552:FreeRTOS/portable/ARM_CM3/port.c **** 				count reloaded with ulReloadValue.  Reset the
 553:FreeRTOS/portable/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 554:FreeRTOS/portable/ARM_CM3/port.c **** 				period. */
 555:FreeRTOS/portable/ARM_CM3/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 556:FreeRTOS/portable/ARM_CM3/port.c **** 
 557:FreeRTOS/portable/ARM_CM3/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 558:FreeRTOS/portable/ARM_CM3/port.c **** 				underflowed because the post sleep hook did something
 559:FreeRTOS/portable/ARM_CM3/port.c **** 				that took too long. */
 560:FreeRTOS/portable/ARM_CM3/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 561:FreeRTOS/portable/ARM_CM3/port.c **** 				{
 562:FreeRTOS/portable/ARM_CM3/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 563:FreeRTOS/portable/ARM_CM3/port.c **** 				}
 564:FreeRTOS/portable/ARM_CM3/port.c **** 
 565:FreeRTOS/portable/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 566:FreeRTOS/portable/ARM_CM3/port.c **** 
 567:FreeRTOS/portable/ARM_CM3/port.c **** 				/* The tick interrupt handler will already have pended the tick
 568:FreeRTOS/portable/ARM_CM3/port.c **** 				processing in the kernel.  As the pending tick will be
 569:FreeRTOS/portable/ARM_CM3/port.c **** 				processed as soon as this function exits, the tick value
 570:FreeRTOS/portable/ARM_CM3/port.c **** 				maintained by the tick is stepped forward by one less than the
 571:FreeRTOS/portable/ARM_CM3/port.c **** 				time spent waiting. */
 572:FreeRTOS/portable/ARM_CM3/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 573:FreeRTOS/portable/ARM_CM3/port.c **** 			}
 574:FreeRTOS/portable/ARM_CM3/port.c **** 			else
 575:FreeRTOS/portable/ARM_CM3/port.c **** 			{
 576:FreeRTOS/portable/ARM_CM3/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 577:FreeRTOS/portable/ARM_CM3/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 578:FreeRTOS/portable/ARM_CM3/port.c **** 				periods (not the ulReload value which accounted for part
 579:FreeRTOS/portable/ARM_CM3/port.c **** 				ticks). */
 580:FreeRTOS/portable/ARM_CM3/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 581:FreeRTOS/portable/ARM_CM3/port.c **** 
 582:FreeRTOS/portable/ARM_CM3/port.c **** 				/* How many complete tick periods passed while the processor
 583:FreeRTOS/portable/ARM_CM3/port.c **** 				was waiting? */
 584:FreeRTOS/portable/ARM_CM3/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 585:FreeRTOS/portable/ARM_CM3/port.c **** 
 586:FreeRTOS/portable/ARM_CM3/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 587:FreeRTOS/portable/ARM_CM3/port.c **** 				period remains. */
 588:FreeRTOS/portable/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 589:FreeRTOS/portable/ARM_CM3/port.c **** 			}
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 24


 590:FreeRTOS/portable/ARM_CM3/port.c **** 
 591:FreeRTOS/portable/ARM_CM3/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 592:FreeRTOS/portable/ARM_CM3/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 593:FreeRTOS/portable/ARM_CM3/port.c **** 			value.  The critical section is used to ensure the tick interrupt
 594:FreeRTOS/portable/ARM_CM3/port.c **** 			can only execute once in the case that the reload register is near
 595:FreeRTOS/portable/ARM_CM3/port.c **** 			zero. */
 596:FreeRTOS/portable/ARM_CM3/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 597:FreeRTOS/portable/ARM_CM3/port.c **** 			portENTER_CRITICAL();
 598:FreeRTOS/portable/ARM_CM3/port.c **** 			{
 599:FreeRTOS/portable/ARM_CM3/port.c **** 				portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 600:FreeRTOS/portable/ARM_CM3/port.c **** 				vTaskStepTick( ulCompleteTickPeriods );
 601:FreeRTOS/portable/ARM_CM3/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 602:FreeRTOS/portable/ARM_CM3/port.c **** 			}
 603:FreeRTOS/portable/ARM_CM3/port.c **** 			portEXIT_CRITICAL();
 604:FreeRTOS/portable/ARM_CM3/port.c **** 		}
 605:FreeRTOS/portable/ARM_CM3/port.c **** 	}
 606:FreeRTOS/portable/ARM_CM3/port.c **** 
 607:FreeRTOS/portable/ARM_CM3/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 608:FreeRTOS/portable/ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 609:FreeRTOS/portable/ARM_CM3/port.c **** 
 610:FreeRTOS/portable/ARM_CM3/port.c **** /*
 611:FreeRTOS/portable/ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 612:FreeRTOS/portable/ARM_CM3/port.c ****  * frequency.
 613:FreeRTOS/portable/ARM_CM3/port.c ****  */
 614:FreeRTOS/portable/ARM_CM3/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 615:FreeRTOS/portable/ARM_CM3/port.c **** {
 443              		.loc 1 615 1 is_stmt 1 view -0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 0
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447              		@ link register save eliminated.
 616:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 617:FreeRTOS/portable/ARM_CM3/port.c **** 	#if configUSE_TICKLESS_IDLE == 1
 618:FreeRTOS/portable/ARM_CM3/port.c **** 	{
 619:FreeRTOS/portable/ARM_CM3/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 620:FreeRTOS/portable/ARM_CM3/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 621:FreeRTOS/portable/ARM_CM3/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 622:FreeRTOS/portable/ARM_CM3/port.c **** 	}
 623:FreeRTOS/portable/ARM_CM3/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 624:FreeRTOS/portable/ARM_CM3/port.c **** 
 625:FreeRTOS/portable/ARM_CM3/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 626:FreeRTOS/portable/ARM_CM3/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 448              		.loc 1 626 2 view .LVU78
 449              		.loc 1 626 28 is_stmt 0 view .LVU79
 450 0000 4FF0E023 		mov	r3, #-536813568
 451 0004 024A     		ldr	r2, .L21
 452 0006 5A61     		str	r2, [r3, #20]
 627:FreeRTOS/portable/ARM_CM3/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 453              		.loc 1 627 2 is_stmt 1 view .LVU80
 454              		.loc 1 627 28 is_stmt 0 view .LVU81
 455 0008 0722     		movs	r2, #7
 456 000a 1A61     		str	r2, [r3, #16]
 628:FreeRTOS/portable/ARM_CM3/port.c **** }
 457              		.loc 1 628 1 view .LVU82
 458 000c 7047     		bx	lr
 459              	.L22:
 460 000e 00BF     		.align	2
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 25


 461              	.L21:
 462 0010 3F190100 		.word	71999
 463              		.cfi_endproc
 464              	.LFE44:
 466              		.section	.text.xPortStartScheduler,"ax",%progbits
 467              		.align	1
 468              		.global	xPortStartScheduler
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 473              	xPortStartScheduler:
 474              	.LFB38:
 289:FreeRTOS/portable/ARM_CM3/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 475              		.loc 1 289 1 is_stmt 1 view -0
 476              		.cfi_startproc
 477              		@ Volatile: function does not return.
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 480 0000 08B5     		push	{r3, lr}
 481              	.LCFI1:
 482              		.cfi_def_cfa_offset 8
 483              		.cfi_offset 3, -8
 484              		.cfi_offset 14, -4
 292:FreeRTOS/portable/ARM_CM3/port.c **** 
 485              		.loc 1 292 54 view .LVU84
 339:FreeRTOS/portable/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 486              		.loc 1 339 2 view .LVU85
 339:FreeRTOS/portable/ARM_CM3/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 487              		.loc 1 339 23 is_stmt 0 view .LVU86
 488 0002 4FF0E023 		mov	r3, #-536813568
 489 0006 D3F8202D 		ldr	r2, [r3, #3360]
 490 000a 42F47002 		orr	r2, r2, #15728640
 491 000e C3F8202D 		str	r2, [r3, #3360]
 340:FreeRTOS/portable/ARM_CM3/port.c **** 
 492              		.loc 1 340 2 is_stmt 1 view .LVU87
 340:FreeRTOS/portable/ARM_CM3/port.c **** 
 493              		.loc 1 340 23 is_stmt 0 view .LVU88
 494 0012 D3F8202D 		ldr	r2, [r3, #3360]
 495 0016 42F07042 		orr	r2, r2, #-268435456
 496 001a C3F8202D 		str	r2, [r3, #3360]
 344:FreeRTOS/portable/ARM_CM3/port.c **** 
 497              		.loc 1 344 2 is_stmt 1 view .LVU89
 498 001e FFF7FEFF 		bl	vPortSetupTimerInterrupt
 499              	.LVL13:
 347:FreeRTOS/portable/ARM_CM3/port.c **** 
 500              		.loc 1 347 2 view .LVU90
 347:FreeRTOS/portable/ARM_CM3/port.c **** 
 501              		.loc 1 347 20 is_stmt 0 view .LVU91
 502 0022 034B     		ldr	r3, .L25
 503 0024 0022     		movs	r2, #0
 504 0026 1A60     		str	r2, [r3]
 350:FreeRTOS/portable/ARM_CM3/port.c **** 
 505              		.loc 1 350 2 is_stmt 1 view .LVU92
 506 0028 FFF7FEFF 		bl	prvPortStartFirstTask
 507              	.LVL14:
 356:FreeRTOS/portable/ARM_CM3/port.c **** 
 508              		.loc 1 356 2 view .LVU93
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 26


 509 002c FFF7FEFF 		bl	prvTaskExitError
 510              	.LVL15:
 511              	.L26:
 512              		.align	2
 513              	.L25:
 514 0030 00000000 		.word	.LANCHOR0
 515              		.cfi_endproc
 516              	.LFE38:
 518              		.section	.data.uxCriticalNesting,"aw"
 519              		.align	2
 520              		.set	.LANCHOR0,. + 0
 523              	uxCriticalNesting:
 524 0000 AAAAAAAA 		.word	-1431655766
 525              		.text
 526              	.Letext0:
 527              		.file 3 "e:\\programdata\\gnu arm embedded toolchain\\arm-none-eabi\\include\\machine\\_default_ty
 528              		.file 4 "e:\\programdata\\gnu arm embedded toolchain\\arm-none-eabi\\include\\sys\\_stdint.h"
 529              		.file 5 "FreeRTOS/include/projdefs.h"
 530              		.file 6 "FreeRTOS/include/task.h"
ARM GAS  C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:18     .text.prvTaskExitError:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:23     .text.prvTaskExitError:00000000 prvTaskExitError
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:64     .text.prvPortStartFirstTask:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:69     .text.prvPortStartFirstTask:00000000 prvPortStartFirstTask
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:98     .text.pxPortInitialiseStack:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:104    .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:148    .text.pxPortInitialiseStack:00000020 $d
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:153    .text.SVC_Handler:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:159    .text.SVC_Handler:00000000 SVC_Handler
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:181    .text.SVC_Handler:00000020 pxCurrentTCBConst2
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:181    .text.SVC_Handler:00000020 $d
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:191    .text.vPortEndScheduler:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:197    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:211    .text.vPortEnterCritical:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:217    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:256    .text.vPortEnterCritical:0000001c $d
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:261    .text.vPortExitCritical:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:267    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:307    .text.vPortExitCritical:00000010 $d
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:312    .text.PendSV_Handler:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:318    .text.PendSV_Handler:00000000 PendSV_Handler
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:353    .text.PendSV_Handler:00000040 pxCurrentTCBConst
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:353    .text.PendSV_Handler:00000040 $d
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:363    .text.xPortSysTickHandler:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:369    .text.xPortSysTickHandler:00000000 xPortSysTickHandler
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:435    .text.vPortSetupTimerInterrupt:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:441    .text.vPortSetupTimerInterrupt:00000000 vPortSetupTimerInterrupt
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:462    .text.vPortSetupTimerInterrupt:00000010 $d
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:467    .text.xPortStartScheduler:00000000 $t
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:473    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:514    .text.xPortStartScheduler:00000030 $d
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:519    .data.uxCriticalNesting:00000000 $d
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:523    .data.uxCriticalNesting:00000000 uxCriticalNesting
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:97     .text.prvPortStartFirstTask:0000001a $d
C:\Users\nine\AppData\Local\Temp\ccf7nVVu.s:1756   .text.prvPortStartFirstTask:0000001c $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
